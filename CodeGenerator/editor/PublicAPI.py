import JsonInterface
import inspect
import copy
import json
import os


class PublicAPI():
    ROBOT_LIBRARY_SCOPE = 'TEST SUITE'
    def __init__(self,scg_ip=None,port=7443,pubapi_version=None):
        self.SAVE_RESPONSE = True if os.environ.get('SAVE_RESPONSE','True')=='True' else False 
        self.response_ids = {} 
        self.session=JsonInterface.JsonInterface(scg_ip=scg_ip, port=port, pubapi_version=pubapi_version)
    

    def gen_json_data(self, data = {}):
        _data = copy.deepcopy(data)
        for key in data.keys():
            if data[key] is None:
                _data.pop(key)
            if type(data[key]) is dict:
                data_recursive = self.gen_json_data(data[key])
                if len(data_recursive) == 0:
                    _data.pop(key)
                else:
                    _data[key] = data_recursive
            if type(data[key]) is list:
                if data[key][0] is None:
                    _data.pop(key)
                if type(data[key][0]) is dict:
                    data_recursive1 = self.gen_json_data(data[key][0])
                    if len(data_recursive1) == 0:
                        _data.pop(key)
                    else:
                        _data[key][0] = data_recursive1
        return _data
    

    def insert_response_id(self,name,value):
        if name and value:
            self.response_ids.update({name:value})
    

    def delete_response_id(self,name):
        if name:
            del self.response_ids[name]
    

    def get_id_from_response(self, response):
        if response:
            res_id = response['id']
            return res_id
        return None
    

    def get_id_from_name(self, name):
        if self.response_ids.has_key(name):
            return self.response_ids[name]
        else:
            print 'No ID entry found for %s'%name
            return None
    

    def sci_get_sci_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Sci Get Sci Profiles    
        '''
        
        response = self.session.get('/sci/sciProfile')
        return response
        

    def sci_update_sci_profile(self, sciProfile, sciSystemId, sciServerPort, sciPassword, sciUser, sciServerHost, url_id, id=None):
        '''
        Mandatory Params :
        url_id : ""
        sciProfile (String)  : Profile name of the SCI profile for SZ/SCI interface
        sciSystemId (String)  : SCI system UUID of the SCI profile for SZ/SCI interface
        sciServerHost (String)  : SCI server host of the SCI profile for SZ/SCI interface
        sciServerPort (String)  : SCI server port of the SCI profile for SZ/SCI interface
        sciUser (String)  : SCI user name of the SCI profile for SZ/SCI interface
        sciPassword (String)  : SCI password of the SCI profile for SZ/SCI interface
        
        Optional Params  :
        id (String)  : UUID of the SCI profile for SZ/SCI interface
        
        Robot Format :
        Sci Update Sci Profile    url_id    sciProfile    sciSystemId    sciServerHost    sciServerPort    sciUser    sciPassword
        '''
        
        data={"sciProfile" : sciProfile,"sciSystemId" : sciSystemId,"sciServerPort" : sciServerPort,"sciPassword" : sciPassword,"sciUser" : sciUser,"sciServerHost" : sciServerHost,"id" : id}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/sci/sciProfile/{id}'.format(id=url_id),jdata)
        

    def sci_update_sci_accepted_event_codes(self, sciAcceptedEventCodes):
        '''
        Mandatory Params :
        sciAcceptedEventCodes : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Sci Update Sci Accepted Event Codes    sciAcceptedEventCodes
        '''
        
        data={"sciAcceptedEventCodes":[ sciAcceptedEventCodes]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/sci/sciEventCode',jdata)
        return response
        

    def sci_get_sci_accepted_event_codes(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Sci Get Sci Accepted Event Codes    
        '''
        
        response = self.session.get('/sci/sciEventCode')
        return response
        

    def sci_update_sci_priorities(self, list_sciProfile=None, list_sciPriority=None, list_id=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        list_sciPriority (Integer)  : Priority of the SCI profile for SZ/SCI interface
        list_sciProfile (String)  : Profile name of the SCI profile for SZ/SCI interface
        list_id (String)  : UUID of the SCI profile for SZ/SCI interface
        
        Robot Format :
        Sci Update Sci Priorities    
        '''
        
        data={"list":[{"sciPriority" : list_sciPriority,"sciProfile" : list_sciProfile,"id" : list_id}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/sci/sciProfile/sciPriority',jdata)
        return response
        

    def sci_delete_sci_profiles(self, list_id=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        list_id (String)  : UUID of the SCI profile for SZ/SCI interface
        
        Robot Format :
        Sci Delete Sci Profiles    
        '''
        
        response = self.session.delete('/sci/sciProfile')
        

    def sci_update_sci_enabled(self, sciEnabled):
        '''
        Mandatory Params :
        sciEnabled (Boolean)  : Is SZ/SCI interface enabled or disabled
        
        Optional Params  :
        None
        
        Robot Format :
        Sci Update Sci Enabled    sciEnabled
        '''
        
        data={"sciEnabled" : sciEnabled}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/sci/sciEnabled',jdata)
        

    def sci_delete_sci_profile(self, url_id, id):
        '''
        Mandatory Params :
        url_id : ""
        id (String)  : UUID of the SCI profile for SZ/SCI interface
        
        Optional Params  :
        None
        
        Robot Format :
        Sci Delete Sci Profile    url_id    id
        '''
        
        response = self.session.delete('/sci/sciProfile/{id}'.format(id=url_id))
        

    def sci_create_sci_profile(self, sciProfile, sciSystemId, sciServerPort, sciPassword, sciUser, sciServerHost):
        '''
        Mandatory Params :
        sciProfile (String)  : Profile name of the SCI profile for SZ/SCI interface
        sciSystemId (String)  : SCI system UUID of the SCI profile for SZ/SCI interface
        sciServerHost (String)  : SCI server host of the SCI profile for SZ/SCI interface
        sciServerPort (String)  : SCI server port of the SCI profile for SZ/SCI interface
        sciUser (String)  : SCI user name of the SCI profile for SZ/SCI interface
        sciPassword (String)  : SCI password of the SCI profile for SZ/SCI interface
        
        Optional Params  :
        None
        
        Robot Format :
        Sci Create Sci Profile    sciProfile    sciSystemId    sciServerHost    sciServerPort    sciUser    sciPassword
        '''
        
        data={"sciProfile" : sciProfile,"sciSystemId" : sciSystemId,"sciServerPort" : sciServerPort,"sciPassword" : sciPassword,"sciUser" : sciUser,"sciServerHost" : sciServerHost}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/sci/sciProfile',jdata)
        return response
        

    def sci_get_sci_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Sci Get Sci Profile    url_id
        '''
        
        response = self.session.get('/sci/sciProfile/{id}'.format(id=url_id))
        return response
        

    def precedence_get_precedence_profile_by_query_critaria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Precedence Get Precedence Profile By Query Critaria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/precedence/query',jdata)
        return response
        

    def precedence_get_precedence_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Precedence Get Precedence Profile    url_id
        '''
        
        response = self.session.get('/precedence/{id}'.format(id=url_id))
        return response
        

    def precedence_delete_precedence_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Precedence Delete Precedence Profile    url_id
        '''
        
        response = self.session.delete('/precedence/{id}'.format(id=url_id))
        

    def precedence_create_precedence_profile(self, vlanPrecedence_priority=None, domainId=None, name=None, rateLimitingPrecedence_name=None, vlanPrecedence_name=None, rateLimitingPrecedence_priority=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        vlanPrecedence_priority (Integer)  : Priority
        vlanPrecedence_name (Enum)  : Name of the Vlan precedence item
        rateLimitingPrecedence_priority (Integer)  : Priority
        rateLimitingPrecedence_name (Enum)  : Name of rate limiting precedence item
        name (String)  : Name of the precedence profile
        domainId (String)  : Domain UUID
        
        Robot Format :
        Precedence Create Precedence Profile    
        '''
        
        data={"vlanPrecedence":[{"priority" : vlanPrecedence_priority,"name" : vlanPrecedence_name}],"rateLimitingPrecedence":[{"priority" : rateLimitingPrecedence_priority,"name" : rateLimitingPrecedence_name}],"name" : name,"domainId" : domainId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/precedence',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def precedence_get_precedence_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Precedence Get Precedence Profiles    
        '''
        
        response = self.session.get('/precedence')
        return response
        

    def precedence_update_precedence_profile(self, url_id, vlanPrecedence_priority=None, domainId=None, name=None, rateLimitingPrecedence_name=None, vlanPrecedence_name=None, rateLimitingPrecedence_priority=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        vlanPrecedence_priority (Integer)  : Priority
        vlanPrecedence_name (Enum)  : Name of the Vlan precedence item
        rateLimitingPrecedence_priority (Integer)  : Priority
        rateLimitingPrecedence_name (Enum)  : Name of rate limiting precedence item
        name (String)  : Name of the precedence profile
        domainId (String)  : Domain UUID
        
        Robot Format :
        Precedence Update Precedence Profile    url_id
        '''
        
        data={"vlanPrecedence":[{"priority" : vlanPrecedence_priority,"name" : vlanPrecedence_name}],"rateLimitingPrecedence":[{"priority" : rateLimitingPrecedence_priority,"name" : rateLimitingPrecedence_name}],"name" : name,"domainId" : domainId}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/precedence/{id}'.format(id=url_id),jdata)
        

    def aps_disable_override_v2_since_location_additional_info(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V2 Since Location Additional Info    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/locationAdditionalInfo'.format(apMac=url_apMac))
        

    def aps_disable_override_v2_since_client_admission_control24(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V2 Since Client Admission Control24    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/clientAdmissionControl24'.format(apMac=url_apMac))
        

    def aps_get_alarm_summary(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Alarm Summary    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/alarmSummary'.format(apMac=url_apMac))
        return response
        

    def aps_download_support_log(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Download Support Log    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/supportLog'.format(apMac=url_apMac))
        return response
        

    def aps_reboot_ap(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Reboot Ap    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/aps/{apMac}/reboot'.format(apMac=url_apMac),jdata)
        

    def aps_blink_led(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Blink Led    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/aps/{apMac}/operational/blinkLed'.format(apMac=url_apMac),jdata)
        return response
        

    def aps_get_picture(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Picture    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/picture'.format(apMac=url_apMac))
        return response
        

    def aps_disable_override_auto_channel_selection50(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Auto Channel Selection50    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/autoChannelSelection50'.format(apMac=url_apMac))
        

    def aps_disable_override_v3_since_wifi50_channel_range(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Wifi50 Channel Range    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi50/channelRange'.format(apMac=url_apMac))
        

    def aps_disable_override_ap_mgmt_vlan(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Ap Mgmt Vlan    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/apMgmtVlan'.format(apMac=url_apMac))
        

    def aps_disable_override_v4_since(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V4 Since    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/meshOptions'.format(apMac=url_apMac))
        

    def aps_disable_override_wifi50(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Wifi50    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi50'.format(apMac=url_apMac))
        

    def aps_get_ap_associate_usb_software_by_model(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Ap Associate Usb Software By Model    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/usbsoftware'.format(apMac=url_apMac))
        return response
        

    def aps_disable_override_v3_since_wifi50_tx_power(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Wifi50 Tx Power    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi50/txPower'.format(apMac=url_apMac))
        

    def aps_disable_override_login(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Login    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/login'.format(apMac=url_apMac))
        

    def aps_get_events_by_elastic(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Events By Elastic    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/events'.format(apMac=url_apMac))
        return response
        

    def aps_get_event_summary(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Event Summary    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/eventSummary'.format(apMac=url_apMac))
        return response
        

    def aps_total_client_count(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Total Client Count    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/client/totalCount'.format(apMac=url_apMac))
        return response
        

    def aps_disable_override_channel_evaluation_interval(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Channel Evaluation Interval    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/channelEvaluationInterval'.format(apMac=url_apMac))
        

    def aps_create(self, mac, zoneId, name=None, longitude=None, provisionChecklist=None, gpsSource=None, location=None, apGroupId=None, latitude=None, administrativeState=None, model=None, serial=None, description=None):
        '''
        Mandatory Params :
        mac (String)  : MAC address of the AP
        zoneId (String)  : Identifier of the zone to which the AP belongs
        
        Optional Params  :
        name (String)  : Name of the AP
        description (String)  : Description of the AP
        gpsSource : ""
        longitude (Integer)  : Longitude coordinate (in decimal format) of the AP
        location (String)  : Location of the AP. This is a free format text description that indicates the location of the AP.
        apGroupId (String)  : Identifier of the AP group to which the AP belongs. If the AP belongs to the default AP group, this property is not needed.
        latitude (Integer)  : Latitude coordinate (in decimal format) of the AP
        administrativeState (Enum)  : Administrative state of the AP. A locked AP will not provide any WLAN services.
        model (String)  : Model name of the AP
        serial (String)  : Serial number of the AP
        provisionChecklist (String)  : Provision checklist of the AP. This field indicates the steps that have been completed in the AP provisioning process.
        
        Robot Format :
        Aps Create    mac    zoneId
        '''
        
        data={"name" : name,"description" : description,"gpsSource" : gpsSource,"longitude" : longitude,"zoneId" : zoneId,"mac" : mac,"location" : location,"apGroupId" : apGroupId,"latitude" : latitude,"administrativeState" : administrativeState,"model" : model,"serial" : serial,"provisionChecklist" : provisionChecklist}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/aps',jdata)
        return response
        

    def aps_disable_override_auto_channel_selection24(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Auto Channel Selection24    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/autoChannelSelection24'.format(apMac=url_apMac))
        

    def aps_disable_override_v2_since_venue_profile(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V2 Since Venue Profile    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/venueProfile'.format(apMac=url_apMac))
        

    def aps_get_operational_summary(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Operational Summary    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/summary'.format(apMac=url_apMac))
        return response
        

    def aps_update_ap_model_specific(self, url_apMac, lanPorts_enabled=None, lanPorts_members=None, radioBand=None, externalAntenna50_chainMask=None, externalAntenna24_chainMask=None, ledMode=None, externalAntenna50_enabled=None, poeOutPortEnabled=None, lanPorts_ethPortProfile_name=None, usbPowerEnable=None, externalAntenna24_enabled=None, lanPorts_overwriteVlanEnabled=None, externalAntenna50_dbi=None, lldp_holdTimeInSec=None, lanPorts_ethPortProfile_id=None, lldp_advertiseIntervalInSec=None, externalAntenna24_dbi=None, lanPorts_portName=None, poeModeSetting=None, lldp_managementIPTLVEnabled=None, lanPorts_vlanUntagId=None, poeTxChain=None, internalHeaterEnabled=None, lldp_enabled=None, ledStatusEnabled=None):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        lldp_holdTimeInSec : ""
        lldp_advertiseIntervalInSec : ""
        lldp_enabled : ""
        lldp_managementIPTLVEnabled : ""
        externalAntenna50_dbi : ""
        externalAntenna50_enabled : ""
        externalAntenna50_chainMask : ""
        radioBand : ""
        ledStatusEnabled : ""
        usbPowerEnable : ""
        ledMode : ""
        internalHeaterEnabled : ""
        externalAntenna24_dbi : ""
        externalAntenna24_enabled : ""
        externalAntenna24_chainMask : ""
        lanPorts_vlanUntagId : ""
        lanPorts_enabled : ""
        lanPorts_members : ""
        lanPorts_portName : ""
        lanPorts_overwriteVlanEnabled : ""
        lanPorts_ethPortProfile_id : ""
        lanPorts_ethPortProfile_name : ""
        poeOutPortEnabled : ""
        poeModeSetting : ""
        poeTxChain : ""
        
        Robot Format :
        Aps Update Ap Model Specific    url_apMac
        '''
        
        data={"lldp":{"holdTimeInSec" : lldp_holdTimeInSec,"advertiseIntervalInSec" : lldp_advertiseIntervalInSec,"enabled" : lldp_enabled,"managementIPTLVEnabled" : lldp_managementIPTLVEnabled},"externalAntenna50":{"dbi" : externalAntenna50_dbi,"enabled" : externalAntenna50_enabled,"chainMask" : externalAntenna50_chainMask},"radioBand" : radioBand,"ledStatusEnabled" : ledStatusEnabled,"usbPowerEnable" : usbPowerEnable,"ledMode" : ledMode,"internalHeaterEnabled" : internalHeaterEnabled,"externalAntenna24":{"dbi" : externalAntenna24_dbi,"enabled" : externalAntenna24_enabled,"chainMask" : externalAntenna24_chainMask},"lanPorts":[{"vlanUntagId" : lanPorts_vlanUntagId,"enabled" : lanPorts_enabled,"members" : lanPorts_members,"portName" : lanPorts_portName,"overwriteVlanEnabled" : lanPorts_overwriteVlanEnabled,"ethPortProfile":{"id" : lanPorts_ethPortProfile_id,"name" : lanPorts_ethPortProfile_name}}],"poeOutPortEnabled" : poeOutPortEnabled,"poeModeSetting" : poeModeSetting,"poeTxChain" : poeTxChain}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/aps/{apMac}/specific'.format(apMac=url_apMac),jdata)
        

    def aps_disable_override_v3_since_wifi24_channel_width(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Wifi24 Channel Width    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi24/channelWidth'.format(apMac=url_apMac))
        

    def aps_delete_picture(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Delete Picture    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/picture'.format(apMac=url_apMac))
        

    def aps_bc_deprecated_upload_picture(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Bc Deprecated Upload Picture    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/aps/{apMac}/picture'.format(apMac=url_apMac),jdata)
        

    def aps_disable_override_v2_since_bonjour_gateway(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V2 Since Bonjour Gateway    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/bonjourGateway'.format(apMac=url_apMac))
        

    def aps_get_on_demand_data(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get On Demand Data    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/onDemandData'.format(apMac=url_apMac))
        return response
        

    def aps_disable_ap_model_specific(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Ap Model Specific    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/specific'.format(apMac=url_apMac))
        

    def aps_disable_override_altitude(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Altitude    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/altitude'.format(apMac=url_apMac))
        

    def aps_get_clients(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Clients    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/client'.format(apMac=url_apMac))
        return response
        

    def aps_disable_override_v3_since_wifi50_channel_width(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Wifi50 Channel Width    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi50/channelWidth'.format(apMac=url_apMac))
        

    def aps_get_bonjour_fencing_statistic(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Bonjour Fencing Statistic    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/bonjourFencingStatistic'.format(apMac=url_apMac))
        return response
        

    def aps_upload_picture(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Upload Picture    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/aps/{apMac}/picture'.format(apMac=url_apMac),jdata)
        return response
        

    def aps_get_ap_list_with_capability_order_by_zone_id(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Ap List With Capability Order By Zone Id    url_zoneId
        '''
        
        response = self.session.get('/aps/{zoneId}/apListOrderbyCapability'.format(zoneId=url_zoneId))
        return response
        

    def aps_get_ap(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Ap    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}'.format(apMac=url_apMac))
        return response
        

    def aps_disable_override_v3_since_wifi24_tx_power(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Wifi24 Tx Power    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi24/txPower'.format(apMac=url_apMac))
        

    def aps_get(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get    
        '''
        
        response = self.session.get('/aps')
        return response
        

    def aps_disable_override_syslog(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Syslog    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/syslog'.format(apMac=url_apMac))
        

    def aps_update(self, url_apMac, usbSoftwarePackage_applyModel=None, model=None, userLocationInfo_areaCode=None, venueProfile_id=None, longitude=None, smartMonitor_retryThreshold=None, autoChannelSelection50_channelFlyMtbc=None, clientAdmissionControl50_minClientCount=None, usbSoftwarePackage_usbSoftware_name=None, smartMonitor_enabled=None, syslog_facility=None, gpsSource=None, apMgmtVlan_id=None, clientAdmissionControl24_minClientThroughputMbps=None, syslog_enabled=None, syslog_port=None, serial=None, wlanGroup24_name=None, wlanGroup50_id=None, channelEvaluationInterval=None, meshOptions_meshUplinkEntryList=None, network_gateway=None, autoChannelSelection24_channelSelectMode=None, wifi50_availableChannelRange=None, smartMonitor_intervalInSec=None, description=None, usbSoftwarePackage_usbSoftware_id=None, wlanGroup24_id=None, wlanGroup50_name=None, network_primaryDns=None, wifi50_channelWidth=None, clientAdmissionControl24_enabled=None, apGroupId=None, latitude=None, wlanService50Enabled=None, wifi24_channelRange=None, wifi24_txPower=None, bonjourGateway_id=None, zoneId=None, altitude_altitudeValue=None, altitude_altitudeUnit=None, autoChannelSelection24_channelFlyMtbc=None, name=None, network_ipType=None, wifi24_channelWidth=None, wifi50_channelRange=None, clientAdmissionControl24_minClientCount=None, locationAdditionalInfo=None, clientAdmissionControl50_enabled=None, meshOptions_uplinkSelection=None, wifi50_txPower=None, login_apLoginName=None, autoChannelSelection50_channelSelectMode=None, syslog_address=None, administrativeState=None, wlanService24Enabled=None, venueProfile_name=None, apMgmtVlan_mode=None, bonjourGateway_name=None, wifi24_availableChannelRange=None, wifi24_channel=None, location=None, network_secondaryDns=None, wifi50_channel=None, meshOptions_meshMode=None, network_netmask=None, clientAdmissionControl24_maxRadioLoadPercent=None, clientAdmissionControl50_minClientThroughputMbps=None, syslog_priority=None, login_apLoginPassword=None, clientAdmissionControl50_maxRadioLoadPercent=None, network_ip=None, provisionChecklist=None, wifi50_secondaryChannel=None):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        bonjourGateway_id : ""
        bonjourGateway_name : ""
        syslog_priority (Enum)  : Priority of the log messages
        syslog_facility (Enum)  : Facility of the syslog server
        syslog_enabled (Boolean)  : Indicates whether syslog is enabled or disabled
        syslog_port (Integer)  : Port number of the syslog server
        syslog_address (String)  : Address of the syslog server. If syslog is enabled, this attribute is required.
        gpsSource : ""
        clientAdmissionControl24_minClientCount (Integer)  : Minimum client count number.
        clientAdmissionControl24_maxRadioLoadPercent (Integer)  : Maximum radio load percentage.
        clientAdmissionControl24_minClientThroughputMbps (Integer)  : Minimum client throughput in Mbps.
        clientAdmissionControl24_enabled : ""
        serial (String)  : Serial number of the AP
        smartMonitor_intervalInSec (Integer)  : Interval in seconds. This is required if smartMonitor is enabled
        smartMonitor_enabled : ""
        smartMonitor_retryThreshold (Integer)  : Retry threshold. This is required if smartMonitor is enabled
        channelEvaluationInterval (Integer)  : channel evaluation Interval of the AP
        wifi50_availableChannelRange (Integer)  : available channel range options
        wifi50_channelWidth (Enum)  : channel width, 0 mean Auto, 8080 means 80+80MHz
        wifi50_secondaryChannel (Integer)  : channel number (channelWidth is 80+80MHz only)
        wifi50_channelRange (Integer)  : channel range options
        wifi50_txPower (Enum)  : transmission power
        wifi50_channel (Integer)  : channel number
        apMgmtVlan_mode (Enum)  : Vlan Mode of the zone
        apMgmtVlan_id (Integer)  : Vlan id of the zone
        autoChannelSelection24_channelFlyMtbc (Integer)  : ChannelFly MTBC
        autoChannelSelection24_channelSelectMode (Enum)  : Channel Select Mode
        network_ipType (Enum)  : Indicates how the AP's IP address was obtained. An AP's IP address can be statically or dynamically assigned or kept unchanged.
        network_ip (String)  : IP address of the AP
        network_secondaryDns (String)  : Secondary DNS server address of the AP
        network_netmask (String)  : Netmask of the AP's subnet
        network_primaryDns (String)  : Primary DNS server address of the AP
        network_gateway (String)  : Gateway of the AP
        altitude_altitudeValue (Integer)  : altitude value
        altitude_altitudeUnit (Enum)  : altitude unit
        wlanGroup24_id (String)  : Identifier of the WLAN group
        wlanGroup24_name (String)  : Name of the WLAN group
        zoneId (String)  : Identifier of the zone to which the AP belongs
        location (String)  : Location of the AP. This is a text description that indicates the location of the AP.
        apGroupId (String)  : Identifier of the AP group to which the AP belongs
        latitude (Integer)  : Latitude coordinate (in decimal format) of the AP
        meshOptions_uplinkSelection (Enum)  : Uplink selection
        meshOptions_meshMode (Enum)  : mesh mode
        meshOptions_meshUplinkEntryList (String)  : MAC address of the neighbor AP
        description (String)  : Description of the AP
        wifi24_txPower (Enum)  : Transmission power
        wifi24_availableChannelRange (Integer)  : Available channel range options
        wifi24_channelWidth (Enum)  : Channel width. Zero (0) means Auto.
        wifi24_channelRange (Integer)  : Channel range options
        wifi24_channel (Integer)  : Channel number
        locationAdditionalInfo (String)  : Location additional info of the AP. This is a text description that indicates the location additional info of the AP.
        wlanGroup50_id (String)  : Identifier of the WLAN group
        wlanGroup50_name (String)  : Name of the WLAN group
        login_apLoginName (String)  : User name of the AP administrator
        login_apLoginPassword (String)  : Password of the AP administrator
        wlanService24Enabled (Boolean)  : WLAN service enabled or disabled on 2.4GHz radio
        venueProfile_id : ""
        venueProfile_name : ""
        name (String)  : Name of the AP
        usbSoftwarePackage_applyModel (String)  : List of apply models
        usbSoftwarePackage_usbSoftware_id : ""
        usbSoftwarePackage_usbSoftware_name : ""
        autoChannelSelection50_channelFlyMtbc (Integer)  : ChannelFly MTBC
        autoChannelSelection50_channelSelectMode (Enum)  : Channel Select Mode
        longitude (Integer)  : Longitude coordinate (in decimal format) of the AP
        administrativeState (Enum)  : Administrative state of the AP. A locked AP will not provide any WLAN services.
        wlanService50Enabled (Boolean)  : WLAN service enabled or disabled on 5GHz radio
        userLocationInfo_areaCode (Integer)  : area code
        clientAdmissionControl50_minClientCount (Integer)  : Minimum client count number.
        clientAdmissionControl50_maxRadioLoadPercent (Integer)  : Maximum radio load percentage.
        clientAdmissionControl50_minClientThroughputMbps (Integer)  : Minimum client throughput in Mbps.
        clientAdmissionControl50_enabled : ""
        model (String)  : Model name of the AP
        provisionChecklist (String)  : Provision checklist of the AP. This field indicates the steps that have been completed in the AP provisioning process.
        
        Robot Format :
        Aps Update    url_apMac
        '''
        
        data={"bonjourGateway":{"id" : bonjourGateway_id,"name" : bonjourGateway_name},"syslog":{"priority" : syslog_priority,"facility" : syslog_facility,"enabled" : syslog_enabled,"port" : syslog_port,"address" : syslog_address},"gpsSource" : gpsSource,"clientAdmissionControl24":{"minClientCount" : clientAdmissionControl24_minClientCount,"maxRadioLoadPercent" : clientAdmissionControl24_maxRadioLoadPercent,"minClientThroughputMbps" : clientAdmissionControl24_minClientThroughputMbps,"enabled" : clientAdmissionControl24_enabled},"serial" : serial,"smartMonitor":{"intervalInSec" : smartMonitor_intervalInSec,"enabled" : smartMonitor_enabled,"retryThreshold" : smartMonitor_retryThreshold},"channelEvaluationInterval" : channelEvaluationInterval,"wifi50":{"availableChannelRange":[ wifi50_availableChannelRange],"channelWidth" : wifi50_channelWidth,"secondaryChannel" : wifi50_secondaryChannel,"channelRange":[ wifi50_channelRange],"txPower" : wifi50_txPower,"channel" : wifi50_channel},"apMgmtVlan":{"mode" : apMgmtVlan_mode,"id" : apMgmtVlan_id},"autoChannelSelection24":{"channelFlyMtbc" : autoChannelSelection24_channelFlyMtbc,"channelSelectMode" : autoChannelSelection24_channelSelectMode},"network":{"ipType" : network_ipType,"ip" : network_ip,"secondaryDns" : network_secondaryDns,"netmask" : network_netmask,"primaryDns" : network_primaryDns,"gateway" : network_gateway},"altitude":{"altitudeValue" : altitude_altitudeValue,"altitudeUnit" : altitude_altitudeUnit},"wlanGroup24":{"id" : wlanGroup24_id,"name" : wlanGroup24_name},"zoneId" : zoneId,"location" : location,"apGroupId" : apGroupId,"latitude" : latitude,"meshOptions":{"uplinkSelection" : meshOptions_uplinkSelection,"meshMode" : meshOptions_meshMode,"meshUplinkEntryList":[ meshOptions_meshUplinkEntryList]},"description" : description,"wifi24":{"txPower" : wifi24_txPower,"availableChannelRange":[ wifi24_availableChannelRange],"channelWidth" : wifi24_channelWidth,"channelRange":[ wifi24_channelRange],"channel" : wifi24_channel},"locationAdditionalInfo" : locationAdditionalInfo,"wlanGroup50":{"id" : wlanGroup50_id,"name" : wlanGroup50_name},"login":{"apLoginName" : login_apLoginName,"apLoginPassword" : login_apLoginPassword},"wlanService24Enabled" : wlanService24Enabled,"venueProfile":{"id" : venueProfile_id,"name" : venueProfile_name},"name" : name,"usbSoftwarePackage":{"applyModel":[ usbSoftwarePackage_applyModel],"usbSoftware":{"id" : usbSoftwarePackage_usbSoftware_id,"name" : usbSoftwarePackage_usbSoftware_name}},"autoChannelSelection50":{"channelFlyMtbc" : autoChannelSelection50_channelFlyMtbc,"channelSelectMode" : autoChannelSelection50_channelSelectMode},"longitude" : longitude,"administrativeState" : administrativeState,"wlanService50Enabled" : wlanService50Enabled,"userLocationInfo":{"areaCode" : userLocationInfo_areaCode},"clientAdmissionControl50":{"minClientCount" : clientAdmissionControl50_minClientCount,"maxRadioLoadPercent" : clientAdmissionControl50_maxRadioLoadPercent,"minClientThroughputMbps" : clientAdmissionControl50_minClientThroughputMbps,"enabled" : clientAdmissionControl50_enabled},"model" : model,"provisionChecklist" : provisionChecklist}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/aps/{apMac}'.format(apMac=url_apMac),jdata)
        

    def aps_get_mesh_on_demand_data(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Mesh On Demand Data    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/meshOnDemandData'.format(apMac=url_apMac))
        return response
        

    def aps_get_radio_status(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Radio Status    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/radios'.format(apMac=url_apMac))
        return response
        

    def aps_disable_override_v3_since_ap_mac_usb_software_package(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Ap Mac Usb Software Package    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/usbSoftwarePackage'.format(apMac=url_apMac))
        

    def aps_disable_override_v3_since_wifi50_channel(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Wifi50 Channel    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi50/channel'.format(apMac=url_apMac))
        

    def aps_total_ap_count(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Total Ap Count    
        '''
        
        response = self.session.get('/aps/totalCount')
        return response
        

    def aps_get_neighbor(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Neighbor    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/neighbor'.format(apMac=url_apMac))
        return response
        

    def aps_get_alarms_by_elastic(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Alarms By Elastic    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/alarms'.format(apMac=url_apMac))
        return response
        

    def aps_disable_override_v2_since_smart_monitor(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V2 Since Smart Monitor    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/smartMonitor'.format(apMac=url_apMac))
        

    def aps_get_client_on_demand_data(self, url_clientMac, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        url_clientMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Client On Demand Data    url_apMac    url_clientMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/clientOnDemandData?clientMac={clientMac}'.format(apMac=url_apMac,clientMac=url_clientMac))
        return response
        

    def aps_lineman(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Lineman    
        '''
        
        response = self.session.get('/aps/lineman')
        return response
        

    def aps_disable_override_v3_since_wifi24_channel_range(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Wifi24 Channel Range    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi24/channelRange'.format(apMac=url_apMac))
        

    def aps_disable_override_wifi24(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Wifi24    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi24'.format(apMac=url_apMac))
        

    def aps_disable_override_wlan_group50(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Wlan Group50    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wlanGroup50'.format(apMac=url_apMac))
        

    def aps_disable_gps_coordinates(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Gps Coordinates    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/gpsCoordinates'.format(apMac=url_apMac))
        

    def aps_get_alarms(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Alarms    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/alarms'.format(apMac=url_apMac))
        return response
        

    def aps_get_wlan_status(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Wlan Status    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/wlan'.format(apMac=url_apMac))
        return response
        

    def aps_disable_override_v2_since_client_admission_control50(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V2 Since Client Admission Control50    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/clientAdmissionControl50'.format(apMac=url_apMac))
        

    def aps_disable_override_v3_since_wifi24_channel(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V3 Since Wifi24 Channel    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wifi24/channel'.format(apMac=url_apMac))
        

    def aps_disable_override_v2_since_location(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override V2 Since Location    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/location'.format(apMac=url_apMac))
        

    def aps_get_events(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Get Events    url_apMac
        '''
        
        response = self.session.get('/aps/{apMac}/operational/events'.format(apMac=url_apMac))
        return response
        

    def aps_delete(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Delete    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}'.format(apMac=url_apMac))
        

    def aps_disable_override_wlan_group24(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Disable Override Wlan Group24    url_apMac
        '''
        
        response = self.session.delete('/aps/{apMac}/wlanGroup24'.format(apMac=url_apMac))
        

    def aps_remote_cli(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aps Remote Cli    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/aps/{apMac}/remoteCli'.format(apMac=url_apMac),jdata)
        return response
        

    def userPreference_save(self, url_widgetId):
        '''
        Mandatory Params :
        url_widgetId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Userpreference Save    url_widgetId
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/userPreference/{widgetId}'.format(widgetId=url_widgetId),jdata)
        

    def userPreference_get_all(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Userpreference Get All    
        '''
        
        response = self.session.get('/userPreference')
        return response
        

    def userPreference_get(self, url_widgetId):
        '''
        Mandatory Params :
        url_widgetId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Userpreference Get    url_widgetId
        '''
        
        response = self.session.get('/userPreference/{widgetId}'.format(widgetId=url_widgetId))
        return response
        

    def cluster_re_balance_planes(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Re Balance Planes    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/ap_balance',jdata)
        

    def cluster_get_system_summary(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get System Summary    
        '''
        
        response = self.session.get('/cluster/systemSummary')
        return response
        

    def cluster_get_all_blades(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get All Blades    
        '''
        
        response = self.session.get('/cluster/all')
        return response
        

    def cluster_apply_static_routes(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Apply Static Routes    url_bladeUUID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/route/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def cluster_get_cluster_status(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get Cluster Status    
        '''
        
        response = self.session.get('/cluster/status')
        return response
        

    def cluster_get_interfaces(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get Interfaces    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/interfaces/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_get_cluster_tree(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get Cluster Tree    
        '''
        
        response = self.session.get('/cluster/clustertree')
        return response
        

    def cluster_is_allow_cluster_operatoin(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Is Allow Cluster Operatoin    
        '''
        
        response = self.session.get('/cluster/operation/allow')
        return response
        

    def cluster_get_cluster_node(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get Cluster Node    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/clusterNode/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_get_chassis_view_by_blade(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get Chassis View By Blade    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/{bladeUUID}/chassisView'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_get_cluster_node_cp(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get Cluster Node Cp    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/clusterNode/{bladeUUID}/dp'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_get_control_node_status(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get Control Node Status    
        '''
        
        response = self.session.get('/cluster/nodeStatus')
        return response
        

    def cluster_apply_northbound_interfaces(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Apply Northbound Interfaces    url_bladeUUID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/northbound/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def cluster_get_all_routing(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Get All Routing    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/routing/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_change_cluster_state2_in_service(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Change Cluster State2 In Service    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/change2InService',jdata)
        

    def cluster_update_routing(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Update Routing    url_bladeUUID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/routing/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def cluster_apply_network_interfaces(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Apply Network Interfaces    url_bladeUUID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/network/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def session_login(self, username, password, timeZoneUtcOffset=None, apiVersions=None, domainName=None):
        '''
        Mandatory Params :
        username (String)  : Logon user name
        password (String)  : Logon password
        
        Optional Params  :
        timeZoneUtcOffset (Enum)  : Local timezone of the client, offset to UTC
        apiVersions (String)  : DEPRECATED. API version supported by the client
        domainName (String)  : Logon domain name
        
        Robot Format :
        Session Login    username    password
        '''
        
        data={"username" : username,"timeZoneUtcOffset" : timeZoneUtcOffset,"password" : password,"apiVersions":[ apiVersions],"domainName" : domainName}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/session',jdata)
        return response
        

    def session_logout(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Session Logout    
        '''
        
        response = self.session.delete('/session')
        

    def session_get(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Session Get    
        '''
        
        response = self.session.get('/session')
        return response
        

    def dhcpPools_get_dhcp_pools(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Dhcppools Get Dhcp Pools    url_apMac
        '''
        
        response = self.session.get('/dhcpPools/{apMac}'.format(apMac=url_apMac))
        return response
        

    def query_get_lbs_profile(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Lbs Profile    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/lbs',jdata)
        return response
        

    def query_get_ethernet_port_profile(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Ethernet Port Profile    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/ethernetPortProfile',jdata)
        return response
        

    def query_get_bonjour_policy(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Bonjour Policy    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/bonjourPolicy',jdata)
        return response
        

    def query_get_dhcp_profile(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Dhcp Profile    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/dhcpProfile',jdata)
        return response
        

    def query_get_aaa_server(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Aaa Server    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/aaaServer',jdata)
        return response
        

    def query_get_web_authentication(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Web Authentication    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/webAuthentication',jdata)
        return response
        

    def query_get_user(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get User    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/user',jdata)
        return response
        

    def query_get_guess_access(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Guess Access    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/guessAccess',jdata)
        return response
        

    def query_is_contain_zone_before35(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Is Contain Zone Before35    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/containsZoneBefore35',jdata)
        return response
        

    def query_get_dscp_profile(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Dscp Profile    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/dscpProfile',jdata)
        return response
        

    def query_export_historical_clients(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Export Historical Clients    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/historicalclient/export',jdata)
        return response
        

    def query_get_device_policy(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Device Policy    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/devicePolicy',jdata)
        return response
        

    def query_get_user_denied_application(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get User Denied Application    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/userDefined',jdata)
        return response
        

    def query_get_rogue_infos_by_type_and_rogue_mac(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Rogue Infos By Type And Rogue Mac    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/roguesInfoList',jdata)
        return response
        

    def query_get_venue_profile(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Venue Profile    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/venueProfile',jdata)
        return response
        

    def query_get_historical_clients(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Historical Clients    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/historicalclient',jdata)
        return response
        

    def query_get_clients(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Clients    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/client',jdata)
        return response
        

    def query_get_wlan_scheduler(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Wlan Scheduler    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/wlanScheduler',jdata)
        return response
        

    def query_get_aaa_server_auth(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Aaa Server Auth    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/aaaServer/auth',jdata)
        return response
        

    def query_get_l2_access_control(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get L2 Access Control    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/l2AccessControl',jdata)
        return response
        

    def query_get_indoor_map(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Indoor Map    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/indoorMap',jdata)
        return response
        

    def query_get_wechat_profile(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Wechat Profile    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/wechatProfile',jdata)
        return response
        

    def query_get_wlans(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Wlans    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/wlan',jdata)
        return response
        

    def query_get_client_isolation_whitelist(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Client Isolation Whitelist    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/clientIsolationWhitelist',jdata)
        return response
        

    def query_get_ap_by_place_status(self, url_groupType, url_groupId, url_indoorMapId):
        '''
        Mandatory Params :
        url_groupId : ""
        url_groupType : ""
        url_indoorMapId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Ap By Place Status    url_groupId    url_groupType    url_indoorMapId
        '''
        
        response = self.session.get('/query/onMap?groupId={groupId}&groupType={groupType}&indoorMapId={indoorMapId}'.format(groupId=url_groupId,groupType=url_groupType,indoorMapId=url_indoorMapId))
        return response
        

    def query_get_hotspot20_profile(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Hotspot20 Profile    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/hotspot20Profile',jdata)
        return response
        

    def query_get_hotspot(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Hotspot    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/hotspot',jdata)
        return response
        

    def query_get_a_ps(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get A Ps    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/ap',jdata)
        return response
        

    def query_get_dpsks(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Dpsks    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/dpsk',jdata)
        return response
        

    def query_get_bonjour_fencing_policy(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Bonjour Fencing Policy    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/bonjourFencingPolicy',jdata)
        return response
        

    def query_get_vlan_pooling(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Vlan Pooling    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/vlanPooling',jdata)
        return response
        

    def query_get_application_policy_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Application Policy List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/applicationPolicy',jdata)
        return response
        

    def query_get_ap_usb_software_package(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Query Get Ap Usb Software Package    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/apUsbSoftwarePackage',jdata)
        return response
        

    def query_get_aaa_server_acct(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get Aaa Server Acct    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/services/aaaServer/acct',jdata)
        return response
        

    def query_get_a_ps_on_map(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Query Get A Ps On Map    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/query/apOnMap',jdata)
        return response
        

    def exportcsv_export_ap_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Exportcsv Export Ap List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/exportcsv/ap',jdata)
        return response
        

    def exportcsv_export_historical_clients(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Exportcsv Export Historical Clients    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/exportcsv/historicalclient',jdata)
        return response
        

    def exportcsv_export_alarm_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Exportcsv Export Alarm List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/exportcsv/alarm',jdata)
        return response
        

    def exportcsv_export_audit_log(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Exportcsv Export Audit Log    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/exportcsv/audit',jdata)
        return response
        

    def exportcsv_export_client_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Exportcsv Export Client List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/exportcsv/client',jdata)
        return response
        

    def exportcsv_export_event_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Exportcsv Export Event List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/exportcsv/event',jdata)
        return response
        

    def avc_get_signature_package_info(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get Signature Package Info    
        '''
        
        response = self.session.get('/avc/signaturePackage')
        return response
        

    def avc_get_application_policy_by_id(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get Application Policy By Id    url_id
        '''
        
        response = self.session.get('/avc/applicationPolicy/{id}'.format(id=url_id))
        return response
        

    def avc_get_user_defined_profile_by_id(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get User Defined Profile By Id    url_id
        '''
        
        response = self.session.get('/avc/userDefined/{id}'.format(id=url_id))
        return response
        

    def avc_upload_signature_package(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Upload Signature Package    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/avc/signaturePackage/upload',jdata)
        return response
        

    def avc_get_all_applications(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get All Applications    
        '''
        
        response = self.session.get('/avc/signaturePackage/applications')
        return response
        

    def avc_create_application_policy_by_id(self, applicationRules_applicationType, applicationRules_classificationType, applicationRules_appId, applicationRules_markingPriority, name, applicationRules_markingType, applicationRules_downlink, applicationRules_catName, applicationRules_uplink, applicationRules_priority, applicationRules_ruleType, applicationRules_catId, applicationRules_appName, domainId=None, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the Application Policy Profile
        applicationRules_ruleType (Enum)  : type of the application rule
        applicationRules_catId (String)  : Identifier of the Application Category from Signature Package (If applicationType is UserDefind, the catId is 32768)
        applicationRules_appName (String)  : Name of the Application from Signature Package
        applicationRules_downlink (Integer)  : downlink rate limiting (unit: Kbps)
        applicationRules_markingPriority (Enum)  : QoS uplink marking priority
        applicationRules_priority : ""
        applicationRules_catName (String)  : Name of the Application Category from Signature Package
        applicationRules_applicationType (Enum)  : type of the application when ruleType
        applicationRules_markingType (Enum)  : QoS uplink marking type
        applicationRules_appId (String)  : Identifier of the Application from Signature Package
        applicationRules_uplink (Integer)  : uplink rate limiting (unit: Kbps)
        applicationRules_classificationType (Enum)  : QoS downlink classification type
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the Application Policy Profile
        
        Robot Format :
        Avc Create Application Policy By Id    name    applicationRules_ruleType    applicationRules_catId    applicationRules_appName    applicationRules_downlink    applicationRules_markingPriority    applicationRules_priority    applicationRules_catName    applicationRules_applicationType    applicationRules_markingType    applicationRules_appId    applicationRules_uplink    applicationRules_classificationType
        '''
        
        data={"domainId" : domainId,"applicationRules":[{"ruleType" : applicationRules_ruleType,"catId" : applicationRules_catId,"appName" : applicationRules_appName,"downlink" : applicationRules_downlink,"markingPriority" : applicationRules_markingPriority,"priority" : applicationRules_priority,"catName" : applicationRules_catName,"applicationType" : applicationRules_applicationType,"markingType" : applicationRules_markingType,"appId" : applicationRules_appId,"uplink" : applicationRules_uplink,"classificationType" : applicationRules_classificationType}],"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/avc/applicationPolicy',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def avc_delete_user_defined_profile_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Delete User Defined Profile List    
        '''
        
        response = self.session.delete('/avc/userDefined')
        

    def avc_create_user_defined_profile(self, protocol, type, name, destPort, destIp=None, netmask=None, domainId=None):
        '''
        Mandatory Params :
        name (String)  : Name of the User Defined Profile
        type (Enum)  : Type of the User Defined Profile
        destPort (Integer)  : destPort of User Defined Profile
        protocol (Enum)  : protocol of User Defined Profile
        
        Optional Params  :
        domainId (String)  : Domain Id
        destIp (String)  : Server IP
        netmask (String)  : netmask of User Defined Profile
        
        Robot Format :
        Avc Create User Defined Profile    name    type    destPort    protocol
        '''
        
        data={"domainId" : domainId,"protocol" : protocol,"name" : name,"destIp" : destIp,"netmask" : netmask,"type" : type,"destPort" : destPort}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/avc/userDefined',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def avc_get_app_categories(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get App Categories    
        '''
        
        response = self.session.get('/avc/signaturePackage/categories')
        return response
        

    def avc_delete_user_defined_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Delete User Defined Profile    url_id
        '''
        
        response = self.session.delete('/avc/userDefined/{id}'.format(id=url_id))
        

    def avc_get_applications_by_cat_id(self, url_catId):
        '''
        Mandatory Params :
        url_catId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get Applications By Cat Id    url_catId
        '''
        
        response = self.session.get('/avc/signaturePackage/applications/{catId}'.format(catId=url_catId))
        return response
        

    def avc_update_user_defined_profile(self, url_id, protocol=None, name=None, destIp=None, netmask=None, type=None, destPort=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        protocol (Enum)  : protocol of User Defined Profile
        name (String)  : Name of the User Defined Profile
        destIp (String)  : Server IP
        netmask (String)  : netmask of User Defined Profile
        type (Enum)  : Type of the User Defined Profile
        destPort (Integer)  : destPort of User Defined Profile
        
        Robot Format :
        Avc Update User Defined Profile    url_id
        '''
        
        data={"protocol" : protocol,"name" : name,"destIp" : destIp,"netmask" : netmask,"type" : type,"destPort" : destPort}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/avc/userDefined/{id}'.format(id=url_id),jdata)
        

    def avc_get_all_user_defined_applications(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get All User Defined Applications    
        '''
        
        response = self.session.get('/avc/userDefined/applications')
        return response
        

    def avc_get_cat_id_by_cat_name(self, url_categoryName):
        '''
        Mandatory Params :
        url_categoryName : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get Cat Id By Cat Name    url_categoryName
        '''
        
        response = self.session.get('/avc/signaturePackage/category/{categoryName}'.format(categoryName=url_categoryName))
        return response
        

    def avc_get_cat_id_app_id_by_app_name(self, url_applicationName):
        '''
        Mandatory Params :
        url_applicationName : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Get Cat Id App Id By App Name    url_applicationName
        '''
        
        response = self.session.get('/avc/signaturePackage/application/{applicationName}'.format(applicationName=url_applicationName))
        return response
        

    def avc_delete_application_policy_by_id(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Avc Delete Application Policy By Id    url_id
        '''
        
        response = self.session.delete('/avc/applicationPolicy/{id}'.format(id=url_id))
        

    def avc_update_application_policy(self, url_id, applicationRules_applicationType=None, applicationRules_classificationType=None, applicationRules_appId=None, applicationRules_markingPriority=None, name=None, applicationRules_markingType=None, applicationRules_downlink=None, applicationRules_catName=None, applicationRules_uplink=None, applicationRules_priority=None, applicationRules_ruleType=None, applicationRules_catId=None, applicationRules_appName=None, description=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        applicationRules_ruleType (Enum)  : type of the application rule
        applicationRules_catId (String)  : Identifier of the Application Category from Signature Package (If applicationType is UserDefind, the catId is 32768)
        applicationRules_appName (String)  : Name of the Application from Signature Package
        applicationRules_downlink (Integer)  : downlink rate limiting (unit: Kbps)
        applicationRules_markingPriority (Enum)  : QoS uplink marking priority
        applicationRules_priority : ""
        applicationRules_catName (String)  : Name of the Application Category from Signature Package
        applicationRules_applicationType (Enum)  : type of the application when ruleType
        applicationRules_markingType (Enum)  : QoS uplink marking type
        applicationRules_appId (String)  : Identifier of the Application from Signature Package
        applicationRules_uplink (Integer)  : uplink rate limiting (unit: Kbps)
        applicationRules_classificationType (Enum)  : QoS downlink classification type
        name (String)  : Name of the Application Policy Profile
        description (String)  : Description of the Application Policy Profile
        
        Robot Format :
        Avc Update Application Policy    url_id
        '''
        
        data={"applicationRules":[{"ruleType" : applicationRules_ruleType,"catId" : applicationRules_catId,"appName" : applicationRules_appName,"downlink" : applicationRules_downlink,"markingPriority" : applicationRules_markingPriority,"priority" : applicationRules_priority,"catName" : applicationRules_catName,"applicationType" : applicationRules_applicationType,"markingType" : applicationRules_markingType,"appId" : applicationRules_appId,"uplink" : applicationRules_uplink,"classificationType" : applicationRules_classificationType}],"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/avc/applicationPolicy/{id}'.format(id=url_id),jdata)
        

    def avc_delete_application_policy_list(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Avc Delete Application Policy List    
        '''
        
        response = self.session.delete('/avc/applicationPolicy')
        

    def delete_bulk_trusted_ca_chain_certificate(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Delete Bulk Trusted Ca Chain Certificate    
        '''
        
        response = self.session.delete('/certstore/trustedCAChainCert')
        

    def get_csr(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Csr    url_id
        '''
        
        response = self.session.get('/certstore/csr/{id}'.format(id=url_id))
        return response
        

    def modify_schedule_backup(self, dayOfWeek=None, hour=None, interval=None, enableScheduleBackup=None, dateOfMonth=None, minute=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        dayOfWeek (Enum)  : day of the week
        hour (Integer)  : hour
        interval (Enum)  : schedule interval
        enableScheduleBackup (Boolean)  : enable schedule backup
        dateOfMonth (Integer)  : date of the month
        minute (Integer)  : minute
        
        Robot Format :
        Modify Schedule Backup    
        '''
        
        data={"dayOfWeek" : dayOfWeek,"hour" : hour,"interval" : interval,"enableScheduleBackup" : enableScheduleBackup,"dateOfMonth" : dateOfMonth,"minute" : minute}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/configurationSettings/scheduleBackup',jdata)
        

    def delete_trusted_ca_chain_certificate(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Trusted Ca Chain Certificate    url_id
        '''
        
        response = self.session.delete('/certstore/trustedCAChainCert/{id}'.format(id=url_id))
        

    def create_csr(self, city, name, countryCode, commonName, organizationUnit, state, organization, email, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the certificates signing request
        commonName (String)  : Common name of the certificates signing request
        email (String)  : Email of the certificates signing request
        organizationUnit (String)  : Organization unit of the certificates signing request
        organization (String)  : Organization of the certificates signing request
        city (String)  : City of the certificates signing request
        state (String)  : State of the certificates signing request
        countryCode (String)  : Country code of the certificates signing request
        
        Optional Params  :
        description (String)  : Description of the certificates signing request
        
        Robot Format :
        Create Csr    name    commonName    email    organizationUnit    organization    city    state    countryCode
        '''
        
        data={"city" : city,"name" : name,"countryCode" : countryCode,"commonName" : commonName,"organizationUnit" : organizationUnit,"state" : state,"organization" : organization,"email" : email,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/certstore/csr',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def get_calea_mac_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Calea Mac List    
        '''
        
        response = self.session.get('/system/caleaMacList')
        return response
        

    def get_trusted_ca_chain_certificate(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Trusted Ca Chain Certificate    url_id
        '''
        
        response = self.session.get('/certstore/trustedCAChainCert/{id}'.format(id=url_id))
        return response
        

    def upgrade_patch_info(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upgrade Patch Info    
        '''
        
        response = self.session.get('/upgrade/patch')
        return response
        

    def upload_configuration_backup_file(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upload Configuration Backup File    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/configuration/upload',jdata)
        return response
        

    def upgrade(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upgrade    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/upgrade',jdata)
        return response
        

    def get_inventory(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Inventory    
        '''
        
        response = self.session.get('/system/inventory')
        return response
        

    def get_certificate_setting(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Certificate Setting    
        '''
        
        response = self.session.get('/certstore/setting')
        return response
        

    def get_ap_recovery(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Ap Recovery    
        '''
        
        response = self.session.get('/system/ap_recovery')
        return response
        

    def restart_sz_node(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Restart Sz Node    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/restart',jdata)
        return response
        

    def get_certificates(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Certificates    
        '''
        
        response = self.session.get('/certstore/certificate')
        return response
        

    def delete_cp_user_defined_interface(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Cp User Defined Interface    url_bladeUUID
        '''
        
        response = self.session.delete('/controlPlanes/{bladeUUID}/userDefinedInterface'.format(bladeUUID=url_bladeUUID))
        

    def get_neighbors(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Neighbors    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/mesh/{apMac}/neighbor'.format(apMac=url_apMac),jdata)
        return response
        

    def update_snmp_agent(self, snmpNotificationEnabled, snmpV3Agent_authProtocol=None, snmpV3Agent_notificationTarget_port=None, snmpV2Agent_notificationTarget_address=None, snmpV2Agent_communityName=None, snmpV3Agent_privProtocol=None, snmpV2Agent_readEnabled=None, snmpV3Agent_writeEnabled=None, snmpV2Agent_notificationType=None, snmpV2Agent_notificationEnabled=None, snmpV3Agent_notificationEnabled=None, snmpV3Agent_notificationTarget_address=None, snmpV2Agent_notificationTarget_port=None, snmpV3Agent_userName=None, snmpV3Agent_readEnabled=None, snmpV3Agent_authPassword=None, snmpV3Agent_privPassword=None, snmpV2Agent_writeEnabled=None, snmpV3Agent_notificationType=None):
        '''
        Mandatory Params :
        snmpNotificationEnabled (Boolean)  : Enable SNMP Notifications Globally (If SNMP Notification is disabled globally, no Notification message is sent out.)
        
        Optional Params  :
        snmpV2Agent_notificationType (Enum)  : type of the notification privilege
        snmpV2Agent_writeEnabled (Boolean)  : write privilege of the SNMP Coummunity
        snmpV2Agent_notificationTarget_port (Integer)  : port number of the SNMP Trap
        snmpV2Agent_notificationTarget_address (String)  : address of the SNMP Trap
        snmpV2Agent_communityName (String)  : name of the SNMP Community.
        snmpV2Agent_readEnabled (Boolean)  : read privilege of the SNMP Coummunity
        snmpV2Agent_notificationEnabled (Boolean)  : notification privilege of the SNMP Coummunity
        snmpV3Agent_userName (String)  : name of the SNMP User.
        snmpV3Agent_notificationType (Enum)  : type of the notification privilege
        snmpV3Agent_authProtocol (Enum)  : authProtocol of the SNMP User.
        snmpV3Agent_privProtocol (Enum)  : privProtocol of the SNMP User.
        snmpV3Agent_writeEnabled (Boolean)  : write privilege of the SNMP User
        snmpV3Agent_notificationTarget_port (Integer)  : port number of the SNMP Trap
        snmpV3Agent_notificationTarget_address (String)  : address of the SNMP Trap
        snmpV3Agent_privPassword (String)  : privPassword of the SNMP User.
        snmpV3Agent_readEnabled (Boolean)  : read privilege of the SNMP User
        snmpV3Agent_authPassword (String)  : authPassword of the SNMP User.
        snmpV3Agent_notificationEnabled (Boolean)  : notification privilege of the SNMP User
        
        Robot Format :
        Update Snmp Agent    snmpNotificationEnabled
        '''
        
        data={"snmpV2Agent":[{"notificationType" : snmpV2Agent_notificationType,"writeEnabled" : snmpV2Agent_writeEnabled,"notificationTarget":[{"port" : snmpV2Agent_notificationTarget_port,"address" : snmpV2Agent_notificationTarget_address}],"communityName" : snmpV2Agent_communityName,"readEnabled" : snmpV2Agent_readEnabled,"notificationEnabled" : snmpV2Agent_notificationEnabled}],"snmpNotificationEnabled" : snmpNotificationEnabled,"snmpV3Agent":[{"userName" : snmpV3Agent_userName,"notificationType" : snmpV3Agent_notificationType,"authProtocol" : snmpV3Agent_authProtocol,"privProtocol" : snmpV3Agent_privProtocol,"writeEnabled" : snmpV3Agent_writeEnabled,"notificationTarget":[{"port" : snmpV3Agent_notificationTarget_port,"address" : snmpV3Agent_notificationTarget_address}],"privPassword" : snmpV3Agent_privPassword,"readEnabled" : snmpV3Agent_readEnabled,"authPassword" : snmpV3Agent_authPassword,"notificationEnabled" : snmpV3Agent_notificationEnabled}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/system/snmpAgent',jdata)
        

    def create_certificate(self, data, name, certificasSigningRequest_name=None, description=None, intermediateData=None, privateKeyData=None, passphrase=None, rootData=None, certificasSigningRequest_id=None):
        '''
        Mandatory Params :
        name (String)  : Name of the certificate
        data (String)  : Data of the certificate
        
        Optional Params  :
        description (String)  : Description of the certificate
        intermediateData (String)  : Intermediate data of the certificate
        rootData (String)  : Root data of the certificate
        passphrase (String)  : Key passphrase
        privateKeyData (String)  : Private key data of the certificate
        certificasSigningRequest_id : ""
        certificasSigningRequest_name : ""
        
        Robot Format :
        Create Certificate    name    data
        '''
        
        data={"name" : name,"description" : description,"intermediateData":[ intermediateData],"rootData" : rootData,"passphrase" : passphrase,"privateKeyData" : privateKeyData,"data" : data,"certificasSigningRequest":{"id" : certificasSigningRequest_id,"name" : certificasSigningRequest_name}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/certstore/certificate',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def get_enterprise_control_plane(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Enterprise Control Plane    url_bladeUUID
        '''
        
        response = self.session.get('/enterprise/controlPlanes/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def get_syslog_setting(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Syslog Setting    
        '''
        
        response = self.session.get('/system/syslog')
        return response
        

    def get_known_ap_rogues(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Known Ap Rogues    
        '''
        
        response = self.session.get('/rogue/markKnown')
        return response
        

    def update_control_plane(self, url_bladeUUID, ipv4ManagementInterface_ipMode=None, enableAccessAndCoreSeparation=None, ipv4ClusterInterface_gateway=None, ipv6ManagementInterface_ipMode=None, ipv6ManagementInterface_gateway=None, ipv6AccessAndCoreSeparation_secondaryDNSServer=None, ipv4ControlInterface_ipMode=None, ipv6AccessAndCoreSeparation_primaryDNSServer=None, ipv6ControlInterface_gateway=None, ipv4ManagementInterface_gateway=None, ipv4ControlInterface_natIp=None, ipv4ClusterInterface_ipMode=None, ipv4ControlInterface_subnetMask=None, ipv4ClusterInterface_subnetMask=None, ipv4AccessAndCoreSeparation_primaryDNSServer=None, ipv6ManagementInterface_ipAddress=None, ipv4ControlInterface_gateway=None, ipv4ControlInterface_ipAddress=None, ipv6ControlInterface_ipAddress=None, ipv6AccessAndCoreSeparation_defaultGateway=None, ipv4AccessAndCoreSeparation_defaultGateway=None, ipv4AccessAndCoreSeparation_secondaryDNSServer=None, ipv4ClusterInterface_ipAddress=None, ipv4ManagementInterface_ipAddress=None, ipv4ManagementInterface_subnetMask=None, ipv6ControlInterface_ipMode=None):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        enableAccessAndCoreSeparation (Boolean)  : Enable Access & Core Separation
        ipv6ControlInterface_ipAddress (String)  : IP address
        ipv6ControlInterface_ipMode (Enum)  : IP mode
        ipv6ControlInterface_gateway (String)  : Gateway
        ipv4ControlInterface_subnetMask (String)  : Subnet mask
        ipv4ControlInterface_natIp (String)  : NAT IP
        ipv4ControlInterface_ipMode (Enum)  : IP mode
        ipv4ControlInterface_ipAddress (String)  : IP address
        ipv4ControlInterface_gateway (String)  : Gateway
        ipv4ClusterInterface_ipAddress (String)  : IP address
        ipv4ClusterInterface_ipMode (Enum)  : IP mode
        ipv4ClusterInterface_gateway (String)  : Gateway
        ipv4ClusterInterface_subnetMask (String)  : Subnet mask
        ipv4AccessAndCoreSeparation_primaryDNSServer (String)  : Primary DNS server
        ipv4AccessAndCoreSeparation_secondaryDNSServer (String)  : Secondary DNS server
        ipv4AccessAndCoreSeparation_defaultGateway (Enum)  : Gateway
        ipv4ManagementInterface_ipAddress (String)  : IP address
        ipv4ManagementInterface_ipMode (Enum)  : IP mode
        ipv4ManagementInterface_gateway (String)  : Gateway
        ipv4ManagementInterface_subnetMask (String)  : Subnet mask
        ipv6ManagementInterface_ipAddress (String)  : IP address
        ipv6ManagementInterface_ipMode (Enum)  : IP mode
        ipv6ManagementInterface_gateway (String)  : Gateway
        ipv6AccessAndCoreSeparation_primaryDNSServer (String)  : Primary DNS server
        ipv6AccessAndCoreSeparation_secondaryDNSServer (String)  : Secondary DNS server
        ipv6AccessAndCoreSeparation_defaultGateway (Enum)  : Gateway
        
        Robot Format :
        Update Control Plane    url_bladeUUID
        '''
        
        data={"enableAccessAndCoreSeparation" : enableAccessAndCoreSeparation,"ipv6ControlInterface":{"ipAddress" : ipv6ControlInterface_ipAddress,"ipMode" : ipv6ControlInterface_ipMode,"gateway" : ipv6ControlInterface_gateway},"ipv4ControlInterface":{"subnetMask" : ipv4ControlInterface_subnetMask,"natIp" : ipv4ControlInterface_natIp,"ipMode" : ipv4ControlInterface_ipMode,"ipAddress" : ipv4ControlInterface_ipAddress,"gateway" : ipv4ControlInterface_gateway},"ipv4ClusterInterface":{"ipAddress" : ipv4ClusterInterface_ipAddress,"ipMode" : ipv4ClusterInterface_ipMode,"gateway" : ipv4ClusterInterface_gateway,"subnetMask" : ipv4ClusterInterface_subnetMask},"ipv4AccessAndCoreSeparation":{"primaryDNSServer" : ipv4AccessAndCoreSeparation_primaryDNSServer,"secondaryDNSServer" : ipv4AccessAndCoreSeparation_secondaryDNSServer,"defaultGateway" : ipv4AccessAndCoreSeparation_defaultGateway},"ipv4ManagementInterface":{"ipAddress" : ipv4ManagementInterface_ipAddress,"ipMode" : ipv4ManagementInterface_ipMode,"gateway" : ipv4ManagementInterface_gateway,"subnetMask" : ipv4ManagementInterface_subnetMask},"ipv6ManagementInterface":{"ipAddress" : ipv6ManagementInterface_ipAddress,"ipMode" : ipv6ManagementInterface_ipMode,"gateway" : ipv6ManagementInterface_gateway},"ipv6AccessAndCoreSeparation":{"primaryDNSServer" : ipv6AccessAndCoreSeparation_primaryDNSServer,"secondaryDNSServer" : ipv6AccessAndCoreSeparation_secondaryDNSServer,"defaultGateway" : ipv6AccessAndCoreSeparation_defaultGateway}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/controlPlanes/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def get_downlinks(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Downlinks    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/mesh/{apMac}/downlink'.format(apMac=url_apMac),jdata)
        return response
        

    def create_trusted_ca_chain_certificate(self, rootCertData, name, interCertData=None, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the trusted CA chain certificates
        rootCertData (String)  : Root data of the trusted CA chain certificates
        
        Optional Params  :
        interCertData (String)  : Intermediate data of the trusted CA chain certificates
        description (String)  : Description of the trusted CA chain certificates
        
        Robot Format :
        Create Trusted Ca Chain Certificate    name    rootCertData
        '''
        
        data={"interCertData":[ interCertData],"rootCertData" : rootCertData,"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/certstore/trustedCAChainCert',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def get_cluster_backup_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Cluster Backup List    
        '''
        
        response = self.session.get('/cluster')
        return response
        

    def update_ap_auto_apporve_policy(self, approveEnabled=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        approveEnabled (Boolean)  : enable automatically approve all join requests from APs
        
        Robot Format :
        Update Ap Auto Apporve Policy    
        '''
        
        data={"approveEnabled" : approveEnabled}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/system/apSettings/approval',jdata)
        

    def get_configuration_backup_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Configuration Backup List    
        '''
        
        response = self.session.get('/configuration')
        return response
        

    def get_uplink_history(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Uplink History    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/mesh/{apMac}/uplink/history'.format(apMac=url_apMac),jdata)
        return response
        

    def update_enterprise_data_plane(self, url_bladeUUID, staticRoute_networkAddress=None, primaryInterface_natIp=None, secondaryInterface_vlan=None, primaryInterface_gateway=None, primaryInterface_subnetMask=None, secondaryInterface_ipAddress=None, ipv6PrimaryInterface_secondaryDNSServer=None, primaryInterface_ipMode=None, secondaryInterface_subnetMask=None, ipv6PrimaryInterface_primaryDNSServer=None, primaryInterface_ipAddress=None, staticRoute_gateway=None, staticRoute_subnetMask=None, interfaceMode=None, ipv6PrimaryInterface_ipAddress=None, ipv6PrimaryInterface_gateway=None, primaryInterface_vlan=None, primaryInterface_primaryDNSServer=None, ipv6PrimaryInterface_ipMode=None, primaryInterface_secondaryDNSServer=None):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        interfaceMode (Enum)  : Interface mode
        primaryInterface_primaryDNSServer (String)  : Primary DNS server
        primaryInterface_vlan (String)  : Vlan
        primaryInterface_ipMode (Enum)  : IP mode
        primaryInterface_secondaryDNSServer (String)  : Secondary DNS server
        primaryInterface_natIp (String)  : NAT IP
        primaryInterface_subnetMask (String)  : Subnet mask
        primaryInterface_ipAddress (String)  : IP address
        primaryInterface_gateway (String)  : Gateway
        ipv6PrimaryInterface_ipAddress (String)  : IP address
        ipv6PrimaryInterface_primaryDNSServer (String)  : Primary DNS server
        ipv6PrimaryInterface_ipMode (Enum)  : IP mode
        ipv6PrimaryInterface_gateway (String)  : Gateway
        ipv6PrimaryInterface_secondaryDNSServer (String)  : Secondary DNS server
        staticRoute_subnetMask (String)  : Subnet mask
        staticRoute_networkAddress (String)  : Network address
        staticRoute_gateway (String)  : Gateway
        secondaryInterface_subnetMask (String)  : Subnet mask
        secondaryInterface_vlan (String)  : vlan
        secondaryInterface_ipAddress (String)  : IP address
        
        Robot Format :
        Update Enterprise Data Plane    url_bladeUUID
        '''
        
        data={"interfaceMode" : interfaceMode,"primaryInterface":{"primaryDNSServer" : primaryInterface_primaryDNSServer,"vlan" : primaryInterface_vlan,"ipMode" : primaryInterface_ipMode,"secondaryDNSServer" : primaryInterface_secondaryDNSServer,"natIp" : primaryInterface_natIp,"subnetMask" : primaryInterface_subnetMask,"ipAddress" : primaryInterface_ipAddress,"gateway" : primaryInterface_gateway},"ipv6PrimaryInterface":{"ipAddress" : ipv6PrimaryInterface_ipAddress,"primaryDNSServer" : ipv6PrimaryInterface_primaryDNSServer,"ipMode" : ipv6PrimaryInterface_ipMode,"gateway" : ipv6PrimaryInterface_gateway,"secondaryDNSServer" : ipv6PrimaryInterface_secondaryDNSServer},"staticRoute":[{"subnetMask" : staticRoute_subnetMask,"networkAddress" : staticRoute_networkAddress,"gateway" : staticRoute_gateway}],"secondaryInterface":{"subnetMask" : secondaryInterface_subnetMask,"vlan" : secondaryInterface_vlan,"ipAddress" : secondaryInterface_ipAddress}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/enterprise/planes/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def update_syslog_setting(self, auditLogSeverity=None, forwardUEEventsMsgFormatType=None, otherLogSeverity=None, primaryServer_host=None, secondaryServer_port=None, secondaryServer_host=None, appLogSeverity=None, enabled=None, eventLogFacility=None, primaryServer_port=None, appLogFacility=None, priority_minor=None, priority_warning=None, auditLogFacility=None, priority_debug=None, priority_major=None, priority_critical=None, secondaryServer_redundancyMode=None, priority_informational=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        auditLogSeverity (String)  : auditLogSeverity: Emerg, Alert, Crit, Error, Warning, Notice, Info, Debug
        forwardUEEventsMsgFormatType (String)  : forwardUEEventsMsgFormatType : COMMON, ZD
        otherLogSeverity (String)  : otherLogSeverity: Emerg, Alert, Crit, Error, Warning, Notice, Info, Debug
        appLogSeverity (String)  : appLogSeverity: Emerg, Alert, Crit, Error, Warning, Notice, Info, Debug
        enabled (Boolean)  : enable logging to remote syslog server
        eventLogFacility (String)  : Facility for Event
        primaryServer_host (String)  : address of the syslog server.
        primaryServer_port (Integer)  : port number of the syslog server
        priority_major (Enum)  : Event severity
        priority_warning (Enum)  : Event severity
        priority_critical (Enum)  : Event severity
        priority_debug (Enum)  : Event severity
        priority_informational (Enum)  : Event severity
        priority_minor (Enum)  : Event severity
        auditLogFacility (String)  : auditLogFacility: Local0-Local7
        secondaryServer_host (String)  : address of the syslog server.
        secondaryServer_redundancyMode (Enum)  : The redundancy mode of syslog server
        secondaryServer_port (Integer)  : port number of the syslog server
        appLogFacility (String)  : appLogFacility: Local0-Local7
        
        Robot Format :
        Update Syslog Setting    
        '''
        
        data={"auditLogSeverity" : auditLogSeverity,"forwardUEEventsMsgFormatType" : forwardUEEventsMsgFormatType,"otherLogSeverity" : otherLogSeverity,"appLogSeverity" : appLogSeverity,"enabled" : enabled,"eventLogFacility" : eventLogFacility,"primaryServer":{"host" : primaryServer_host,"port" : primaryServer_port},"priority":{"major" : priority_major,"warning" : priority_warning,"critical" : priority_critical,"debug" : priority_debug,"informational" : priority_informational,"minor" : priority_minor},"auditLogFacility" : auditLogFacility,"secondaryServer":{"host" : secondaryServer_host,"redundancyMode" : secondaryServer_redundancyMode,"port" : secondaryServer_port},"appLogFacility" : appLogFacility}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/system/syslog',jdata)
        

    def get_up_link(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Up Link    url_apMac
        '''
        
        response = self.session.get('/mesh/{apMac}/uplink'.format(apMac=url_apMac))
        return response
        

    def update_certificate_setting_setting(self, serviceCertificates_certificate_id=None, serviceCertificates_service=None, serviceCertificates_certificate_name=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        serviceCertificates_certificate_id : ""
        serviceCertificates_certificate_name : ""
        serviceCertificates_service (Enum)  : the service
        
        Robot Format :
        Update Certificate Setting Setting    
        '''
        
        data={"serviceCertificates":[{"certificate":{"id" : serviceCertificates_certificate_id,"name" : serviceCertificates_certificate_name},"service" : serviceCertificates_service}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/certstore/setting',jdata)
        

    def download_logs(self, url_bladeUUID, url_appName):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        url_appName : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Download Logs    url_bladeUUID    url_appName
        '''
        
        response = self.session.get('/applications/download/{bladeUUID}?appName={appName}'.format(bladeUUID=url_bladeUUID,appName=url_appName))
        return response
        

    def es_query_avc(self, _aggregate=None, _search=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        _aggregate (String)  : The criteria of aggregate for ES
        _search (String)  : The criteria of search for ES
        
        Robot Format :
        Es Query Avc    
        '''
        
        data={"_aggregate" : _aggregate,"_search" : _search}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/es-query/avc',jdata)
        return response
        

    def upload_calea_mac_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upload Calea Mac List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/system/caleaMacList',jdata)
        return response
        

    def modify_trusted_ca_chain_certificate(self, url_id, information=None, rootCertData=None, interCertData=None, description=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        information (String)  : Information of the certificates
        rootCertData (String)  : Root data of the trusted CA chain certificates
        description (String)  : Description of the trusted CA chain certificates
        name (String)  : Name of the trusted CA chain certificates
        interCertData (String)  : Intermediate data of the trusted CA chain certificates
        
        Robot Format :
        Modify Trusted Ca Chain Certificate    url_id
        '''
        
        data={"information" : information,"rootCertData" : rootCertData,"description" : description,"name" : name,"interCertData":[ interCertData]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/certstore/trustedCAChainCert/{id}'.format(id=url_id),jdata)
        

    def get_data_plane(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Data Plane    url_bladeUUID
        '''
        
        response = self.session.get('/planes/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def delete_certificate(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Certificate    url_id
        '''
        
        response = self.session.delete('/certstore/certificate/{id}'.format(id=url_id))
        

    def modify_auto_export_backup(self, enableAutoExportBackup=None, ftpServer=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        enableAutoExportBackup (Boolean)  : enable auto export backup
        ftpServer (String)  : ftp server name
        
        Robot Format :
        Modify Auto Export Backup    
        '''
        
        data={"enableAutoExportBackup" : enableAutoExportBackup,"ftpServer" : ftpServer}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/configurationSettings/autoExportBackup',jdata)
        

    def download(self, url_backupUUID):
        '''
        Mandatory Params :
        url_backupUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Download    url_backupUUID
        '''
        
        response = self.session.get('/configuration/download?backupUUID={backupUUID}'.format(backupUUID=url_backupUUID))
        return response
        

    def get_application_by_blade_id(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Application By Blade Id    url_bladeUUID
        '''
        
        response = self.session.get('/applications/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def delete_cluster_backup(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Cluster Backup    
        '''
        
        response = self.session.delete('/cluster/{id:.+}')
        

    def create_cluster_backup(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Create Cluster Backup    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/cluster/backup',jdata)
        return response
        

    def es_query_ue(self, _aggregate=None, _search=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        _aggregate (String)  : The criteria of aggregate for ES
        _search (String)  : The criteria of search for ES
        
        Robot Format :
        Es Query Ue    
        '''
        
        data={"_aggregate" : _aggregate,"_search" : _search}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/es-query/ue',jdata)
        return response
        

    def update_data_plane(self, url_bladeUUID, staticRoute_networkAddress=None, primaryInterface_natIp=None, secondaryInterface_vlan=None, primaryInterface_gateway=None, primaryInterface_subnetMask=None, secondaryInterface_ipAddress=None, ipv6PrimaryInterface_secondaryDNSServer=None, primaryInterface_ipMode=None, secondaryInterface_subnetMask=None, ipv6PrimaryInterface_primaryDNSServer=None, primaryInterface_ipAddress=None, staticRoute_gateway=None, staticRoute_subnetMask=None, interfaceMode=None, ipv6PrimaryInterface_ipAddress=None, ipv6PrimaryInterface_gateway=None, primaryInterface_vlan=None, primaryInterface_primaryDNSServer=None, ipv6PrimaryInterface_ipMode=None, primaryInterface_secondaryDNSServer=None):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        interfaceMode (Enum)  : Interface mode
        primaryInterface_primaryDNSServer (String)  : Primary DNS server
        primaryInterface_vlan (String)  : Vlan
        primaryInterface_ipMode (Enum)  : IP mode
        primaryInterface_secondaryDNSServer (String)  : Secondary DNS server
        primaryInterface_natIp (String)  : NAT IP
        primaryInterface_subnetMask (String)  : Subnet mask
        primaryInterface_ipAddress (String)  : IP address
        primaryInterface_gateway (String)  : Gateway
        ipv6PrimaryInterface_ipAddress (String)  : IP address
        ipv6PrimaryInterface_primaryDNSServer (String)  : Primary DNS server
        ipv6PrimaryInterface_ipMode (Enum)  : IP mode
        ipv6PrimaryInterface_gateway (String)  : Gateway
        ipv6PrimaryInterface_secondaryDNSServer (String)  : Secondary DNS server
        staticRoute_subnetMask (String)  : Subnet mask
        staticRoute_networkAddress (String)  : Network address
        staticRoute_gateway (String)  : Gateway
        secondaryInterface_subnetMask (String)  : Subnet mask
        secondaryInterface_vlan (String)  : vlan
        secondaryInterface_ipAddress (String)  : IP address
        
        Robot Format :
        Update Data Plane    url_bladeUUID
        '''
        
        data={"interfaceMode" : interfaceMode,"primaryInterface":{"primaryDNSServer" : primaryInterface_primaryDNSServer,"vlan" : primaryInterface_vlan,"ipMode" : primaryInterface_ipMode,"secondaryDNSServer" : primaryInterface_secondaryDNSServer,"natIp" : primaryInterface_natIp,"subnetMask" : primaryInterface_subnetMask,"ipAddress" : primaryInterface_ipAddress,"gateway" : primaryInterface_gateway},"ipv6PrimaryInterface":{"ipAddress" : ipv6PrimaryInterface_ipAddress,"primaryDNSServer" : ipv6PrimaryInterface_primaryDNSServer,"ipMode" : ipv6PrimaryInterface_ipMode,"gateway" : ipv6PrimaryInterface_gateway,"secondaryDNSServer" : ipv6PrimaryInterface_secondaryDNSServer},"staticRoute":[{"subnetMask" : staticRoute_subnetMask,"networkAddress" : staticRoute_networkAddress,"gateway" : staticRoute_gateway}],"secondaryInterface":{"subnetMask" : secondaryInterface_subnetMask,"vlan" : secondaryInterface_vlan,"ipAddress" : secondaryInterface_ipAddress}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/planes/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def upgrade_status(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upgrade Status    
        '''
        
        response = self.session.get('/upgrade/status')
        return response
        

    def execute_balance(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Execute Balance    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/system/ap_balance',jdata)
        return response
        

    def update_lwapp2scg_lwapp2scg(self, policy=None, pasvMinPort=None, natIpTranslation=None, pasvMaxPort=None, apList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        policy (Enum)  : policy of the lwapp
        pasvMinPort (Integer)  : pasvMinPort of the lwapp
        natIpTranslation (Boolean)  : natIpTranslation of the lwapp
        pasvMaxPort (Integer)  : pasvMaxPort of the lwapp
        apList (String)  : accessPoint List  of the lwapp
        
        Robot Format :
        Update Lwapp2Scg Lwapp2Scg    
        '''
        
        data={"policy" : policy,"pasvMinPort" : pasvMinPort,"natIpTranslation" : natIpTranslation,"pasvMaxPort" : pasvMaxPort,"apList":[ apList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/lwapp2scg',jdata)
        

    def get_ap_rogues(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Ap Rogues    
        '''
        
        response = self.session.get('/rogueaps')
        return response
        

    def update_certificate_setting(self, serviceCertificates_certificate_id=None, serviceCertificates_service=None, serviceCertificates_certificate_name=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        serviceCertificates_certificate_id : ""
        serviceCertificates_certificate_name : ""
        serviceCertificates_service (Enum)  : the service
        
        Robot Format :
        Update Certificate Setting    
        '''
        
        data={"serviceCertificates":[{"certificate":{"id" : serviceCertificates_certificate_id,"name" : serviceCertificates_certificate_name},"service" : serviceCertificates_service}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/certstore/setting',jdata)
        

    def modify_log_level(self, applicationName=None, logLevel=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        applicationName (String)  : Application name.
        logLevel (Enum)  : Log level.
        
        Robot Format :
        Modify Log Level    
        '''
        
        data={"applicationName" : applicationName,"logLevel" : logLevel}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/applications',jdata)
        

    def get_user_defined_interface(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get User Defined Interface    url_bladeUUID
        '''
        
        response = self.session.get('/controlPlanes/{bladeUUID}/userDefinedInterface'.format(bladeUUID=url_bladeUUID))
        return response
        

    def get_snmp_agent(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Snmp Agent    
        '''
        
        response = self.session.get('/system/snmpAgent')
        return response
        

    def delete_calea_mac_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Calea Mac List    
        '''
        
        response = self.session.delete('/system/caleaMacList')
        

    def get_trusted_ca_chain_certificates(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Trusted Ca Chain Certificates    
        '''
        
        response = self.session.get('/certstore/trustedCAChainCert')
        return response
        

    def get_lwapp2scg(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Lwapp2Scg    
        '''
        
        response = self.session.get('/lwapp2scg')
        return response
        

    def shutdown_sz_node(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Shutdown Sz Node    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/shutdown',jdata)
        return response
        

    def download_snapshot_log(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Download Snapshot Log    url_bladeUUID
        '''
        
        response = self.session.get('/applications/downloadsnap/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def restore_configuration_backup(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Restore Configuration Backup    url_id
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/configuration/restore/{id}'.format(id=url_id),jdata)
        return response
        

    def get_downlink_mesh_nodes(self, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Downlink Mesh Nodes    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/mesh/{apMac}/topology'.format(apMac=url_apMac),jdata)
        return response
        

    def get_certificate(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Certificate    url_id
        '''
        
        response = self.session.get('/certstore/certificate/{id}'.format(id=url_id))
        return response
        

    def get_nbi_settings(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Nbi Settings    
        '''
        
        response = self.session.get('/system/nbi')
        return response
        

    def update_enterprise_user_defined_interface(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Update Enterprise User Defined Interface    url_bladeUUID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/enterprise/planes/{bladeUUID}/userDefinedInterface'.format(bladeUUID=url_bladeUUID),jdata)
        

    def update_enterprise_static_route(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Update Enterprise Static Route    url_bladeUUID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/enterprise/planes/{bladeUUID}/staticRoute'.format(bladeUUID=url_bladeUUID),jdata)
        

    def get_enterprise_controller_statistics(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Enterprise Controller Statistics    url_id
        '''
        
        response = self.session.get('/controller/{id}/statistics'.format(id=url_id))
        return response
        

    def disable_nbi_settings(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Disable Nbi Settings    
        '''
        
        response = self.session.delete('/system/nbi')
        

    def get_ap_models(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Ap Models    
        '''
        
        response = self.session.get('/system/apmodels')
        return response
        

    def update_rogue_to_none(self, rogueMacList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        rogueMacList (String)  : rogue mac list
        
        Robot Format :
        Update Rogue To None    
        '''
        
        data={"rogueMacList":[ rogueMacList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rogue/unMark',jdata)
        return response
        

    def es_query_alarm(self, _aggregate=None, _search=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        _aggregate (String)  : The criteria of aggregate for ES
        _search (String)  : The criteria of search for ES
        
        Robot Format :
        Es Query Alarm    
        '''
        
        data={"_aggregate" : _aggregate,"_search" : _search}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/es-query/alarm',jdata)
        return response
        

    def update_ap_recovery(self, rsm=None, enabled=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        rsm (String)  : RSM key
        enabled (Boolean)  : enable AP recovery mode
        
        Robot Format :
        Update Ap Recovery    
        '''
        
        data={"rsm" : rsm,"enabled" : enabled}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/system/ap_recovery',jdata)
        return response
        

    def es_query_event(self, _aggregate=None, _search=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        _aggregate (String)  : The criteria of aggregate for ES
        _search (String)  : The criteria of search for ES
        
        Robot Format :
        Es Query Event    
        '''
        
        data={"_aggregate" : _aggregate,"_search" : _search}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/es-query/event',jdata)
        return response
        

    def restore_cluster_by_id(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Restore Cluster By Id    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/cluster/restore/{id:.+}',jdata)
        return response
        

    def get_enterprise_data_plane_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Enterprise Data Plane List    
        '''
        
        response = self.session.get('/enterprise/planes')
        return response
        

    def update_cp_user_defined_interface(self, url_bladeUUID, userDefinedInterface_name=None, userDefinedInterface_subnetMask=None, userDefinedInterface_service=None, userDefinedInterface_gateway=None, userDefinedInterface_ipAddress=None, userDefinedInterface_physicalInterface=None, userDefinedInterface_vlan=None):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        userDefinedInterface_physicalInterface (Enum)  : Physical interface
        userDefinedInterface_name (String)  : Name
        userDefinedInterface_service (Enum)  : Service
        userDefinedInterface_vlan (String)  : Vlan
        userDefinedInterface_subnetMask (String)  : Subnet Mask
        userDefinedInterface_ipAddress (String)  : IP Address
        userDefinedInterface_gateway (String)  : Gateway
        
        Robot Format :
        Update Cp User Defined Interface    url_bladeUUID
        '''
        
        data={"userDefinedInterface":[{"physicalInterface" : userDefinedInterface_physicalInterface,"name" : userDefinedInterface_name,"service" : userDefinedInterface_service,"vlan" : userDefinedInterface_vlan,"subnetMask" : userDefinedInterface_subnetMask,"ipAddress" : userDefinedInterface_ipAddress,"gateway" : userDefinedInterface_gateway}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/controlPlanes/{bladeUUID}/userDefinedInterface'.format(bladeUUID=url_bladeUUID),jdata)
        

    def create_configuration_backup(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Create Configuration Backup    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/configuration/backup',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def get_number_of_mesh_ap_by_domain(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Number Of Mesh Ap By Domain    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/mesh/count/byDomain',jdata)
        return response
        

    def disable_attribute(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Disable Attribute    url_bladeUUID
        '''
        
        response = self.session.delete('/planes/{bladeUUID}/staticRoute'.format(bladeUUID=url_bladeUUID))
        

    def get_carrier_controller_statistics(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Carrier Controller Statistics    url_id
        '''
        
        response = self.session.get('/controller/{id}/statistics'.format(id=url_id))
        return response
        

    def upload_calea_common_setting(self, dc_ip=None, caleaServerIp=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        dc_ip (String)  : DP IP in Data Center
        caleaServerIp (String)  : CARLEA Server IP
        
        Robot Format :
        Upload Calea Common Setting    
        '''
        
        data={"dc_ip" : dc_ip,"caleaServerIp" : caleaServerIp}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/system/caleaCommonSetting',jdata)
        return response
        

    def update_rogue_to_known(self, rogueMacList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        rogueMacList (String)  : rogue mac list
        
        Robot Format :
        Update Rogue To Known    
        '''
        
        data={"rogueMacList":[ rogueMacList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rogue/markKnown',jdata)
        return response
        

    def update_nbi_settings(self, userName=None, password=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        userName (String)  : User name of the Northbound Interface
        password (String)  : Password of the Northbound Interface
        
        Robot Format :
        Update Nbi Settings    
        '''
        
        data={"userName" : userName,"password" : password}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/system/nbi',jdata)
        

    def get_calea_common_setting(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Calea Common Setting    
        '''
        
        response = self.session.get('/system/caleaCommonSetting')
        return response
        

    def update_enterprise_control_plane(self, url_bladeUUID, ipv4ManagementInterface_ipMode=None, enableAccessAndCoreSeparation=None, ipv4ClusterInterface_gateway=None, ipv6ManagementInterface_ipMode=None, ipv6ManagementInterface_gateway=None, ipv6AccessAndCoreSeparation_secondaryDNSServer=None, ipv4ControlInterface_ipMode=None, ipv6AccessAndCoreSeparation_primaryDNSServer=None, ipv6ControlInterface_gateway=None, ipv4ManagementInterface_gateway=None, ipv4ControlInterface_natIp=None, ipv4ClusterInterface_ipMode=None, ipv4ControlInterface_subnetMask=None, ipv4ClusterInterface_subnetMask=None, ipv4AccessAndCoreSeparation_primaryDNSServer=None, ipv6ManagementInterface_ipAddress=None, ipv4ControlInterface_gateway=None, ipv4ControlInterface_ipAddress=None, ipv6ControlInterface_ipAddress=None, ipv6AccessAndCoreSeparation_defaultGateway=None, ipv4AccessAndCoreSeparation_defaultGateway=None, ipv4AccessAndCoreSeparation_secondaryDNSServer=None, ipv4ClusterInterface_ipAddress=None, ipv4ManagementInterface_ipAddress=None, ipv4ManagementInterface_subnetMask=None, ipv6ControlInterface_ipMode=None):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        enableAccessAndCoreSeparation (Boolean)  : Enable Access & Core Separation
        ipv6ControlInterface_ipAddress (String)  : IP address
        ipv6ControlInterface_ipMode (Enum)  : IP mode
        ipv6ControlInterface_gateway (String)  : Gateway
        ipv4ControlInterface_subnetMask (String)  : Subnet mask
        ipv4ControlInterface_natIp (String)  : NAT IP
        ipv4ControlInterface_ipMode (Enum)  : IP mode
        ipv4ControlInterface_ipAddress (String)  : IP address
        ipv4ControlInterface_gateway (String)  : Gateway
        ipv4ClusterInterface_ipAddress (String)  : IP address
        ipv4ClusterInterface_ipMode (Enum)  : IP mode
        ipv4ClusterInterface_gateway (String)  : Gateway
        ipv4ClusterInterface_subnetMask (String)  : Subnet mask
        ipv4AccessAndCoreSeparation_primaryDNSServer (String)  : Primary DNS server
        ipv4AccessAndCoreSeparation_secondaryDNSServer (String)  : Secondary DNS server
        ipv4AccessAndCoreSeparation_defaultGateway (Enum)  : Gateway
        ipv4ManagementInterface_ipAddress (String)  : IP address
        ipv4ManagementInterface_ipMode (Enum)  : IP mode
        ipv4ManagementInterface_gateway (String)  : Gateway
        ipv4ManagementInterface_subnetMask (String)  : Subnet mask
        ipv6ManagementInterface_ipAddress (String)  : IP address
        ipv6ManagementInterface_ipMode (Enum)  : IP mode
        ipv6ManagementInterface_gateway (String)  : Gateway
        ipv6AccessAndCoreSeparation_primaryDNSServer (String)  : Primary DNS server
        ipv6AccessAndCoreSeparation_secondaryDNSServer (String)  : Secondary DNS server
        ipv6AccessAndCoreSeparation_defaultGateway (Enum)  : Gateway
        
        Robot Format :
        Update Enterprise Control Plane    url_bladeUUID
        '''
        
        data={"enableAccessAndCoreSeparation" : enableAccessAndCoreSeparation,"ipv6ControlInterface":{"ipAddress" : ipv6ControlInterface_ipAddress,"ipMode" : ipv6ControlInterface_ipMode,"gateway" : ipv6ControlInterface_gateway},"ipv4ControlInterface":{"subnetMask" : ipv4ControlInterface_subnetMask,"natIp" : ipv4ControlInterface_natIp,"ipMode" : ipv4ControlInterface_ipMode,"ipAddress" : ipv4ControlInterface_ipAddress,"gateway" : ipv4ControlInterface_gateway},"ipv4ClusterInterface":{"ipAddress" : ipv4ClusterInterface_ipAddress,"ipMode" : ipv4ClusterInterface_ipMode,"gateway" : ipv4ClusterInterface_gateway,"subnetMask" : ipv4ClusterInterface_subnetMask},"ipv4AccessAndCoreSeparation":{"primaryDNSServer" : ipv4AccessAndCoreSeparation_primaryDNSServer,"secondaryDNSServer" : ipv4AccessAndCoreSeparation_secondaryDNSServer,"defaultGateway" : ipv4AccessAndCoreSeparation_defaultGateway},"ipv4ManagementInterface":{"ipAddress" : ipv4ManagementInterface_ipAddress,"ipMode" : ipv4ManagementInterface_ipMode,"gateway" : ipv4ManagementInterface_gateway,"subnetMask" : ipv4ManagementInterface_subnetMask},"ipv6ManagementInterface":{"ipAddress" : ipv6ManagementInterface_ipAddress,"ipMode" : ipv6ManagementInterface_ipMode,"gateway" : ipv6ManagementInterface_gateway},"ipv6AccessAndCoreSeparation":{"primaryDNSServer" : ipv6AccessAndCoreSeparation_primaryDNSServer,"secondaryDNSServer" : ipv6AccessAndCoreSeparation_secondaryDNSServer,"defaultGateway" : ipv6AccessAndCoreSeparation_defaultGateway}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/enterprise/controlPlanes/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def delete_csr(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Csr    url_id
        '''
        
        response = self.session.delete('/certstore/csr/{id}'.format(id=url_id))
        

    def get_control_plane(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Control Plane    url_bladeUUID
        '''
        
        response = self.session.get('/controlPlanes/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def get_cp_static_route(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Cp Static Route    url_bladeUUID
        '''
        
        response = self.session.get('/controlPlanes/{bladeUUID}/staticRoutes'.format(bladeUUID=url_bladeUUID))
        return response
        

    def get_cs_rs(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Cs Rs    
        '''
        
        response = self.session.get('/certstore/csr')
        return response
        

    def test_authentication_server(self, userName, aaaServer_id, password, aaaServer_name, aaaType=None, serverType=None, authProtocol=None):
        '''
        Mandatory Params :
        aaaServer_id : ""
        aaaServer_name : ""
        userName (String)  : User name
        password (String)  : Password
        
        Optional Params  :
        serverType (Enum)  : Radius server type.
        authProtocol (Enum)  : Authentication protocol
        aaaType (Enum)  : Authentication/Accounting service protocol. RADIUS for Radius, AD and LDAP. RADIUSAcct for RADIUS Accounting
        
        Robot Format :
        Test Authentication Server    aaaServer_id    aaaServer_name    userName    password
        '''
        
        data={"userName" : userName,"serverType" : serverType,"authProtocol" : authProtocol,"aaaServer":{"id" : aaaServer_id,"name" : aaaServer_name},"aaaType" : aaaType,"password" : password}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/system/aaa/test',jdata)
        return response
        

    def get_carrier_controller(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Carrier Controller    
        '''
        
        response = self.session.get('/controller')
        return response
        

    def get_control_plane_list_deprecated(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Control Plane List Deprecated    
        '''
        
        response = self.session.get('/applications/controlplane')
        return response
        

    def get_control_plane_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Control Plane List    
        '''
        
        response = self.session.get('/controlPlanes')
        return response
        

    def upgrade_upload(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upgrade Upload    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/upgrade/upload',jdata)
        return response
        

    def get_auto_export_backup(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Auto Export Backup    
        '''
        
        response = self.session.get('/configurationSettings/autoExportBackup')
        return response
        

    def es_query_ap(self, _aggregate=None, _search=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        _aggregate (String)  : The criteria of aggregate for ES
        _search (String)  : The criteria of search for ES
        
        Robot Format :
        Es Query Ap    
        '''
        
        data={"_aggregate" : _aggregate,"_search" : _search}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/es-query/ap',jdata)
        return response
        

    def get_number_of_mesh_ap_by_zone(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Number Of Mesh Ap By Zone    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/mesh/count/byZone',jdata)
        return response
        

    def get_enterprise_data_plane(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Get Enterprise Data Plane    url_bladeUUID
        '''
        
        response = self.session.get('/enterprise/planes/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def upgrade_history(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upgrade History    
        '''
        
        response = self.session.get('/upgrade/history')
        return response
        

    def delete_configuration_backup(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Configuration Backup    url_id
        '''
        
        response = self.session.delete('/configuration/{id}'.format(id=url_id))
        

    def get_schedule_backup(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Schedule Backup    
        '''
        
        response = self.session.get('/configurationSettings/scheduleBackup')
        return response
        

    def update_ip_mode(self, ipMode):
        '''
        Mandatory Params :
        ipMode (Enum)  : IP support version
        
        Optional Params  :
        None
        
        Robot Format :
        Update Ip Mode    ipMode
        '''
        
        data={"ipMode" : ipMode}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/controlPlanes/ipSupport',jdata)
        

    def update_cp_static_route(self, url_bladeUUID, staticRoutes_interfaceMode=None, staticRoutes_subnetMask=None, staticRoutes_metric=None, staticRoutes_networkAddress=None, staticRoutes_gateway=None):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        staticRoutes_subnetMask (String)  : Subnet Mask
        staticRoutes_metric (Integer)  : Metric
        staticRoutes_networkAddress (String)  : Network Address
        staticRoutes_gateway (String)  : Gateway
        staticRoutes_interfaceMode (String)  : Interface Mode
        
        Robot Format :
        Update Cp Static Route    url_bladeUUID
        '''
        
        data={"staticRoutes":[{"subnetMask" : staticRoutes_subnetMask,"metric" : staticRoutes_metric,"networkAddress" : staticRoutes_networkAddress,"gateway" : staticRoutes_gateway,"interfaceMode" : staticRoutes_interfaceMode}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/controlPlanes/{bladeUUID}/staticRoutes'.format(bladeUUID=url_bladeUUID),jdata)
        

    def get_root_mesh_nodes(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Get Root Mesh Nodes    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/mesh/topology',jdata)
        return response
        

    def upgrade_new_ux_status(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upgrade New Ux Status    
        '''
        
        response = self.session.get('/upgrade/progress')
        return response
        

    def delete_calea_mac(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Calea Mac    
        '''
        
        response = self.session.delete('/system/caleaMac')
        

    def get_enterprise_control_plane_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Enterprise Control Plane List    
        '''
        
        response = self.session.get('/enterprise/controlPlanes')
        return response
        

    def upload_calea_mac(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Upload Calea Mac    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/system/caleaMac',jdata)
        return response
        

    def get_enterprise_controller(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Enterprise Controller    
        '''
        
        response = self.session.get('/controller')
        return response
        

    def update_lwapp2scg(self, policy=None, pasvMinPort=None, natIpTranslation=None, pasvMaxPort=None, apList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        policy (Enum)  : policy of the lwapp
        pasvMinPort (Integer)  : pasvMinPort of the lwapp
        natIpTranslation (Boolean)  : natIpTranslation of the lwapp
        pasvMaxPort (Integer)  : pasvMaxPort of the lwapp
        apList (String)  : accessPoint List  of the lwapp
        
        Robot Format :
        Update Lwapp2Scg    
        '''
        
        data={"policy" : policy,"pasvMinPort" : pasvMinPort,"natIpTranslation" : natIpTranslation,"pasvMaxPort" : pasvMaxPort,"apList":[ apList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/lwapp2scg',jdata)
        

    def update_syslog_setting_syslog(self, auditLogSeverity=None, forwardUEEventsMsgFormatType=None, otherLogSeverity=None, primaryServer_host=None, secondaryServer_port=None, secondaryServer_host=None, appLogSeverity=None, enabled=None, eventLogFacility=None, primaryServer_port=None, appLogFacility=None, priority_minor=None, priority_warning=None, auditLogFacility=None, priority_debug=None, priority_major=None, priority_critical=None, secondaryServer_redundancyMode=None, priority_informational=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        auditLogSeverity (String)  : auditLogSeverity: Emerg, Alert, Crit, Error, Warning, Notice, Info, Debug
        forwardUEEventsMsgFormatType (String)  : forwardUEEventsMsgFormatType : COMMON, ZD
        otherLogSeverity (String)  : otherLogSeverity: Emerg, Alert, Crit, Error, Warning, Notice, Info, Debug
        appLogSeverity (String)  : appLogSeverity: Emerg, Alert, Crit, Error, Warning, Notice, Info, Debug
        enabled (Boolean)  : enable logging to remote syslog server
        eventLogFacility (String)  : Facility for Event
        primaryServer_host (String)  : address of the syslog server.
        primaryServer_port (Integer)  : port number of the syslog server
        priority_major (Enum)  : Event severity
        priority_warning (Enum)  : Event severity
        priority_critical (Enum)  : Event severity
        priority_debug (Enum)  : Event severity
        priority_informational (Enum)  : Event severity
        priority_minor (Enum)  : Event severity
        auditLogFacility (String)  : auditLogFacility: Local0-Local7
        secondaryServer_host (String)  : address of the syslog server.
        secondaryServer_redundancyMode (Enum)  : The redundancy mode of syslog server
        secondaryServer_port (Integer)  : port number of the syslog server
        appLogFacility (String)  : appLogFacility: Local0-Local7
        
        Robot Format :
        Update Syslog Setting Syslog    
        '''
        
        data={"auditLogSeverity" : auditLogSeverity,"forwardUEEventsMsgFormatType" : forwardUEEventsMsgFormatType,"otherLogSeverity" : otherLogSeverity,"appLogSeverity" : appLogSeverity,"enabled" : enabled,"eventLogFacility" : eventLogFacility,"primaryServer":{"host" : primaryServer_host,"port" : primaryServer_port},"priority":{"major" : priority_major,"warning" : priority_warning,"critical" : priority_critical,"debug" : priority_debug,"informational" : priority_informational,"minor" : priority_minor},"auditLogFacility" : auditLogFacility,"secondaryServer":{"host" : secondaryServer_host,"redundancyMode" : secondaryServer_redundancyMode,"port" : secondaryServer_port},"appLogFacility" : appLogFacility}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/system/syslog',jdata)
        

    def delete_cp_static_route(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Delete Cp Static Route    url_bladeUUID
        '''
        
        response = self.session.delete('/controlPlanes/{bladeUUID}/staticRoutes'.format(bladeUUID=url_bladeUUID))
        

    def get_ap_auto_apporve_policy(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Ap Auto Apporve Policy    
        '''
        
        response = self.session.get('/system/apSettings/approval')
        return response
        

    def get_data_plane_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Get Data Plane List    
        '''
        
        response = self.session.get('/planes')
        return response
        

    def group_update_ap_health_config(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Group Update Ap Health Config    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/group/tree/apHealthStatusConfig',jdata)
        

    def group_get_ap_for_ccd(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Ap For Ccd    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/group/troubleshooting/ap',jdata)
        return response
        

    def group_get_control_blade_topology_chart(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Control Blade Topology Chart    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/group/topologychart/controlblade',jdata)
        return response
        

    def group_get_data_blade_topology_chart(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Data Blade Topology Chart    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/group/topologychart/dataplane',jdata)
        return response
        

    def group_get_domain_tree(self, url_domainId):
        '''
        Mandatory Params :
        url_domainId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Domain Tree    url_domainId
        '''
        
        response = self.session.get('/group/tree/domain/{domainId}'.format(domainId=url_domainId))
        return response
        

    def group_get_lazy_group_tree(self, url_groupType):
        '''
        Mandatory Params :
        url_groupType : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Lazy Group Tree    url_groupType
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/group/tree/{groupType}'.format(groupType=url_groupType),jdata)
        return response
        

    def group_get_group_topology_chart(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Group Topology Chart    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/group/topologychart/group',jdata)
        return response
        

    def group_get_group_tree(self, url_groupType):
        '''
        Mandatory Params :
        url_groupType : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Group Tree    url_groupType
        '''
        
        response = self.session.get('/group/tree/{groupType}'.format(groupType=url_groupType))
        return response
        

    def group_get_ap_health_tree(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Ap Health Tree    
        '''
        
        response = self.session.get('/group/tree/apHealthStatusConfig')
        return response
        

    def group_get_lazy_group_topology_chart(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Group Get Lazy Group Topology Chart    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/group/topologychart/group/lazy',jdata)
        return response
        

    def lineman_get_workflow(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Lineman Get Workflow    
        '''
        
        response = self.session.get('/lineman/workflow')
        return response
        

    def lineman_upload_workflow(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Lineman Upload Workflow    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/lineman/workflow',jdata)
        

    def cluster_data_get_tunnels_summary(self, url_dBladeId):
        '''
        Mandatory Params :
        url_dBladeId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Get Tunnels Summary    url_dBladeId
        '''
        
        response = self.session.get('/cluster/data/{dBladeId}/tunnelsummary'.format(dBladeId=url_dBladeId))
        return response
        

    def cluster_data_approve_data_blade(self, url_dpMac):
        '''
        Mandatory Params :
        url_dpMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Approve Data Blade    url_dpMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/data/{dpMac}/approve'.format(dpMac=url_dpMac),jdata)
        

    def cluster_data_get_data_blade_by_id(self, url_dpMac):
        '''
        Mandatory Params :
        url_dpMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Get Data Blade By Id    url_dpMac
        '''
        
        response = self.session.get('/cluster/data/{dpMac}'.format(dpMac=url_dpMac))
        return response
        

    def cluster_data_get_all_date_blade_ids(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Get All Date Blade Ids    
        '''
        
        response = self.session.get('/cluster/data/ids')
        return response
        

    def cluster_data_reboot_data_blade(self, url_dpMac):
        '''
        Mandatory Params :
        url_dpMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Reboot Data Blade    url_dpMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/data/{dpMac}/reboot'.format(dpMac=url_dpMac),jdata)
        

    def cluster_data_get_allow_upgrade_date_blades(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Get Allow Upgrade Date Blades    
        '''
        
        response = self.session.get('/cluster/data/allowupgrade')
        return response
        

    def cluster_data_delete_data_blade(self, url_dpMac):
        '''
        Mandatory Params :
        url_dpMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Delete Data Blade    url_dpMac
        '''
        
        response = self.session.delete('/cluster/data/{dpMac}'.format(dpMac=url_dpMac))
        

    def cluster_data_update_data_blade(self, url_dpMac):
        '''
        Mandatory Params :
        url_dpMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Update Data Blade    url_dpMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/data/{dpMac}'.format(dpMac=url_dpMac),jdata)
        

    def cluster_data_get_ether_port_statistics_by_criteria(self, url_intervalTime, url_numOfDataPoints, url_dBladeId):
        '''
        Mandatory Params :
        url_dBladeId : ""
        url_intervalTime : ""
        url_numOfDataPoints : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Get Ether Port Statistics By Criteria    url_dBladeId    url_intervalTime    url_numOfDataPoints
        '''
        
        response = self.session.get('/cluster/data/{dBladeId}/{intervalTime}/{numOfDataPoints}/ethportstatistics'.format(dBladeId=url_dBladeId,intervalTime=url_intervalTime,numOfDataPoints=url_numOfDataPoints))
        return response
        

    def cluster_data_get_all_date_blades(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Get All Date Blades    
        '''
        
        response = self.session.get('/cluster/data')
        return response
        

    def cluster_data_get_data_blade_by_id2(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Get Data Blade By Id2    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/data/ids/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_data_fetch_rebooting_status(self, url_dpMac):
        '''
        Mandatory Params :
        url_dpMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Data Fetch Rebooting Status    url_dpMac
        '''
        
        response = self.session.get('/cluster/data/{dpMac}/rebootingStatus'.format(dpMac=url_dpMac))
        return response
        

    def apRules_create_ap_rule(self, mobilityZone_id, mobilityZone_name, type, subnet_networkAddress=None, gpsCoordinates_latitude=None, description=None, ipAddressRange_toIp=None, gpsCoordinates_longitude=None, subnet_subnetMask=None, gpsCoordinates_distance=None, ipAddressRange_fromIp=None):
        '''
        Mandatory Params :
        type (Enum)  : type of the AP Registration Rules
        mobilityZone_id : ""
        mobilityZone_name : ""
        
        Optional Params  :
        subnet_subnetMask (String)  : subnetMask
        subnet_networkAddress (String)  : networkAddress
        description (String)  : Description of the AP Registration Rules
        ipAddressRange_toIp (String)  : to IP Address
        ipAddressRange_fromIp (String)  : from IP Address
        gpsCoordinates_latitude (Integer)  : latitude
        gpsCoordinates_distance (Integer)  : distance
        gpsCoordinates_longitude (Integer)  : longitude
        
        Robot Format :
        Aprules Create Ap Rule    type    mobilityZone_id    mobilityZone_name
        '''
        
        data={"subnet":{"subnetMask" : subnet_subnetMask,"networkAddress" : subnet_networkAddress},"description" : description,"ipAddressRange":{"toIp" : ipAddressRange_toIp,"fromIp" : ipAddressRange_fromIp},"gpsCoordinates":{"latitude" : gpsCoordinates_latitude,"distance" : gpsCoordinates_distance,"longitude" : gpsCoordinates_longitude},"mobilityZone":{"id" : mobilityZone_id,"name" : mobilityZone_name},"type" : type}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/apRules',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def apRules_up_priority_ap_rule(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aprules Up Priority Ap Rule    url_id
        '''
        
        response = self.session.get('/apRules/priorityUp/{id}'.format(id=url_id))
        return response
        

    def apRules_modify_ap_rule(self, url_id, subnet_networkAddress=None, gpsCoordinates_latitude=None, description=None, ipAddressRange_toIp=None, provisionTag=None, gpsCoordinates_longitude=None, mobilityZone_name=None, subnet_subnetMask=None, mobilityZone_id=None, gpsCoordinates_distance=None, type=None, ipAddressRange_fromIp=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        subnet_subnetMask (String)  : subnetMask
        subnet_networkAddress (String)  : networkAddress
        description (String)  : Description of the AP Registration Rules
        provisionTag (String)  : ProvisionTag of the AP Registration Rules
        ipAddressRange_toIp (String)  : to IP Address
        ipAddressRange_fromIp (String)  : from IP Address
        gpsCoordinates_latitude (Integer)  : latitude
        gpsCoordinates_distance (Integer)  : distance
        gpsCoordinates_longitude (Integer)  : longitude
        mobilityZone_id : ""
        mobilityZone_name : ""
        type (Enum)  : type of the AP Registration Rules
        
        Robot Format :
        Aprules Modify Ap Rule    url_id
        '''
        
        data={"subnet":{"subnetMask" : subnet_subnetMask,"networkAddress" : subnet_networkAddress},"description" : description,"provisionTag" : provisionTag,"ipAddressRange":{"toIp" : ipAddressRange_toIp,"fromIp" : ipAddressRange_fromIp},"gpsCoordinates":{"latitude" : gpsCoordinates_latitude,"distance" : gpsCoordinates_distance,"longitude" : gpsCoordinates_longitude},"mobilityZone":{"id" : mobilityZone_id,"name" : mobilityZone_name},"type" : type}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/apRules/{id}'.format(id=url_id),jdata)
        

    def apRules_get_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Aprules Get List    
        '''
        
        response = self.session.get('/apRules')
        return response
        

    def apRules_delete_ap_rule(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aprules Delete Ap Rule    url_id
        '''
        
        response = self.session.delete('/apRules/{id}'.format(id=url_id))
        

    def apRules_get_ap_rule(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aprules Get Ap Rule    url_id
        '''
        
        response = self.session.get('/apRules/{id}'.format(id=url_id))
        return response
        

    def apRules_down_priority_ap_rule(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Aprules Down Priority Ap Rule    url_id
        '''
        
        response = self.session.get('/apRules/priorityDown/{id}'.format(id=url_id))
        return response
        

    def globalSettings_get_available_channel5(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Get Available Channel5    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/globalSettings/availableChannels/5',jdata)
        return response
        

    def globalSettings_update_stats_ftp_setting(self, ftpId=None, ftpInterval=None, enabled=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        enabled (Boolean)  : enable logging to remote syslog server
        ftpInterval (Enum)  : ftpInterval
        ftpId (String)  : Identifier of the FTP Server
        
        Robot Format :
        Globalsettings Update Stats Ftp Setting    
        '''
        
        data={"enabled" : enabled,"ftpInterval" : ftpInterval,"ftpId" : ftpId}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/globalSettings/statsFtp',jdata)
        

    def globalSettings_get_portal_lang(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Get Portal Lang    
        '''
        
        response = self.session.get('/globalSettings/portalLang')
        return response
        

    def globalSettings_get_ap_available_channel5(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Get Ap Available Channel5    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/globalSettings/apAvailableChannels/5',jdata)
        return response
        

    def globalSettings_get_stats_ftp_setting(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Get Stats Ftp Setting    
        '''
        
        response = self.session.get('/globalSettings/statsFtp')
        return response
        

    def globalSettings_get_ap_available_channel24(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Get Ap Available Channel24    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/globalSettings/apAvailableChannels/24',jdata)
        return response
        

    def globalSettings_get_available_channel24(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Get Available Channel24    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/globalSettings/availableChannels/24',jdata)
        return response
        

    def globalSettings_get_secondary_channel(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Get Secondary Channel    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/globalSettings/secondaryChannels',jdata)
        return response
        

    def globalSettings_validate_system_time_settings(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Validate System Time Settings    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/globalSettings/systemTime/validate',jdata)
        return response
        

    def globalSettings_get_friendly_name_lang(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalsettings Get Friendly Name Lang    
        '''
        
        response = self.session.get('/globalSettings/friendlyNameLang')
        return response
        

    def maps_get(self, url_indoorMapId):
        '''
        Mandatory Params :
        url_indoorMapId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Maps Get    url_indoorMapId
        '''
        
        response = self.session.get('/maps/{indoorMapId}'.format(indoorMapId=url_indoorMapId))
        return response
        

    def maps_create(self, groupType, name, description, scale_b_y=None, scale_b_x=None, domainId=None, apGroupId=None, imageData=None, address=None, longitude=None, zoneId=None, scale_distance=None, scale_a_x=None, scale_a_y=None, latitude=None, scale_unit=None, tenantId=None, imageFileName=None, id=None, orientation=None):
        '''
        Mandatory Params :
        name (String)  : name
        description (String)  : description
        groupType (Enum)  : group Type
        
        Optional Params  :
        domainId (String)  : domainId
        imageData (String)  : imageData
        id (String)  : id
        longitude (Integer)  : longitude
        zoneId (String)  : zoneId
        scale_a_y (Integer)  : y
        scale_a_x (Integer)  : x
        scale_distance (Integer)  : distance
        scale_b_y (Integer)  : y
        scale_b_x (Integer)  : x
        scale_unit (Enum)  : unit
        apGroupId (String)  : apGroupId
        address (String)  : address
        latitude (Integer)  : latitude
        tenantId (String)  : tenantId
        imageFileName (String)  : imageFileName
        orientation (Enum)  : orientation
        
        Robot Format :
        Maps Create    name    description    groupType
        '''
        
        data={"groupType" : groupType,"domainId" : domainId,"description" : description,"imageData" : imageData,"name" : name,"id" : id,"longitude" : longitude,"zoneId" : zoneId,"scale":{"a":{"y" : scale_a_y,"x" : scale_a_x},"distance" : scale_distance,"b":{"y" : scale_b_y,"x" : scale_b_x},"unit" : scale_unit},"apGroupId" : apGroupId,"address" : address,"latitude" : latitude,"tenantId" : tenantId,"imageFileName" : imageFileName,"orientation" : orientation}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/maps',jdata)
        return response
        

    def maps_update(self, groupType, description, name, url_indoorMapId, scale_b_y=None, scale_b_x=None, domainId=None, apGroupId=None, imageData=None, address=None, longitude=None, zoneId=None, scale_distance=None, scale_a_x=None, scale_a_y=None, latitude=None, scale_unit=None, tenantId=None, imageFileName=None, id=None, orientation=None):
        '''
        Mandatory Params :
        url_indoorMapId : ""
        name (String)  : name
        description (String)  : description
        groupType (Enum)  : group Type
        
        Optional Params  :
        domainId (String)  : domainId
        imageData (String)  : imageData
        id (String)  : id
        longitude (Integer)  : longitude
        zoneId (String)  : zoneId
        scale_a_y (Integer)  : y
        scale_a_x (Integer)  : x
        scale_distance (Integer)  : distance
        scale_b_y (Integer)  : y
        scale_b_x (Integer)  : x
        scale_unit (Enum)  : unit
        apGroupId (String)  : apGroupId
        address (String)  : address
        latitude (Integer)  : latitude
        tenantId (String)  : tenantId
        imageFileName (String)  : imageFileName
        orientation (Enum)  : orientation
        
        Robot Format :
        Maps Update    url_indoorMapId    name    description    groupType
        '''
        
        data={"groupType" : groupType,"domainId" : domainId,"description" : description,"imageData" : imageData,"name" : name,"id" : id,"longitude" : longitude,"zoneId" : zoneId,"scale":{"a":{"y" : scale_a_y,"x" : scale_a_x},"distance" : scale_distance,"b":{"y" : scale_b_y,"x" : scale_b_x},"unit" : scale_unit},"apGroupId" : apGroupId,"address" : address,"latitude" : latitude,"tenantId" : tenantId,"imageFileName" : imageFileName,"orientation" : orientation}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/maps/{indoorMapId}'.format(indoorMapId=url_indoorMapId),jdata)
        

    def maps_get_maps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Maps Get Maps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/maps/query',jdata)
        return response
        

    def maps_get_list(self, url_groupType, url_groupId):
        '''
        Mandatory Params :
        url_groupId : ""
        url_groupType : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Maps Get List    url_groupId    url_groupType
        '''
        
        response = self.session.get('/maps/?groupId={groupId}&groupType={groupType}'.format(groupId=url_groupId,groupType=url_groupType))
        return response
        

    def maps_update_indoor_map(self, url_indoorMapId):
        '''
        Mandatory Params :
        url_indoorMapId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Maps Update Indoor Map    url_indoorMapId
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/maps/{indoorMapId}/aps'.format(indoorMapId=url_indoorMapId),jdata)
        

    def maps_delete(self, url_indoorMapId):
        '''
        Mandatory Params :
        url_indoorMapId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Maps Delete    url_indoorMapId
        '''
        
        response = self.session.delete('/maps/{indoorMapId}'.format(indoorMapId=url_indoorMapId))
        

    def health_aggregate_capacity_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Aggregate Capacity By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/ap/capacity',jdata)
        return response
        

    def health_get_utilz_max_avg_min_and_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Utilz Max Avg Min And Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/utilz',jdata)
        return response
        

    def health_get_flagged_cluster_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Flagged Cluster List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/flagged/cluster',jdata)
        return response
        

    def health_get_noise_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Noise List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/line/noise',jdata)
        return response
        

    def health_get_failure_max_avg_min_and_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Failure Max Avg Min And Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/failure',jdata)
        return response
        

    def health_get_noise_max_avg_min_and_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Noise Max Avg Min And Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/noise',jdata)
        return response
        

    def health_get_noise_avg_and_group_a_ps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Noise Avg And Group A Ps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/noise/group',jdata)
        return response
        

    def health_get_flagged_ap_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Flagged Ap List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/flagged/ap',jdata)
        return response
        

    def health_get_ap_health_status_count(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Ap Health Status Count    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/status/ap',jdata)
        return response
        

    def health_get_latency_max_avg_min_and_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Latency Max Avg Min And Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/latency',jdata)
        return response
        

    def health_get_failure_avg_and_group_a_ps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Failure Avg And Group A Ps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/failure/group',jdata)
        return response
        

    def health_get_retry_avg_and_group_a_ps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Retry Avg And Group A Ps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/retry/group',jdata)
        return response
        

    def health_get_offline_cluster_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Offline Cluster List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/offline/cluster',jdata)
        return response
        

    def health_aggregate_failure_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Aggregate Failure By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/ap/failure',jdata)
        return response
        

    def health_get_online_cluster_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Online Cluster List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/online/cluster',jdata)
        return response
        

    def health_get_online_ap_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Online Ap List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/online/ap',jdata)
        return response
        

    def health_get_retry_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Retry List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/line/retry',jdata)
        return response
        

    def health_get_retry_max_avg_min_and_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Retry Max Avg Min And Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/retry',jdata)
        return response
        

    def health_get_failure_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Failure List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/line/failure',jdata)
        return response
        

    def health_aggregate_noise_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Aggregate Noise By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/ap/noise',jdata)
        return response
        

    def health_get_capacity_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Capacity List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/line/capacity',jdata)
        return response
        

    def health_get_capacity_max_avg_min_and_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Capacity Max Avg Min And Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/capacity',jdata)
        return response
        

    def health_aggregate_retry_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Aggregate Retry By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/ap/retry',jdata)
        return response
        

    def health_get_capacity_avg_and_group_a_ps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Capacity Avg And Group A Ps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/capacity/group',jdata)
        return response
        

    def health_aggregate_latency_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Aggregate Latency By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/ap/latency',jdata)
        return response
        

    def health_get_cluster_health_status_count(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Cluster Health Status Count    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/status/cluster',jdata)
        return response
        

    def health_get_airtime_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Airtime List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/line/airtime',jdata)
        return response
        

    def health_get_latency_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Latency List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/line/latency',jdata)
        return response
        

    def health_get_utilz_avg_and_group_a_ps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Utilz Avg And Group A Ps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/utilz/group',jdata)
        return response
        

    def health_aggregate_util_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Aggregate Util By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/ap/utilz',jdata)
        return response
        

    def health_get_client_health_status_count(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Client Health Status Count    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/status/client',jdata)
        return response
        

    def health_get_latency_avg_and_group_a_ps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Health Get Latency Avg And Group A Ps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/health/aggs/latency/group',jdata)
        return response
        

    def _3rdpartyzones_disable_third_party_zone_attribute_radius_options(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
         3Rdpartyzones Disable Third Party Zone Attribute Radius Options    url_id
        '''
        
        response = self.session.delete('/3rdpartyzones/{id}/radiusOptions'.format(id=url_id))
        

    def _3rdpartyzones_create_l2o_gre_zone(self, name, accessNetworkSourceIPList_endIP=None, domainId=None, description=None, accessNetworkSourceIPList_subnet=None, accessNetworkSourceIPList_startIP=None, accessNetworkSourceIPList_ipType=None, accessNetworkSourceIPList_ip=None, accessNetworkSourceIPList_network=None):
        '''
        Mandatory Params :
        name (String)  : Name of the third party zone
        
        Optional Params  :
        description (String)  : Description of the third party zone
        domainId (String)  : Identifier of the management domain to which the third party zone belongs
        accessNetworkSourceIPList_endIP (String)  : Start IP address of Access Network Source
        accessNetworkSourceIPList_ipType (Enum)  : IP type of Access Network Source
        accessNetworkSourceIPList_subnet (String)  : Subnet of Access Network Source
        accessNetworkSourceIPList_startIP (String)  : Start IP address of Access Network Source
        accessNetworkSourceIPList_ip (String)  : IP address of Access Network Source
        accessNetworkSourceIPList_network (String)  : Network of Access Network Source
        
        Robot Format :
         3Rdpartyzones Create L2O Gre Zone    name
        '''
        
        data={"description" : description,"domainId" : domainId,"accessNetworkSourceIPList":[{"endIP" : accessNetworkSourceIPList_endIP,"ipType" : accessNetworkSourceIPList_ipType,"subnet" : accessNetworkSourceIPList_subnet,"startIP" : accessNetworkSourceIPList_startIP,"ip" : accessNetworkSourceIPList_ip,"network" : accessNetworkSourceIPList_network}],"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/3rdpartyzones/l2ogre',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def _3rdpartyzones_delete_third_party_wlan(self, url_thirdPartyZoneId, url_id):
        '''
        Mandatory Params :
        url_thirdPartyZoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
         3Rdpartyzones Delete Third Party Wlan    url_thirdPartyZoneId    url_id
        '''
        
        response = self.session.delete('/3rdpartyzones/{thirdPartyZoneId}/thirdPartyWlans/{id}'.format(thirdPartyZoneId=url_thirdPartyZoneId,id=url_id))
        

    def _3rdpartyzones_get(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
         3Rdpartyzones Get    url_id
        '''
        
        response = self.session.get('/3rdpartyzones/{id}'.format(id=url_id))
        return response
        

    def _3rdpartyzones_update_third_party_wlan(self, url_thirdPartyZoneId, url_id, coreNetworkVLANOptions_vlanMappingType=None, coreNetworkVLANOptions_coreAddFixedSVlan=None, authType=None, coreNetworkVLANOptions_coreQinQEnabled=None, ssid=None, hotspot_acctServiceProfileId=None, authProfileId=None, forwardingProfileId=None, hotspot_authServiceProfileId=None, acctProfileId=None, accessVlans=None, hotspot_authenticationType=None, acctTtgSessionEnabled=None, hotspot_bypassCna=None, hotspot_hotspotServiceProfileId=None, coreNetworkType=None):
        '''
        Mandatory Params :
        url_thirdPartyZoneId : ""
        url_id : ""
        
        Optional Params  :
        acctProfileId (String)  : Accounting service profile identifier of the third party WLAN
        authType (Enum)  : Authentication type of the third party WLAN
        ssid (String)  : SSID of then third party WLAN
        authProfileId (String)  : Authentication service profile identifier of the third party WLAN
        forwardingProfileId (String)  : Forwarding profile identifier of the third party WLAN
        coreNetworkType (Enum)  : Core network type of the third party WLAN
        hotspot_authServiceProfileId (String)  : Authentication service profile id of third party WLAN
        hotspot_acctServiceProfileId (String)  : Accounting service profile id of third party WLAN
        hotspot_hotspotServiceProfileId (String)  : Hotspot(WISPr) service profile id of third party WLAN
        hotspot_authenticationType (Enum)  : Authentication Type of third party WLAN
        hotspot_bypassCna (Boolean)  : BypassCNA of third party WLAN
        accessVlans (String)  : Access VLAN of the third party WLAN
        coreNetworkVLANOptions_coreQinQEnabled (Boolean)  : core QinQ enabled
        coreNetworkVLANOptions_vlanMappingType (Enum)  : VLAN mapping type
        coreNetworkVLANOptions_coreAddFixedSVlan (Integer)  : Core Add Fixed VLAN
        acctTtgSessionEnabled (Boolean)  : Account TTG session enabled of the third party WLAN
        
        Robot Format :
         3Rdpartyzones Update Third Party Wlan    url_thirdPartyZoneId    url_id
        '''
        
        data={"acctProfileId" : acctProfileId,"authType" : authType,"ssid" : ssid,"authProfileId" : authProfileId,"forwardingProfileId" : forwardingProfileId,"coreNetworkType" : coreNetworkType,"hotspot":{"authServiceProfileId" : hotspot_authServiceProfileId,"acctServiceProfileId" : hotspot_acctServiceProfileId,"hotspotServiceProfileId" : hotspot_hotspotServiceProfileId,"authenticationType" : hotspot_authenticationType,"bypassCna" : hotspot_bypassCna},"accessVlans" : accessVlans,"coreNetworkVLANOptions":{"coreQinQEnabled" : coreNetworkVLANOptions_coreQinQEnabled,"vlanMappingType" : coreNetworkVLANOptions_vlanMappingType,"coreAddFixedSVlan" : coreNetworkVLANOptions_coreAddFixedSVlan},"acctTtgSessionEnabled" : acctTtgSessionEnabled}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/3rdpartyzones/{thirdPartyZoneId}/thirdPartyWlans/{id}'.format(thirdPartyZoneId=url_thirdPartyZoneId,id=url_id),jdata)
        

    def _3rdpartyzones_update(self, url_id, accessNetworkSourceIPList_endIP=None, accounting_acctUpdateInterval=None, radiusOptions_radiusClientAddressList_subnet=None, radiusOptions_radiusDefaultShareSecret=None, accessNetworkSourceIPList_subnet=None, radiusOptions_radiusClientAddressList_network=None, vlanOptions_coreAddFixedVlan=None, vlanOptions_qinQVLANTagList_startSVlan=None, authServiceType=None, networkTrafficPackageId=None, authServiceProfileId=None, vlanOptions_qinQVLANTagList_endSVlan=None, radiusOptions_radiusClientAddressList_ip=None, vlanOptions_qinQVLANTagList_startCVlan=None, coreNetworkType=None, vlanOptions_coreQinQEnabled=None, accessNetworkSourceIPList_startIP=None, radiusOptions_radiusClientAddressList_ipType=None, radiusOptions_radiusClientAddressList_endIP=None, description=None, vlanOptions_qinQVLANTagList_coreStart=None, accessNetworkSourceIPList_ip=None, forwardingServiceProfileId=None, hotspot_bypassCna=None, accessNetworkSourceIPList_network=None, radiusOptions_radiusClientAddressList_startIP=None, hotspot_hotspotServiceProfileId=None, vlanOptions_vlanMappingType=None, domainId=None, name=None, radiusOptions_radiusClientAddressList_secret=None, accounting_acctServiceProfileId=None, accessNetworkSourceIPList_ipType=None, vlanOptions_qinQVLANTagList_endCVlan=None, hotspot_hotspotAuthenticationType=None, accounting_acctTTGSessionEnabled=None, vlanOptions_qinQVLANTagList_coreEnd=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        authServiceType (Enum)  : Authentication Service Type of third party zone
        domainId (String)  : Identifier of the management domain to which the third party zone belongs
        name (String)  : Name of the third party zone
        coreNetworkType (Enum)  : Core Network Type of the third party zone
        description (String)  : Description of the third party zone
        hotspot_hotspotAuthenticationType (Enum)  : Authentication Type of Hotspot(WISPr)
        hotspot_hotspotServiceProfileId (String)  : Identifier of the Hotspot(WISPr) service profile
        hotspot_bypassCna (Boolean)  : Bypass CNA of the Hotspot(WISPr)
        authServiceProfileId (String)  : Identifier of authentication Service Profile
        vlanOptions_vlanMappingType (Enum)  : Core Network VLAN Mapping Type of the third party zone
        vlanOptions_coreQinQEnabled (Boolean)  : Core QinQ enabled of the third party zone
        vlanOptions_coreAddFixedVlan (Integer)  : Core Add Fixed VLAN
        vlanOptions_qinQVLANTagList_endSVlan (Integer)  : End of Access S-VLAN Range
        vlanOptions_qinQVLANTagList_startSVlan (Integer)  : Start of Access S-VLAN Range
        vlanOptions_qinQVLANTagList_coreStart (Integer)  : Core of Access C-VLAN Range start
        vlanOptions_qinQVLANTagList_coreEnd (Integer)  : Core of Access C-VLAN Range end
        vlanOptions_qinQVLANTagList_endCVlan (Integer)  : End of Access C-VLAN Range
        vlanOptions_qinQVLANTagList_startCVlan (Integer)  : Start of Access C-VLAN Range
        radiusOptions_radiusClientAddressList_endIP (String)  : IP address of Radius Client Address's ip range end
        radiusOptions_radiusClientAddressList_ipType (Enum)  : IP type of Radius Client Address
        radiusOptions_radiusClientAddressList_subnet (String)  : Subnet of Radius Client Address
        radiusOptions_radiusClientAddressList_startIP (String)  : IP address of Radius Client Address's ip range start
        radiusOptions_radiusClientAddressList_ip (String)  : IP address of Radius Client Address
        radiusOptions_radiusClientAddressList_secret (String)  : Secret of Radius Client Address
        radiusOptions_radiusClientAddressList_network (String)  : network of Radius Client Address
        radiusOptions_radiusDefaultShareSecret (String)  : Default share secret of RADIUS client
        forwardingServiceProfileId (String)  : Identifier of the forwarding service profile
        accounting_acctServiceProfileId (String)  : Identifier of Accounting service profile
        accounting_acctUpdateInterval (Integer)  : Update interval of accounting service
        accounting_acctTTGSessionEnabled (Boolean)  : Enable Accounting for TTG Sessions
        networkTrafficPackageId (String)  : Identifier of the network traffic package
        accessNetworkSourceIPList_endIP (String)  : Start IP address of Access Network Source
        accessNetworkSourceIPList_ipType (Enum)  : IP type of Access Network Source
        accessNetworkSourceIPList_subnet (String)  : Subnet of Access Network Source
        accessNetworkSourceIPList_startIP (String)  : Start IP address of Access Network Source
        accessNetworkSourceIPList_ip (String)  : IP address of Access Network Source
        accessNetworkSourceIPList_network (String)  : Network of Access Network Source
        
        Robot Format :
         3Rdpartyzones Update    url_id
        '''
        
        data={"authServiceType" : authServiceType,"domainId" : domainId,"name" : name,"coreNetworkType" : coreNetworkType,"description" : description,"hotspot":{"hotspotAuthenticationType" : hotspot_hotspotAuthenticationType,"hotspotServiceProfileId" : hotspot_hotspotServiceProfileId,"bypassCna" : hotspot_bypassCna},"authServiceProfileId" : authServiceProfileId,"vlanOptions":{"vlanMappingType" : vlanOptions_vlanMappingType,"coreQinQEnabled" : vlanOptions_coreQinQEnabled,"coreAddFixedVlan" : vlanOptions_coreAddFixedVlan,"qinQVLANTagList":[{"endSVlan" : vlanOptions_qinQVLANTagList_endSVlan,"startSVlan" : vlanOptions_qinQVLANTagList_startSVlan,"coreStart" : vlanOptions_qinQVLANTagList_coreStart,"coreEnd" : vlanOptions_qinQVLANTagList_coreEnd,"endCVlan" : vlanOptions_qinQVLANTagList_endCVlan,"startCVlan" : vlanOptions_qinQVLANTagList_startCVlan}]},"radiusOptions":{"radiusClientAddressList":[{"endIP" : radiusOptions_radiusClientAddressList_endIP,"ipType" : radiusOptions_radiusClientAddressList_ipType,"subnet" : radiusOptions_radiusClientAddressList_subnet,"startIP" : radiusOptions_radiusClientAddressList_startIP,"ip" : radiusOptions_radiusClientAddressList_ip,"secret" : radiusOptions_radiusClientAddressList_secret,"network" : radiusOptions_radiusClientAddressList_network}],"radiusDefaultShareSecret" : radiusOptions_radiusDefaultShareSecret},"forwardingServiceProfileId" : forwardingServiceProfileId,"accounting":{"acctServiceProfileId" : accounting_acctServiceProfileId,"acctUpdateInterval" : accounting_acctUpdateInterval,"acctTTGSessionEnabled" : accounting_acctTTGSessionEnabled},"networkTrafficPackageId" : networkTrafficPackageId,"accessNetworkSourceIPList":[{"endIP" : accessNetworkSourceIPList_endIP,"ipType" : accessNetworkSourceIPList_ipType,"subnet" : accessNetworkSourceIPList_subnet,"startIP" : accessNetworkSourceIPList_startIP,"ip" : accessNetworkSourceIPList_ip,"network" : accessNetworkSourceIPList_network}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/3rdpartyzones/{id}'.format(id=url_id),jdata)
        

    def _3rdpartyzones_get_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
         3Rdpartyzones Get List    
        '''
        
        response = self.session.get('/3rdpartyzones')
        return response
        

    def _3rdpartyzones_create_third_party_wlan(self, url_thirdPartyZoneId, coreNetworkVLANOptions_vlanMappingType=None, coreNetworkVLANOptions_coreAddFixedSVlan=None, authType=None, coreNetworkVLANOptions_coreQinQEnabled=None, ssid=None, hotspot_acctServiceProfileId=None, authProfileId=None, forwardingProfileId=None, hotspot_authServiceProfileId=None, acctProfileId=None, accessVlans=None, hotspot_authenticationType=None, acctTtgSessionEnabled=None, hotspot_bypassCna=None, hotspot_hotspotServiceProfileId=None, coreNetworkType=None):
        '''
        Mandatory Params :
        url_thirdPartyZoneId : ""
        
        Optional Params  :
        acctProfileId (String)  : Accounting service profile identifier of the third party WLAN
        authType (Enum)  : Authentication type of the third party WLAN
        ssid (String)  : SSID of then third party WLAN
        authProfileId (String)  : Authentication service profile identifier of the third party WLAN
        forwardingProfileId (String)  : Forwarding profile identifier of the third party WLAN
        coreNetworkType (Enum)  : Core network type of the third party WLAN
        hotspot_authServiceProfileId (String)  : Authentication service profile id of third party WLAN
        hotspot_acctServiceProfileId (String)  : Accounting service profile id of third party WLAN
        hotspot_hotspotServiceProfileId (String)  : Hotspot(WISPr) service profile id of third party WLAN
        hotspot_authenticationType (Enum)  : Authentication Type of third party WLAN
        hotspot_bypassCna (Boolean)  : BypassCNA of third party WLAN
        accessVlans (String)  : Access VLAN of the third party WLAN
        coreNetworkVLANOptions_coreQinQEnabled (Boolean)  : core QinQ enabled
        coreNetworkVLANOptions_vlanMappingType (Enum)  : VLAN mapping type
        coreNetworkVLANOptions_coreAddFixedSVlan (Integer)  : Core Add Fixed VLAN
        acctTtgSessionEnabled (Boolean)  : Account TTG session enabled of the third party WLAN
        
        Robot Format :
         3Rdpartyzones Create Third Party Wlan    url_thirdPartyZoneId
        '''
        
        data={"acctProfileId" : acctProfileId,"authType" : authType,"ssid" : ssid,"authProfileId" : authProfileId,"forwardingProfileId" : forwardingProfileId,"coreNetworkType" : coreNetworkType,"hotspot":{"authServiceProfileId" : hotspot_authServiceProfileId,"acctServiceProfileId" : hotspot_acctServiceProfileId,"hotspotServiceProfileId" : hotspot_hotspotServiceProfileId,"authenticationType" : hotspot_authenticationType,"bypassCna" : hotspot_bypassCna},"accessVlans" : accessVlans,"coreNetworkVLANOptions":{"coreQinQEnabled" : coreNetworkVLANOptions_coreQinQEnabled,"vlanMappingType" : coreNetworkVLANOptions_vlanMappingType,"coreAddFixedSVlan" : coreNetworkVLANOptions_coreAddFixedSVlan},"acctTtgSessionEnabled" : acctTtgSessionEnabled}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/3rdpartyzones/{thirdPartyZoneId}/thirdPartyWlans'.format(thirdPartyZoneId=url_thirdPartyZoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def _3rdpartyzones_disable_third_party_zone_attribute_accounting(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
         3Rdpartyzones Disable Third Party Zone Attribute Accounting    url_id
        '''
        
        response = self.session.delete('/3rdpartyzones/{id}/accounting'.format(id=url_id))
        

    def _3rdpartyzones_create_qin_ql2_zone(self, name, vlanOptions_qinQVLANTagList_endSVlan, vlanOptions_qinQVLANTagList_startCVlan, vlanOptions_coreQinQEnabled, vlanOptions_qinQVLANTagList_coreStart, vlanOptions_qinQVLANTagList_coreEnd, vlanOptions_qinQVLANTagList_endCVlan, vlanOptions_qinQVLANTagList_startSVlan, vlanOptions_coreAddFixedVlan, vlanOptions_vlanMappingType, authServiceType=None, domainId=None, description=None, coreNetworkType=None, hotspot_hotspotServiceProfileId=None, hotspot_hotspotAuthenticationType=None, hotspot_bypassCna=None):
        '''
        Mandatory Params :
        name (String)  : Name of the third party zone
        vlanOptions_vlanMappingType (Enum)  : Core Network VLAN Mapping Type of the third party zone
        vlanOptions_coreQinQEnabled (Boolean)  : Core QinQ enabled of the third party zone
        vlanOptions_coreAddFixedVlan (Integer)  : Core Add Fixed VLAN
        vlanOptions_qinQVLANTagList_endSVlan (Integer)  : End of Access S-VLAN Range
        vlanOptions_qinQVLANTagList_startSVlan (Integer)  : Start of Access S-VLAN Range
        vlanOptions_qinQVLANTagList_coreStart (Integer)  : Core of Access C-VLAN Range start
        vlanOptions_qinQVLANTagList_coreEnd (Integer)  : Core of Access C-VLAN Range end
        vlanOptions_qinQVLANTagList_endCVlan (Integer)  : End of Access C-VLAN Range
        vlanOptions_qinQVLANTagList_startCVlan (Integer)  : Start of Access C-VLAN Range
        
        Optional Params  :
        authServiceType (Enum)  : Authentication Service Type of the third party zone
        domainId (String)  : Identifier of the management domain to which the third party zone belongs
        coreNetworkType (Enum)  : Core Network Type of the third party zone
        hotspot_hotspotAuthenticationType (Enum)  : Authentication Type of Hotspot(WISPr)
        hotspot_hotspotServiceProfileId (String)  : Identifier of the Hotspot(WISPr) service profile
        hotspot_bypassCna (Boolean)  : Bypass CNA of the Hotspot(WISPr)
        description (String)  : Description of the third party zone
        
        Robot Format :
         3Rdpartyzones Create Qin Ql2 Zone    name    vlanOptions_vlanMappingType    vlanOptions_coreQinQEnabled    vlanOptions_coreAddFixedVlan    vlanOptions_qinQVLANTagList_endSVlan    vlanOptions_qinQVLANTagList_startSVlan    vlanOptions_qinQVLANTagList_coreStart    vlanOptions_qinQVLANTagList_coreEnd    vlanOptions_qinQVLANTagList_endCVlan    vlanOptions_qinQVLANTagList_startCVlan
        '''
        
        data={"authServiceType" : authServiceType,"domainId" : domainId,"name" : name,"coreNetworkType" : coreNetworkType,"hotspot":{"hotspotAuthenticationType" : hotspot_hotspotAuthenticationType,"hotspotServiceProfileId" : hotspot_hotspotServiceProfileId,"bypassCna" : hotspot_bypassCna},"vlanOptions":{"vlanMappingType" : vlanOptions_vlanMappingType,"coreQinQEnabled" : vlanOptions_coreQinQEnabled,"coreAddFixedVlan" : vlanOptions_coreAddFixedVlan,"qinQVLANTagList":[{"endSVlan" : vlanOptions_qinQVLANTagList_endSVlan,"startSVlan" : vlanOptions_qinQVLANTagList_startSVlan,"coreStart" : vlanOptions_qinQVLANTagList_coreStart,"coreEnd" : vlanOptions_qinQVLANTagList_coreEnd,"endCVlan" : vlanOptions_qinQVLANTagList_endCVlan,"startCVlan" : vlanOptions_qinQVLANTagList_startCVlan}]},"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/3rdpartyzones/qinql2',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def _3rdpartyzones_disable_third_party_zone_attribute_access_network_source_ip_list(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
         3Rdpartyzones Disable Third Party Zone Attribute Access Network Source Ip List    url_id
        '''
        
        response = self.session.delete('/3rdpartyzones/{id}/accessNetworkSourceIPList'.format(id=url_id))
        

    def _3rdpartyzones_delete(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
         3Rdpartyzones Delete    url_id
        '''
        
        response = self.session.delete('/3rdpartyzones/{id}'.format(id=url_id))
        

    def zdImport_migrate(self, ip=None, password=None, user=None, apMacList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        ip (String)  : ZD IP address
        password (String)  : ZD password
        user (String)  : ZD user name
        apMacList (String)  : List of AP MAC
        
        Robot Format :
        Zdimport Migrate    
        '''
        
        data={"ip" : ip,"password" : password,"user" : user,"apMacList":[ apMacList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/zdImport/migrate',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def zdImport_get_zda_ps(self, url_ip):
        '''
        Mandatory Params :
        url_ip : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Zdimport Get Zda Ps    url_ip
        '''
        
        response = self.session.get('/zdImport/getZDAPs?ip={ip}'.format(ip=url_ip))
        return response
        

    def zdImport_connect_zd(self, ip=None, password=None, user=None, apMacList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        ip (String)  : ZD IP address
        password (String)  : ZD password
        user (String)  : ZD user name
        apMacList (String)  : List of AP MAC
        
        Robot Format :
        Zdimport Connect Zd    
        '''
        
        data={"ip" : ip,"password" : password,"user" : user,"apMacList":[ apMacList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/zdImport/connectZD',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def zdImport_report_status(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Zdimport Report Status    
        '''
        
        response = self.session.get('/zdImport/status')
        return response
        

    def healthConfig_get_threshold(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Healthconfig Get Threshold    
        '''
        
        response = self.session.get('/healthConfig/cluster')
        return response
        

    def healthConfig_get_ap_health_status_global_setting(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Healthconfig Get Ap Health Status Global Setting    
        '''
        
        response = self.session.get('/healthConfig/globalApHealthSetting')
        return response
        

    def healthConfig_update_threshold(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Healthconfig Update Threshold    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/healthConfig/cluster',jdata)
        

    def rkszones_get_wechat_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wechat List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/portals/wechat'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_generate_dhcp_site_config_bo_by_zone_id(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Generate Dhcp Site Config Bo By Zone Id    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/dhcpSite/dhcpSiteConfig'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_create_ethernet_port_profile(self, _8021X_authenticator_authentication_enableUseSCGasProxy, _8021X_authenticator_macAuthByPassEnabled, _8021X_authenticator_authentication_server_name, name, _8021X_authenticator_accounting_server_id, url_zoneId, _8021X_authenticator_accounting_server_name, _8021X_supplicant_userName, _8021X_authenticator_disabledAccounting, _8021X_authenticator_authentication_server_id, _8021X_authenticator_accounting_enableUseSCGasProxy, _8021X_supplicant_password, _8021X_type, type, _8021X_supplicant_type, tunnelEnabled=None, vlanMembers=None, description=None, guestVlan=None, untagId=None, dynamicVlanEnabled=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : name of the ethernet port profile
        type (Enum)  : type of the ethernet port profile
        _8021X_authenticator_disabledAccounting : ""
        _8021X_authenticator_authentication_enableUseSCGasProxy : ""
        _8021X_authenticator_authentication_server_id : ""
        _8021X_authenticator_authentication_server_name : ""
        _8021X_authenticator_macAuthByPassEnabled : ""
        _8021X_authenticator_accounting_enableUseSCGasProxy : ""
        _8021X_authenticator_accounting_server_id : ""
        _8021X_authenticator_accounting_server_name : ""
        _8021X_supplicant_userName : ""
        _8021X_supplicant_password : ""
        _8021X_supplicant_type : ""
        _8021X_type : ""
        
        Optional Params  :
        tunnelEnabled (Boolean)  : tunnelEnabled of the ethernet port profile for AccessPort type
        vlanMembers (String)  : VLAN Members of the ethernet port profile
        guestVlan : ""
        untagId (Integer)  : VLAN Untag ID of the ethernet port profile
        dynamicVlanEnabled : ""
        description (String)  : description of the ethernet port profile
        
        Robot Format :
        Rkszones Create Ethernet Port Profile    url_zoneId    name    type    _8021X_authenticator_disabledAccounting    _8021X_authenticator_authentication_enableUseSCGasProxy    _8021X_authenticator_authentication_server_id    _8021X_authenticator_authentication_server_name    _8021X_authenticator_macAuthByPassEnabled    _8021X_authenticator_accounting_enableUseSCGasProxy    _8021X_authenticator_accounting_server_id    _8021X_authenticator_accounting_server_name    _8021X_supplicant_userName    _8021X_supplicant_password    _8021X_supplicant_type    _8021X_type
        '''
        
        data={"tunnelEnabled" : tunnelEnabled,"vlanMembers" : vlanMembers,"name" : name,"guestVlan" : guestVlan,"_8021X":{"authenticator":{"disabledAccounting" : _8021X_authenticator_disabledAccounting,"authentication":{"enableUseSCGasProxy" : _8021X_authenticator_authentication_enableUseSCGasProxy,"server":{"id" : _8021X_authenticator_authentication_server_id,"name" : _8021X_authenticator_authentication_server_name}},"macAuthByPassEnabled" : _8021X_authenticator_macAuthByPassEnabled,"accounting":{"enableUseSCGasProxy" : _8021X_authenticator_accounting_enableUseSCGasProxy,"server":{"id" : _8021X_authenticator_accounting_server_id,"name" : _8021X_authenticator_accounting_server_name}}},"supplicant":{"userName" : _8021X_supplicant_userName,"password" : _8021X_supplicant_password,"type" : _8021X_supplicant_type},"type" : _8021X_type},"untagId" : untagId,"dynamicVlanEnabled" : dynamicVlanEnabled,"type" : type,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/profile/ethernetPort'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_create_guest_access(self, name, portalCustomization_language, url_zoneId, userSession_timeoutInMin, userSession_gracePeriodInMin, portalCustomization_title, portalCustomization_logo, portalCustomization_termsAndConditionsRequired, portalCustomization_termsAndConditionsText, smsGateway_id=None, smsGateway_name=None, description=None, redirect_url=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the guest access profile
        portalCustomization_logo (String)  : logo
        portalCustomization_termsAndConditionsRequired (Boolean)  : Terms and conditions is required or not
        portalCustomization_termsAndConditionsText (String)  : Terms and conditions text
        portalCustomization_language : ""
        portalCustomization_title (String)  : Title
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        smsGateway_id : ""
        smsGateway_name : ""
        description (String)  : Description of the guest access profile
        
        Robot Format :
        Rkszones Create Guest Access    url_zoneId    name    portalCustomization_logo    portalCustomization_termsAndConditionsRequired    portalCustomization_termsAndConditionsText    portalCustomization_language    portalCustomization_title    userSession_timeoutInMin    userSession_gracePeriodInMin
        '''
        
        data={"redirect":{"url" : redirect_url},"smsGateway":{"id" : smsGateway_id,"name" : smsGateway_name},"portalCustomization":{"logo" : portalCustomization_logo,"termsAndConditionsRequired" : portalCustomization_termsAndConditionsRequired,"termsAndConditionsText" : portalCustomization_termsAndConditionsText,"language" : portalCustomization_language,"title" : portalCustomization_title},"name" : name,"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/portals/guest'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_delete_bonjour_gateway_policies(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Bonjour Gateway Policies    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/bounjourGateway/policies/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_ap_group_override_wlan_group50(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Wlan Group50    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wlanGroup50'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_domain(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Domain    url_id
        '''
        
        response = self.session.get('/rkszones/domains/{id}'.format(id=url_id))
        return response
        

    def rkszones_get_zone_ap_model_specific(self, url_zoneId, url_model):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_model : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Zone Ap Model Specific    url_zoneId    url_model
        '''
        
        response = self.session.get('/rkszones/{zoneId}/apmodel/{model}'.format(zoneId=url_zoneId,model=url_model))
        return response
        

    def rkszones_modify_bonjour_fencing_policy(self, url_zoneId, url_id, bonjourFencingRuleList_serviceType=None, description=None, bonjourFencingRuleList_description=None, bonjourFencingRuleList_fencingRange=None, bonjourFencingRuleList_deviceType=None, name=None, bonjourFencingRuleList_closestAp=None, bonjourFencingRuleList_deviceMac=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        description (String)  : Description of the Bonjour Fencing Rule
        bonjourFencingRuleList_fencingRange (Enum)  : The range of AP can take Bonjour work
        bonjourFencingRuleList_serviceType (Enum)  : Bonjour Service Type
        bonjourFencingRuleList_description (String)  : Description of the Bonjour Fencing Rule
        bonjourFencingRuleList_deviceMac (String)  : Specify the device providing Bonjour Service
        bonjourFencingRuleList_deviceType (Enum)  : Name of the Bonjour Fencing Rule
        bonjourFencingRuleList_closestAp (String)  : Specify the closest AP while device connecting to AP wired
        name (String)  : Name of the Bonjour Fencing Rule
        
        Robot Format :
        Rkszones Modify Bonjour Fencing Policy    url_zoneId    url_id
        '''
        
        data={"description" : description,"bonjourFencingRuleList":[{"fencingRange" : bonjourFencingRuleList_fencingRange,"serviceType" : bonjourFencingRuleList_serviceType,"description" : bonjourFencingRuleList_description,"deviceMac" : bonjourFencingRuleList_deviceMac,"deviceType" : bonjourFencingRuleList_deviceType,"closestAp" : bonjourFencingRuleList_closestAp}],"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/bonjourFencingPolicy/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_delete_hotspot20_wlan_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Hotspot20 Wlan Profile    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/hs20s/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_ap_group_ap_model_specific(self, url_zoneId, url_id, url_model):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_model : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Ap Model Specific    url_zoneId    url_id    url_model
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/apmodel/{model}'.format(zoneId=url_zoneId,id=url_id,model=url_model))
        

    def rkszones_update_hotspot(self, url_zoneId, url_id, location_name=None, name=None, portalCustomization_language=None, smartClientSupport=None, portalCustomization_termsAndConditionsText=None, walledGardens=None, userSession_gracePeriodInMin=None, portalCustomization_title=None, portalCustomization_logo=None, portalUrl=None, redirect_url=None, portalCustomization_termsAndConditionsRequired=None, smartClientInfo=None, macAddressFormat=None, location_id=None, userSession_timeoutInMin=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        portalCustomization_logo (String)  : logo
        portalCustomization_termsAndConditionsRequired (Boolean)  : Terms and conditions is required or not
        portalCustomization_termsAndConditionsText (String)  : Terms and conditions text
        portalCustomization_language : ""
        portalCustomization_title (String)  : Title
        name (String)  : Name of the Hotspot
        walledGardens (String)  : Walled garden map set of the Hotspot
        smartClientSupport (Enum)  : Smart client support of the Hotspot
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        location_id (String)  : Portal location id
        location_name (String)  : Portal location name
        smartClientInfo (String)  : Smart client info of the Hotspot
        portalUrl (String)  : Portal URL of the Hotspot
        macAddressFormat (Integer)  : mac address format of redirection
        description (String)  : Description of the Hotspot
        
        Robot Format :
        Rkszones Update Hotspot    url_zoneId    url_id
        '''
        
        data={"redirect":{"url" : redirect_url},"portalCustomization":{"logo" : portalCustomization_logo,"termsAndConditionsRequired" : portalCustomization_termsAndConditionsRequired,"termsAndConditionsText" : portalCustomization_termsAndConditionsText,"language" : portalCustomization_language,"title" : portalCustomization_title},"name" : name,"walledGardens":[ walledGardens],"smartClientSupport" : smartClientSupport,"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"location":{"id" : location_id,"name" : location_name},"smartClientInfo" : smartClientInfo,"portalUrl" : portalUrl,"macAddressFormat" : macAddressFormat,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/portals/hotspot/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_delete_usb_software_package(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Usb Software Package    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/usbsoftware/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_by_zone_id(self, name, url_zoneId, whitelist_mac, clientIsolationAutoEnabled, whitelist_description, whitelist_ip, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Client Isolation Whitelist name
        whitelist_ip (String)  : Client Entry ip
        whitelist_mac (String)  : Client Entry Mac
        whitelist_description (String)  : Client Entry description
        clientIsolationAutoEnabled (Boolean)  : Client Isolation Auto Enable
        
        Optional Params  :
        description (String)  : Client Isolation Whitelist description
        
        Robot Format :
        Rkszones Create By Zone Id    url_zoneId    name    whitelist_ip    whitelist_mac    whitelist_description    clientIsolationAutoEnabled
        '''
        
        data={"whitelist":[{"ip" : whitelist_ip,"mac" : whitelist_mac,"description" : whitelist_description}],"clientIsolationAutoEnabled" : clientIsolationAutoEnabled,"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/clientIsolationWhitelist'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_modify_block_client(self, url_zoneId, url_id, mac=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        mac (String)  : MAC of the Block Client
        description (String)  : Description of the Block Client
        
        Robot Format :
        Rkszones Modify Block Client    url_zoneId    url_id
        '''
        
        data={"mac" : mac,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/blockClient/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_delete_client_isolation_whitelist(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Client Isolation Whitelist    url_id
        '''
        
        response = self.session.delete('/rkszones/clientIsolationWhitelist/{id}'.format(id=url_id))
        

    def rkszones_update_device_policy(self, url_zoneId, url_id, rule_action=None, name=None, rule_downlink=None, rule_vlan=None, defaultAction=None, rule_uplink=None, rule_deviceType=None, rule_description=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        defaultAction (Enum)  : defaultAction of the device policy cofig
        name (String)  : name of the device policy cofig
        rule_description (String)  : description of the device policy rule
        rule_vlan (Integer)  : VLAN Members of the ethernet port profile
        rule_downlink (Integer)  : downlink rate Limiting of the device policy rule, rate unit is mbps, value must include be 0, 0.10, 0.25, 0.50, 0.75, 1.00, 1.25,1.50, 1.75, 2.00, 2.25, 2.50, 2.75, 3.00, 3.20, 3.50, 3.75, 4.00, 4.25, 4.50, 4.75, 5.00, 5.25, 5.50, 5.75, 6.00, 6.25, 6.50, 6.75,  7.00, 7.25, 7.50, 7.75, 8.00, 8.25, 8.50, 8.75,  9.00, 9.25, 9.50, 9.75,  10.00, 10.25, 10.50, 10.75, 11.00, 11.25, 11.50, 11.75, 12.00, 12.25, 12.50, 12.75, 13.00, 13.25, 13.50, 13.75, 14.00, 14.25, 14.50, 14.75, 15.00, 15.25, 15.50, 15.75, 16.00, 16.25, 16.50, 16.75, 17.00, 17.25, 17.50, 17.75, 18.00, 18.25, 18.50, 18.75, 19.00, 19.25, 19.50, 19.75, 20.00
        rule_deviceType (Enum)  : deviceType of the device policy rule
        rule_action (Enum)  : defaultAction of the device policy cofig
        rule_uplink (Integer)  : uplink rate Limiting of the device policy rule, rate unit is mbps, value must include be 0, 0.10, 0.25, 0.50, 0.75, 1.00, 1.25,1.50, 1.75, 2.00, 2.25, 2.50, 2.75, 3.00, 3.20, 3.50, 3.75, 4.00, 4.25, 4.50, 4.75, 5.00, 5.25, 5.50, 5.75, 6.00, 6.25, 6.50, 6.75,  7.00, 7.25, 7.50, 7.75, 8.00, 8.25, 8.50, 8.75,  9.00, 9.25, 9.50, 9.75,  10.00, 10.25, 10.50, 10.75, 11.00, 11.25, 11.50, 11.75, 12.00, 12.25, 12.50, 12.75, 13.00, 13.25, 13.50, 13.75, 14.00, 14.25, 14.50, 14.75, 15.00, 15.25, 15.50, 15.75, 16.00, 16.25, 16.50, 16.75, 17.00, 17.25, 17.50, 17.75, 18.00, 18.25, 18.50, 18.75, 19.00, 19.25, 19.50, 19.75, 20.00 
        description (String)  : description of the device policy cofig
        
        Robot Format :
        Rkszones Update Device Policy    url_zoneId    url_id
        '''
        
        data={"defaultAction" : defaultAction,"name" : name,"rule":[{"description" : rule_description,"vlan" : rule_vlan,"downlink" : rule_downlink,"deviceType" : rule_deviceType,"action" : rule_action,"uplink" : rule_uplink}],"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/devicePolicy/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_update_ldap_server(self, url_zoneId, url_id, baseDomainName=None, keyAttribute=None, name=None, searchFilter=None, ip=None, description=None, password=None, port=None, adminDomainName=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        baseDomainName (String)  : Base domain name
        password (String)  : Admin password
        name (String)  : Name of the LDAP server
        searchFilter (String)  : Search filter
        ip (String)  : IP address
        keyAttribute (String)  : Key attribute
        port (Integer)  : Port
        adminDomainName (String)  : Admin domain name
        description (String)  : Description of the LDAP server
        
        Robot Format :
        Rkszones Update Ldap Server    url_zoneId    url_id
        '''
        
        data={"baseDomainName" : baseDomainName,"password" : password,"name" : name,"searchFilter" : searchFilter,"ip" : ip,"keyAttribute" : keyAttribute,"port" : port,"adminDomainName" : adminDomainName,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/aaa/ldap/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_get_dhcp_site_config_aps(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dhcp Site Config Aps    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/dhcpSite/dhcpSiteConfig/siteAps'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_get_hotspot_portals(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Hotspot Portals    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/portals/hotspot'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_delete_dpsk_info_by_id(self, url_zoneId, url_id, idList=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Rkszones Delete Dpsk Info By Id    url_zoneId    url_id
        '''
        
        data={"idList":[ idList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/{id}/dpsk'.format(zoneId=url_zoneId,id=url_id),jdata)
        return response
        

    def rkszones_get_ap_firmware_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ap Firmware List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/apFirmware'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_disable_attribute_background_scanning50(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Background Scanning50    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/backgroundScanning50'.format(id=url_id))
        

    def rkszones_get_ap_group(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ap Group    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/apgroups/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_get_dpsk_info_by_zone(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dpsk Info By Zone    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/dpsk'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_create_device_policy(self, defaultAction, url_zoneId, name, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : name of the device policy cofig
        defaultAction (Enum)  : defaultAction of the device policy cofig
        
        Optional Params  :
        description (String)  : description of the device policy cofig
        
        Robot Format :
        Rkszones Create Device Policy    url_zoneId    name    defaultAction
        '''
        
        data={"defaultAction" : defaultAction,"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/devicePolicy'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_wlan_scheduler(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wlan Scheduler    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlanSchedulers/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_get_active_directory_server(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Active Directory Server    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/aaa/ad/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_update_hotspot20_wlan_profile(self, url_zoneId, url_id, signupSsid_id=None, defaultIdentityProvider_name=None, connectionCapabilities_portNumber=None, identityProviders_id=None, connectionCapabilities_status=None, customConnectionCapabilities_protocolNumber=None, operator_id=None, description=None, customConnectionCapabilities_status=None, connectionCapabilities_protocolNumber=None, ipv4AddressType=None, connectionCapabilities_protocolName=None, customConnectionCapabilities_portNumber=None, internetOption=None, signupSsid_name=None, name=None, accessNetworkType=None, customConnectionCapabilities_protocolName=None, defaultIdentityProvider_id=None, operator_name=None, identityProviders_name=None, ipv6AddressType=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        name (String)  : Name of the Hotspot 2.0 WLAN profile
        connectionCapabilities_status (Enum)  : Status of connection capability
        connectionCapabilities_protocolName (String)  : Protocol aame of connection capability, cannot be modified
        connectionCapabilities_portNumber (Integer)  : Port number of connection capability, cannot be modified
        connectionCapabilities_protocolNumber (Integer)  : Protocol number of connection capability, cannot be modified
        accessNetworkType (Enum)  : Access network type of the Hotspot 2.0 WLAN profile
        ipv4AddressType (Enum)  : IPv4 address type of the Hotspot 2.0 Wlan profile
        signupSsid_id : ""
        signupSsid_name : ""
        defaultIdentityProvider_id : ""
        defaultIdentityProvider_name : ""
        operator_id : ""
        operator_name : ""
        ipv6AddressType (Enum)  : IPv6 address type of the Hotspot 2.0 Wlan profile
        customConnectionCapabilities_status (Enum)  : Status of connection capability
        customConnectionCapabilities_protocolName (String)  : Protocol aame of connection capability
        customConnectionCapabilities_portNumber (Integer)  : Port number of connection capability
        customConnectionCapabilities_protocolNumber (Integer)  : Protocol number of connection capability
        internetOption (Boolean)  : Internet option of the Hotspot 2.0 WLAN profile
        identityProviders_id : ""
        identityProviders_name : ""
        description (String)  : Description of the Hotspot 2.0 WLAN profile
        
        Robot Format :
        Rkszones Update Hotspot20 Wlan Profile    url_zoneId    url_id
        '''
        
        data={"name" : name,"connectionCapabilities":[{"status" : connectionCapabilities_status,"protocolName" : connectionCapabilities_protocolName,"portNumber" : connectionCapabilities_portNumber,"protocolNumber" : connectionCapabilities_protocolNumber}],"accessNetworkType" : accessNetworkType,"ipv4AddressType" : ipv4AddressType,"signupSsid":{"id" : signupSsid_id,"name" : signupSsid_name},"defaultIdentityProvider":{"id" : defaultIdentityProvider_id,"name" : defaultIdentityProvider_name},"operator":{"id" : operator_id,"name" : operator_name},"ipv6AddressType" : ipv6AddressType,"customConnectionCapabilities":[{"status" : customConnectionCapabilities_status,"protocolName" : customConnectionCapabilities_protocolName,"portNumber" : customConnectionCapabilities_portNumber,"protocolNumber" : customConnectionCapabilities_protocolNumber}],"internetOption" : internetOption,"identityProviders":[{"id" : identityProviders_id,"name" : identityProviders_name}],"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/hs20s/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_disable_wlan_attribute_v3_since(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Attribute V3 Since    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlans/{id}/dnsServerProfile'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_update_ap_firmware(self, url_zoneId, firmwareVersion=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        firmwareVersion (String)  : new version of the AP firmare
        
        Robot Format :
        Rkszones Update Ap Firmware    url_zoneId
        '''
        
        data={"firmwareVersion" : firmwareVersion}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/rkszones/{zoneId}/apFirmware'.format(zoneId=url_zoneId),jdata)
        

    def rkszones_get_wechat(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wechat    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/portals/wechat/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_modify_dhcp_profile(self, subnetNetworkIp, name, url_zoneId, vlanId, poolEndIp, leaseTimeMinutes, subnetMask, url_id, leaseTimeHours, poolStartIp, secondaryDnsIp=None, primaryDnsIp=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        name (String)  : Name of the DHCP Profile
        vlanId (Integer)  : VLAN ID of the DHCP Profile
        subnetNetworkIp (String)  : Subnet Network IP of the DHCP Profile
        subnetMask (String)  : Subnet Mask of the DHCP Profile
        poolStartIp (String)  : Pool Starting IP of the DHCP Profile
        poolEndIp (String)  : Pool Ending IP of the DHCP Profile
        leaseTimeHours (Integer)  : Lease time in hours of the DHCP Profile
        leaseTimeMinutes (Integer)  : Lease time in minutes of the DHCP Profile
        
        Optional Params  :
        secondaryDnsIp (String)  : Secondary DNS IP of the DHCP Profile
        primaryDnsIp (String)  : Primany DNS IP of the DHCP Profile
        description (String)  : Description of the DHCP Profile
        
        Robot Format :
        Rkszones Modify Dhcp Profile    url_zoneId    url_id    name    vlanId    subnetNetworkIp    subnetMask    poolStartIp    poolEndIp    leaseTimeHours    leaseTimeMinutes
        '''
        
        data={"name" : name,"secondaryDnsIp" : secondaryDnsIp,"primaryDnsIp" : primaryDnsIp,"vlanId" : vlanId,"poolEndIp" : poolEndIp,"leaseTimeMinutes" : leaseTimeMinutes,"subnetMask" : subnetMask,"subnetNetworkIp" : subnetNetworkIp,"leaseTimeHours" : leaseTimeHours,"poolStartIp" : poolStartIp,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/dhcpProfile/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_get(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get    url_id
        '''
        
        response = self.session.get('/rkszones/{id}'.format(id=url_id))
        return response
        

    def rkszones_create_wlan_guest_access(self, authServiceOrProfile_locationDeliveryEnabled, authServiceOrProfile_throughController, name, url_zoneId, authServiceOrProfile_id, authServiceOrProfile_name, portalServiceProfile_id, portalServiceProfile_name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        authServiceOrProfile_locationDeliveryEnabled (Boolean)  : RFC5580 location delivery support
        authServiceOrProfile_id (String)  : Identifier of the authentication service or profile. At least one ID or name is required in the request.
        authServiceOrProfile_throughController (Boolean)  : Indicates whether authentication messages were sent through the controller or not
        authServiceOrProfile_name (String)  : Name of the authentication service or profile. At least one ID or name is required in the request.
        portalServiceProfile_id : ""
        portalServiceProfile_name : ""
        
        Optional Params  :
        description (String)  : Description of the WLAN
        hessid (String)  : HESSID of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Guest Access    url_zoneId    name    ssid    authServiceOrProfile_locationDeliveryEnabled    authServiceOrProfile_id    authServiceOrProfile_throughController    authServiceOrProfile_name    portalServiceProfile_id    portalServiceProfile_name
        '''
        
        data={"ssid" : ssid,"description" : description,"name" : name,"portalServiceProfile":{"id" : portalServiceProfile_id,"name" : portalServiceProfile_name},"hessid" : hessid,"authServiceOrProfile":{"locationDeliveryEnabled" : authServiceOrProfile_locationDeliveryEnabled,"id" : authServiceOrProfile_id,"throughController" : authServiceOrProfile_throughController,"name" : authServiceOrProfile_name}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/guest'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_domain_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Domain List    
        '''
        
        response = self.session.get('/rkszones/domains')
        return response
        

    def rkszones_update_dpsk_config(self, url_zoneId, url_id, url_dpskId, userName=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_dpskId : ""
        
        Optional Params  :
        userName (String)  : User Name of DPSK
        
        Robot Format :
        Rkszones Update Dpsk Config    url_zoneId    url_id    url_dpskId
        '''
        
        data={"userName" : userName}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/wlans/{id}/dpsk/{dpskId}'.format(zoneId=url_zoneId,id=url_id,dpskId=url_dpskId),jdata)
        

    def rkszones_create_active_directory_server(self, port, url_zoneId, globalCatalogEnabled, name, ip, description=None, password=None, adminDomainName=None, windowsDomainName=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the active directory server
        ip (String)  : IP address
        port (Integer)  : Port
        globalCatalogEnabled (Boolean)  : Enable global catalog support
        
        Optional Params  :
        windowsDomainName (String)  : Windows domain name
        password (String)  : Admin password
        adminDomainName (String)  : Admin domain name
        description (String)  : Description of the active directory server
        
        Robot Format :
        Rkszones Create Active Directory Server    url_zoneId    name    ip    port    globalCatalogEnabled
        '''
        
        data={"name" : name,"ip" : ip,"windowsDomainName" : windowsDomainName,"globalCatalogEnabled" : globalCatalogEnabled,"password" : password,"port" : port,"adminDomainName" : adminDomainName,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/aaa/ad'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_dhcp_profile_by_profile_id(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dhcp Profile By Profile Id    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/dhcpSite/dhcpProfile/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_disable_attribute_background_scanning24(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Background Scanning24    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/backgroundScanning24'.format(id=url_id))
        

    def rkszones_get_usb_software_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Usb Software List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/usbsoftware'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_disable_ap_group_override_v3_since_wifi24_tx_power(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi24 Tx Power    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi24/txPower'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_domain(self, name, parentDomainId=None, domainType=None, description=None):
        '''
        Mandatory Params :
        name (String)  : domain name
        
        Optional Params  :
        parentDomainId (String)  : parent domain id
        description (String)  : Description of the domain name
        domainType (String)  : domain type
        
        Robot Format :
        Rkszones Create Domain    name
        '''
        
        data={"parentDomainId" : parentDomainId,"description" : description,"domainType" : domainType,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/domains',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_zone_associate_usb_software_by_model(self, url_zoneId, url_modelName):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_modelName : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Zone Associate Usb Software By Model    url_zoneId    url_modelName
        '''
        
        response = self.session.get('/rkszones/{zoneId}/usbsoftware/{modelName}'.format(zoneId=url_zoneId,modelName=url_modelName))
        return response
        

    def rkszones_update_delete_expired_dpsk(self, url_zoneId, deleteExpiredDpsk=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        deleteExpiredDpsk (Enum)  : Delete expired DPSK interval of the Zone.
        
        Robot Format :
        Rkszones Update Delete Expired Dpsk    url_zoneId
        '''
        
        data={"deleteExpiredDpsk" : deleteExpiredDpsk}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/rkszones/{zoneId}/deleteExpiredDpsk'.format(zoneId=url_zoneId),jdata)
        

    def rkszones_update_wlan(self, url_zoneId, url_id, advancedOptions_uplinkRate=None, accountingServiceOrProfile_throughController=None, caleaEnabled=None, coreTunnelProfile_id=None, vlan_coreQinQEnabled=None, portalServiceProfile_id=None, advancedOptions_hideSsidEnabled=None, vlan_accessVlan=None, advancedOptions_support80211dEnabled=None, encryption_keyIndex=None, authServiceOrProfile_id=None, dnsServerProfile_id=None, defaultUserTrafficProfile_name=None, hessid=None, accountingServiceOrProfile_id=None, advancedOptions_clientIdleTimeoutSec=None, qosMaps_high=None, name=None, bypassCNA=None, advancedOptions_clientIsolationEnabled=None, hotspot20Profile_id=None, advancedOptions_bandBalancing=None, advancedOptions_maxClientsPerRadio=None, advancedOptions_downlinkRate=None, schedule_name=None, schedule_id=None, hotspot20Profile_name=None, advancedOptions_clientFingerprintingEnabled=None, dpsk_expiration=None, advancedOptions_mgmtTxRateMbps=None, accountingServiceOrProfile_interimUpdateMin=None, vlan_vlanPooling_name=None, ssid=None, advancedOptions_priority=None, portalServiceProfile_name=None, l2ACL_name=None, accessTunnelType=None, advancedOptions_clientIsolationWhitelist_name=None, encryption_keyInHex=None, diffServProfile_name=None, encryption_mobilityDomainId=None, dpsk_dpskFromType=None, advancedOptions_unauthClientStatsEnabled=None, macAuth_customizedPassword=None, dpsk_dpskType=None, radiusOptions_nasIpUserDefined=None, qosMaps_enable=None, advancedOptions_clientLoadBalancingEnabled=None, encryption_passphrase=None, radiusOptions_calledStaIdType=None, advancedOptions_ofdmOnlyEnabled=None, qosMaps_low=None, advancedOptions_downlinkEnabled=None, radiusOptions_nasIpType=None, devicePolicy_name=None, defaultUserTrafficProfile_id=None, radiusOptions_customizedNasId=None, qosMaps_excepts=None, accountingServiceOrProfile_name=None, coreTunnelProfile_name=None, dpsk_length=None, advancedOptions_pmkCachingEnabled=None, advancedOptions_dhcpOption82Enabled=None, vlan_coreSVlan=None, advancedOptions_okcEnabled=None, diffServProfile_id=None, accountingServiceOrProfile_accountingDelayEnabled=None, advancedOptions_uplinkEnabled=None, macAuth_macAuthMacFormat=None, radiusOptions_nasRequestTimeoutSec=None, advancedOptions_support80211kEnabled=None, encryption_support80211rEnabled=None, coreTunnelProfile_operatorRealm=None, authServiceOrProfile_locationDeliveryEnabled=None, advancedOptions_dhcp82Format=None, encryption_algorithm=None, advancedOptions_dgafEnabled=None, radiusOptions_nasReconnectPrimaryMin=None, encryption_mfp=None, authServiceOrProfile_throughController=None, advancedOptions_clientIsolationWhitelist_id=None, operatorRealm=None, advancedOptions_avcEnabled=None, advancedOptions_proxyARPEnabled=None, dpsk_dpskEnabled=None, coreTunnelProfile_type=None, awsExtNasIPEnable=None, accountingServiceOrProfile_accountingTTGSessionEnabled=None, description=None, dpTunnelNatEnabled=None, radiusOptions_nasMaxRetry=None, advancedOptions_bssMinRateMbps=None, qosMaps_priority=None, advancedOptions_forceClientDHCPTimeoutSec=None, radiusOptions_nasIdType=None, vlan_aaaVlanOverride=None, schedule_type=None, authServiceOrProfile_name=None, encryption_method=None, l2ACL_id=None, devicePolicy_id=None, vlan_vlanPooling_id=None, dnsServerProfile_name=None, awsVenueEnable=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        caleaEnabled (Boolean)  : DP CALEA Server Enabled
        coreTunnelProfile_operatorRealm (String)  : Operator realm, deprecated coreTunnelProfile.operatorRealm from version3.1, prepare remove
        coreTunnelProfile_type (Enum)  : Tunnel type
        coreTunnelProfile_id (String)  : Identifier of the forwarding profile. At least one ID or name is required in the request.
        coreTunnelProfile_name (String)  : Name of the forwarding profile. At least one ID or name is required in the request.
        accountingServiceOrProfile_accountingTTGSessionEnabled (Boolean)  : Indicates whether accounting for TTG sessions is to enabled
        accountingServiceOrProfile_name (String)  : Accounting service or profile name. At least one ID or name is required in the request.
        accountingServiceOrProfile_interimUpdateMin (Integer)  : Interval (in minutes) for sending interim updates
        accountingServiceOrProfile_accountingDelayEnabled (Boolean)  : Indicates whether accounting delay time is enabled
        accountingServiceOrProfile_id (String)  : Accounting service or profile ID. At least one ID or name is required in the request.
        accountingServiceOrProfile_throughController (Boolean)  : Indicates whether accounting messages were sent through the controller
        portalServiceProfile_id : ""
        portalServiceProfile_name : ""
        dpsk_length (Integer)  : Length of DPSK key
        dpsk_expiration (Enum)  : Expiration of DPSK key
        dpsk_dpskType (Enum)  : Type of DPSK key
        dpsk_dpskEnabled (Boolean)  : DPSK enabled
        dpsk_dpskFromType (Enum)  : Type of expiration start from
        operatorRealm (String)  : Operator realm, operatorRealm only supports coreTunnelProfile type is authServiceOrProfile.locationDeliveryEnabled is true 
        defaultUserTrafficProfile_id : ""
        defaultUserTrafficProfile_name : ""
        ssid (String)  : SSID of the WLAN
        diffServProfile_id : ""
        diffServProfile_name : ""
        devicePolicy_id : ""
        devicePolicy_name : ""
        encryption_mobilityDomainId (Integer)  : mobility Domain Id.
        encryption_algorithm (Enum)  : Encryption algorithm. This only applies to WPA2 and WPA mixed mode.
        encryption_mfp (Enum)  : Management frame protection. This only applies to WPA2 + AES
        encryption_support80211rEnabled (Boolean)  : Enable 802.11r Fast BSS Transition, fast Romaing.
        encryption_keyInHex (String)  : Key in hex format. This only applies to WEP64 and WEP128.
        encryption_passphrase (String)  : Passphrase. This only applies to WPA2 and WPA mixed mode.
        encryption_method (Enum)  : Encryption method
        encryption_keyIndex (Integer)  : Key index. This only applies to WEP64 and WEP128.
        accessTunnelType (Enum)  : Access tunnel type of the WLAN. APLBO means AP local breakout, RuckusGRE means RuckusGRE tunnel to the data plane, and SoftGRE means AP direct SoftGRE tunnel
        awsExtNasIPEnable (Boolean)  : Aws ExtNasIP Enable
        hotspot20Profile_id : ""
        hotspot20Profile_name : ""
        macAuth_macAuthMacFormat (Enum)  : MAC address format. The default format is 0010a42319c0 and the 802.1X format is 00-10-A4-23-19-C0.
        macAuth_customizedPassword (String)  : User defined password. When this field is set to an empty string, the MAC address is used as password.
        dnsServerProfile_id : ""
        dnsServerProfile_name : ""
        hessid (String)  : HESSID of the WLAN
        authServiceOrProfile_locationDeliveryEnabled (Boolean)  : RFC5580 location delivery support
        authServiceOrProfile_id (String)  : Identifier of the authentication service or profile. At least one ID or name is required in the request.
        authServiceOrProfile_throughController (Boolean)  : Indicates whether authentication messages were sent through the controller or not
        authServiceOrProfile_name (String)  : Name of the authentication service or profile. At least one ID or name is required in the request.
        description (String)  : Description of the WLAN
        schedule_type (Enum)  : Type of WLAN schedule
        schedule_id (String)  : Identifier of the schedule profile. At least one ID or name is required in the request.
        schedule_name (String)  : Name of the schedule profile. At least one ID or name is required in the request.
        dpTunnelNatEnabled (Boolean)  : DP Tunnel NAT Enabled
        vlan_coreQinQEnabled (Boolean)  : Indicates whether Q-in-Q is allowed at the core network or not
        vlan_coreSVlan (Integer)  : Core SVLAN ID. This only applies when core Q-in-Q is enabled
        vlan_aaaVlanOverride (Boolean)  : Indicates whether the AAA VLAN settings can be overriden or not
        vlan_vlanPooling_id : ""
        vlan_vlanPooling_name : ""
        vlan_accessVlan (Integer)  : Access VLAN ID
        qosMaps_priority (Integer)  : Priority
        qosMaps_high (Integer)  : DSCP range - high
        qosMaps_enable (Boolean)  : Enabled or disabled
        qosMaps_low (Integer)  : DSCP range - low
        qosMaps_excepts : ""
        name (String)  : Name of the WLAN
        bypassCNA (Boolean)  : By pass Capitive Network Assitance
        radiusOptions_nasMaxRetry (Integer)  : NAS request maximum retry
        radiusOptions_nasRequestTimeoutSec (Integer)  : NAS request timeout in seconds
        radiusOptions_customizedNasId (String)  : User defined NAS ID
        radiusOptions_nasIpUserDefined (String)  : User-defined NAS IP
        radiusOptions_calledStaIdType (Enum)  : Called station ID type
        radiusOptions_nasIdType (Enum)  : NAS ID type
        radiusOptions_nasIpType (Enum)  : NAS IP type
        radiusOptions_nasReconnectPrimaryMin (Integer)  : NAS reconnect primary time in minutes
        l2ACL_id : ""
        l2ACL_name : ""
        advancedOptions_dhcpOption82Enabled (Boolean)  : Indicates whether DCHP Option 82 is enabled or disabled
        advancedOptions_pmkCachingEnabled (Boolean)  : Indicator of whether PKM caching support is enabled or disabled
        advancedOptions_dhcp82Format (Enum)  : DHCP Option 82 format
        advancedOptions_uplinkEnabled (Boolean)  : SSID Rate Limiting uplink enabled.
        advancedOptions_mgmtTxRateMbps (Enum)  : Management TX rate (mbps)
        advancedOptions_dgafEnabled (Boolean)  : Indicates whether dgaf is enabled or disabled
        advancedOptions_clientFingerprintingEnabled (Boolean)  : Indicates whether client fingerprinting is enabled or disabled
        advancedOptions_downlinkEnabled (Boolean)  : SSID Rate Limiting downlink enabled.
        advancedOptions_maxClientsPerRadio (Integer)  : Maximum number of clients per radio
        advancedOptions_priority (Enum)  : Priority of the WLAN
        advancedOptions_clientIdleTimeoutSec (Integer)  : Client idle timeout in seconds
        advancedOptions_hideSsidEnabled (Boolean)  : Indicates whether the SSID is hidden or broadcast
        advancedOptions_forceClientDHCPTimeoutSec (Enum)  : Force DHCP disconnects the client if the client does not obtain a valid IP address within the timeout peroid. To disable force DHCP, set this value to zero (0).
        advancedOptions_bandBalancing (Enum)  : Indicates whether band balancing is enabled or disabled
        advancedOptions_okcEnabled (Boolean)  : Indicator of whether OKC support is enabled or disabled
        advancedOptions_clientLoadBalancingEnabled (Boolean)  : Indicates whether Client Load Balancing is enabled or disabled
        advancedOptions_support80211kEnabled (Boolean)  : Indicates whether support for 802.11k is enabled or disabled
        advancedOptions_avcEnabled (Boolean)  : Indicator of whether ARC support is enabled or disabled
        advancedOptions_clientIsolationWhitelist_id : ""
        advancedOptions_clientIsolationWhitelist_name : ""
        advancedOptions_bssMinRateMbps (Enum)  : BSS minimum rate (mbps)
        advancedOptions_ofdmOnlyEnabled (Boolean)  : Indicates whether OFDM only is enabled or disabled
        advancedOptions_downlinkRate (Integer)  : SSID Rate Limiting downlink.
        advancedOptions_support80211dEnabled (Boolean)  : Indicates whether support for 802.11d is enabled or disabled
        advancedOptions_clientIsolationEnabled (Boolean)  : Indicates whether wireless client isolation is enabled or disabled
        advancedOptions_unauthClientStatsEnabled (Boolean)  : Indicates whether to send statistics of unauthorized clients or not
        advancedOptions_uplinkRate (Integer)  : SSID Rate Limiting uplink.
        advancedOptions_proxyARPEnabled (Boolean)  : Indicates whether proxy ARP is enabled or disabled
        awsVenueEnable (Boolean)  : Aws Venue Enable
        
        Robot Format :
        Rkszones Update Wlan    url_zoneId    url_id
        '''
        
        data={"caleaEnabled" : caleaEnabled,"coreTunnelProfile":{"operatorRealm" : coreTunnelProfile_operatorRealm,"type" : coreTunnelProfile_type,"id" : coreTunnelProfile_id,"name" : coreTunnelProfile_name},"accountingServiceOrProfile":{"accountingTTGSessionEnabled" : accountingServiceOrProfile_accountingTTGSessionEnabled,"name" : accountingServiceOrProfile_name,"interimUpdateMin" : accountingServiceOrProfile_interimUpdateMin,"accountingDelayEnabled" : accountingServiceOrProfile_accountingDelayEnabled,"id" : accountingServiceOrProfile_id,"throughController" : accountingServiceOrProfile_throughController},"portalServiceProfile":{"id" : portalServiceProfile_id,"name" : portalServiceProfile_name},"dpsk":{"length" : dpsk_length,"expiration" : dpsk_expiration,"dpskType" : dpsk_dpskType,"dpskEnabled" : dpsk_dpskEnabled,"dpskFromType" : dpsk_dpskFromType},"operatorRealm" : operatorRealm,"defaultUserTrafficProfile":{"id" : defaultUserTrafficProfile_id,"name" : defaultUserTrafficProfile_name},"ssid" : ssid,"diffServProfile":{"id" : diffServProfile_id,"name" : diffServProfile_name},"devicePolicy":{"id" : devicePolicy_id,"name" : devicePolicy_name},"encryption":{"mobilityDomainId" : encryption_mobilityDomainId,"algorithm" : encryption_algorithm,"mfp" : encryption_mfp,"support80211rEnabled" : encryption_support80211rEnabled,"keyInHex" : encryption_keyInHex,"passphrase" : encryption_passphrase,"method" : encryption_method,"keyIndex" : encryption_keyIndex},"accessTunnelType" : accessTunnelType,"awsExtNasIPEnable" : awsExtNasIPEnable,"hotspot20Profile":{"id" : hotspot20Profile_id,"name" : hotspot20Profile_name},"macAuth":{"macAuthMacFormat" : macAuth_macAuthMacFormat,"customizedPassword" : macAuth_customizedPassword},"dnsServerProfile":{"id" : dnsServerProfile_id,"name" : dnsServerProfile_name},"hessid" : hessid,"authServiceOrProfile":{"locationDeliveryEnabled" : authServiceOrProfile_locationDeliveryEnabled,"id" : authServiceOrProfile_id,"throughController" : authServiceOrProfile_throughController,"name" : authServiceOrProfile_name},"description" : description,"schedule":{"type" : schedule_type,"id" : schedule_id,"name" : schedule_name},"dpTunnelNatEnabled" : dpTunnelNatEnabled,"vlan":{"coreQinQEnabled" : vlan_coreQinQEnabled,"coreSVlan" : vlan_coreSVlan,"aaaVlanOverride" : vlan_aaaVlanOverride,"vlanPooling":{"id" : vlan_vlanPooling_id,"name" : vlan_vlanPooling_name},"accessVlan" : vlan_accessVlan},"qosMaps":[{"priority" : qosMaps_priority,"high" : qosMaps_high,"enable" : qosMaps_enable,"low" : qosMaps_low,"excepts":[ qosMaps_excepts]}],"name" : name,"bypassCNA" : bypassCNA,"radiusOptions":{"nasMaxRetry" : radiusOptions_nasMaxRetry,"nasRequestTimeoutSec" : radiusOptions_nasRequestTimeoutSec,"customizedNasId" : radiusOptions_customizedNasId,"nasIpUserDefined" : radiusOptions_nasIpUserDefined,"calledStaIdType" : radiusOptions_calledStaIdType,"nasIdType" : radiusOptions_nasIdType,"nasIpType" : radiusOptions_nasIpType,"nasReconnectPrimaryMin" : radiusOptions_nasReconnectPrimaryMin},"l2ACL":{"id" : l2ACL_id,"name" : l2ACL_name},"advancedOptions":{"dhcpOption82Enabled" : advancedOptions_dhcpOption82Enabled,"pmkCachingEnabled" : advancedOptions_pmkCachingEnabled,"dhcp82Format" : advancedOptions_dhcp82Format,"uplinkEnabled" : advancedOptions_uplinkEnabled,"mgmtTxRateMbps" : advancedOptions_mgmtTxRateMbps,"dgafEnabled" : advancedOptions_dgafEnabled,"clientFingerprintingEnabled" : advancedOptions_clientFingerprintingEnabled,"downlinkEnabled" : advancedOptions_downlinkEnabled,"maxClientsPerRadio" : advancedOptions_maxClientsPerRadio,"priority" : advancedOptions_priority,"clientIdleTimeoutSec" : advancedOptions_clientIdleTimeoutSec,"hideSsidEnabled" : advancedOptions_hideSsidEnabled,"forceClientDHCPTimeoutSec" : advancedOptions_forceClientDHCPTimeoutSec,"bandBalancing" : advancedOptions_bandBalancing,"okcEnabled" : advancedOptions_okcEnabled,"clientLoadBalancingEnabled" : advancedOptions_clientLoadBalancingEnabled,"support80211kEnabled" : advancedOptions_support80211kEnabled,"avcEnabled" : advancedOptions_avcEnabled,"clientIsolationWhitelist":{"id" : advancedOptions_clientIsolationWhitelist_id,"name" : advancedOptions_clientIsolationWhitelist_name},"bssMinRateMbps" : advancedOptions_bssMinRateMbps,"ofdmOnlyEnabled" : advancedOptions_ofdmOnlyEnabled,"downlinkRate" : advancedOptions_downlinkRate,"support80211dEnabled" : advancedOptions_support80211dEnabled,"clientIsolationEnabled" : advancedOptions_clientIsolationEnabled,"unauthClientStatsEnabled" : advancedOptions_unauthClientStatsEnabled,"uplinkRate" : advancedOptions_uplinkRate,"proxyARPEnabled" : advancedOptions_proxyARPEnabled},"awsVenueEnable" : awsVenueEnable}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/wlans/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_disable_authentication_attribute(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Authentication Attribute    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/aaa/radius/{id}/secondary'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_modify_wechat(self, url_zoneId, url_id, dnatPortMapping_destPort=None, name=None, gracePeriod=None, whiteList=None, dnatDestination=None, blackList=None, authUrl=None, dnatPortMapping_sourcePort=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        name (String)  : Name of the wechat profile
        gracePeriod (Integer)  : Grace period of the wechat profile
        whiteList (String)  : White list of the wechat profile
        dnatDestination (String)  : DNAT destination of the wechat profile
        blackList (String)  : Black list of the wechat profile
        dnatPortMapping_sourcePort (Integer)  : Source port
        dnatPortMapping_destPort (Integer)  : Destination port
        authUrl (String)  : Authentication URL of the wechat profile
        description (String)  : Description of the wechat profile
        
        Robot Format :
        Rkszones Modify Wechat    url_zoneId    url_id
        '''
        
        data={"name" : name,"gracePeriod" : gracePeriod,"whiteList":[ whiteList],"dnatDestination" : dnatDestination,"blackList" : blackList,"dnatPortMapping":[{"sourcePort" : dnatPortMapping_sourcePort,"destPort" : dnatPortMapping_destPort}],"authUrl" : authUrl,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/portals/wechat/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_get_ap_group_associate_usb_software_by_model(self, url_zoneId, url_id, url_modelName):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_modelName : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ap Group Associate Usb Software By Model    url_zoneId    url_id    url_modelName
        '''
        
        response = self.session.get('/rkszones/{zoneId}/apgroups/{id}/usbsoftware/{modelName}'.format(zoneId=url_zoneId,id=url_id,modelName=url_modelName))
        return response
        

    def rkszones_disable_ap_group_override_v3_since_wifi50_tx_power(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi50 Tx Power    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi50/txPower'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_bonjour_gateway_policies(self, url_zoneId, name, description=None, bonjourPolicyRuleList_notes=None, bonjourPolicyRuleList_protocol=None, bonjourPolicyRuleList_bridgeService=None, bonjourPolicyRuleList_fromVlan=None, bonjourPolicyRuleList_toVlan=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the Bonjour Gateway Policy
        
        Optional Params  :
        bonjourPolicyRuleList_bridgeService (Enum)  : Bridge service
        bonjourPolicyRuleList_notes (String)  : Notes
        bonjourPolicyRuleList_protocol (String)  : protocol. This is only available when bridgeService is OTHER
        bonjourPolicyRuleList_toVlan (Integer)  : To VLAN
        bonjourPolicyRuleList_fromVlan (Integer)  : From VLAN
        description (String)  : Description of the Bonjour Gateway Policy
        
        Robot Format :
        Rkszones Create Bonjour Gateway Policies    url_zoneId    name
        '''
        
        data={"bonjourPolicyRuleList":[{"bridgeService" : bonjourPolicyRuleList_bridgeService,"notes" : bonjourPolicyRuleList_notes,"protocol" : bonjourPolicyRuleList_protocol,"toVlan" : bonjourPolicyRuleList_toVlan,"fromVlan" : bonjourPolicyRuleList_fromVlan}],"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/bounjourGateway/policies'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_delete_ap_group(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Ap Group    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_attribute_smart_monitor(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Smart Monitor    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/smartMonitor'.format(id=url_id))
        

    def rkszones_delete_wlan_group(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Wlan Group    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlangroups/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_web_authentication_portals(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Web Authentication Portals    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/portals/webauth'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_update_wlan_scheduler(self, url_zoneId, url_id, sat=None, description=None, wed=None, sun=None, thu=None, mon=None, fri=None, tue=None, name=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        name (String)  : Name of the WLAN schedule
        wed (String)  : schedules on Wednesday
        sun (String)  : Schedules on Sunday
        thu (String)  : Schedules on Thursday
        description (String)  : Description of the WLAN schedule
        tue (String)  : Schedules on Tuesday
        mon (String)  : Schedules on Monday
        fri (String)  : Schedules on Friday
        sat (String)  : Schedules on Saturday
        
        Robot Format :
        Rkszones Update Wlan Scheduler    url_zoneId    url_id
        '''
        
        data={"name" : name,"wed":[ wed],"sun":[ sun],"thu":[ thu],"description" : description,"tue":[ tue],"mon":[ mon],"fri":[ fri],"sat":[ sat]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/wlanSchedulers/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_create_dual(self, login_apLoginPassword, login_apLoginName, name, domainId=None, version=None, countryCode=None, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the zone
        login_apLoginName (String)  : User name of the AP administrator
        login_apLoginPassword (String)  : Password of the AP administrator
        
        Optional Params  :
        domainId (String)  : Identifier of the management domain to which the zone belongs
        countryCode (String)  : Country code of the zone
        version (String)  : AP firmware version of the zone
        description (String)  : Description of the zone
        
        Robot Format :
        Rkszones Create Dual    name    login_apLoginName    login_apLoginPassword
        '''
        
        data={"domainId" : domainId,"name" : name,"countryCode" : countryCode,"version" : version,"login":{"apLoginName" : login_apLoginName,"apLoginPassword" : login_apLoginPassword},"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/dual',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_hotspot20_venue_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Hotspot20 Venue Profile    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/hs20/venues/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_update_authentication_server(self, url_zoneId, url_id, primary_ip=None, description=None, secondary_ip=None, primary_port=None, primary_sharedSecret=None, secondary_port=None, secondary_sharedSecret=None, name=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        description (String)  : Description of the authentication server
        primary_ip (String)  : Server IP
        primary_port (Integer)  : Server port
        primary_sharedSecret (String)  : Server shared secrect
        name (String)  : Name of the authentication server
        secondary_ip (String)  : Server IP
        secondary_port (Integer)  : Server port
        secondary_sharedSecret (String)  : Server shared secrect
        
        Robot Format :
        Rkszones Update Authentication Server    url_zoneId    url_id
        '''
        
        data={"description" : description,"primary":{"ip" : primary_ip,"port" : primary_port,"sharedSecret" : primary_sharedSecret},"name" : name,"secondary":{"ip" : secondary_ip,"port" : secondary_port,"sharedSecret" : secondary_sharedSecret}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/aaa/radius/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_create_accounting_server(self, primary_port, url_zoneId, primary_sharedSecret, primary_ip, name, secondary_port=None, secondary_sharedSecret=None, description=None, secondary_ip=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the accounting server
        primary_ip (String)  : Server IP
        primary_port (Integer)  : Server port
        primary_sharedSecret (String)  : Server shared secrect
        
        Optional Params  :
        description (String)  : Description of the accounting server
        secondary_ip (String)  : Server IP
        secondary_port (Integer)  : Server port
        secondary_sharedSecret (String)  : Server shared secrect
        
        Robot Format :
        Rkszones Create Accounting Server    url_zoneId    name    primary_ip    primary_port    primary_sharedSecret
        '''
        
        data={"description" : description,"primary":{"ip" : primary_ip,"port" : primary_port,"sharedSecret" : primary_sharedSecret},"name" : name,"secondary":{"ip" : secondary_ip,"port" : secondary_port,"sharedSecret" : secondary_sharedSecret}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/aaa/accounting'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_wlan_zero_it(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Zero It    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlans/{id}/onlineSignupService/zoroITOnboarding'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_diff_serv(self, url_zoneId, name, uplinkDiffServ_uplinkEnable=None, description=None, preservedList=None, uplinkDiffServ_uplink=None, downlinkDiffServ_downlink=None, downlinkDiffServ_downlinkEnable=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the diffserv
        
        Optional Params  :
        downlinkDiffServ_downlink (String)  : Downlink
        downlinkDiffServ_downlinkEnable (Boolean)  : Downlink enable
        description (String)  : Description of the diffserv
        uplinkDiffServ_uplinkEnable (Boolean)  : Uplink enable
        uplinkDiffServ_uplink (String)  : Uplink
        preservedList (String)  : Preserved list
        
        Robot Format :
        Rkszones Create Diff Serv    url_zoneId    name
        '''
        
        data={"downlinkDiffServ":{"downlink" : downlinkDiffServ_downlink,"downlinkEnable" : downlinkDiffServ_downlinkEnable},"description" : description,"uplinkDiffServ":{"uplinkEnable" : uplinkDiffServ_uplinkEnable,"uplink" : uplinkDiffServ_uplink},"name" : name,"preservedList":[ preservedList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/diffserv'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_create_wlan_group(self, url_zoneId, name, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN group
        
        Optional Params  :
        description (String)  : Description of the WLAN group
        
        Robot Format :
        Rkszones Create Wlan Group    url_zoneId    name
        '''
        
        data={"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlangroups'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_hotspot(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Hotspot    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/portals/hotspot/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_create_hotspot20_wlan_profile(self, accessNetworkType, operator_id, name, url_zoneId, ipv4AddressType, defaultIdentityProvider_name, defaultIdentityProvider_id, operator_name, internetOption, ipv6AddressType, identityProviders_id=None, identityProviders_name=None, signupSsid_id=None, description=None, signupSsid_name=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the Hotspot 2.0 WLAN profile
        operator_id : ""
        operator_name : ""
        defaultIdentityProvider_id : ""
        defaultIdentityProvider_name : ""
        internetOption (Boolean)  : Internet option of the Hotspot 2.0 WLAN profile
        accessNetworkType (Enum)  : Access network type of the Hotspot 2.0 WLAN profile
        ipv4AddressType (Enum)  : IPv4 address type of the Hotspot 2.0 WLAN profile
        ipv6AddressType (Enum)  : IPv6 address type of the Hotspot 2.0 WLAN profile
        
        Optional Params  :
        signupSsid_id : ""
        signupSsid_name : ""
        identityProviders_id : ""
        identityProviders_name : ""
        description (String)  : Description of the Hotspot 2.0 WLAN profile
        
        Robot Format :
        Rkszones Create Hotspot20 Wlan Profile    url_zoneId    name    operator_id    operator_name    defaultIdentityProvider_id    defaultIdentityProvider_name    internetOption    accessNetworkType    ipv4AddressType    ipv6AddressType
        '''
        
        data={"name" : name,"accessNetworkType" : accessNetworkType,"ipv4AddressType" : ipv4AddressType,"signupSsid":{"id" : signupSsid_id,"name" : signupSsid_name},"defaultIdentityProvider":{"id" : defaultIdentityProvider_id,"name" : defaultIdentityProvider_name},"operator":{"id" : operator_id,"name" : operator_name},"ipv6AddressType" : ipv6AddressType,"internetOption" : internetOption,"identityProviders":[{"id" : identityProviders_id,"name" : identityProviders_name}],"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/hs20s'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_delete_diff_serv(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Diff Serv    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/diffserv/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_download_csv_sample(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Download Csv Sample    
        '''
        
        response = self.session.get('/rkszones/downloadDpskCsvSample')
        return response
        

    def rkszones_get_wlan_id_and_name_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Rkszones Get Wlan Id And Name List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/wlans/basicInfo/query',jdata)
        return response
        

    def rkszones_modify_bonjour_gateway_policies(self, url_zoneId, url_id, name=None, bonjourPolicyRuleList_notes=None, bonjourPolicyRuleList_protocol=None, bonjourPolicyRuleList_bridgeService=None, bonjourPolicyRuleList_fromVlan=None, bonjourPolicyRuleList_toVlan=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        bonjourPolicyRuleList_bridgeService (Enum)  : Bridge service
        bonjourPolicyRuleList_notes (String)  : Notes
        bonjourPolicyRuleList_protocol (String)  : protocol. This is only available when bridgeService is OTHER
        bonjourPolicyRuleList_toVlan (Integer)  : To VLAN
        bonjourPolicyRuleList_fromVlan (Integer)  : From VLAN
        name (String)  : Name of the Bonjour Gateway Policy
        description (String)  : Description of the Bonjour Gateway Policy
        
        Robot Format :
        Rkszones Modify Bonjour Gateway Policies    url_zoneId    url_id
        '''
        
        data={"bonjourPolicyRuleList":[{"bridgeService" : bonjourPolicyRuleList_bridgeService,"notes" : bonjourPolicyRuleList_notes,"protocol" : bonjourPolicyRuleList_protocol,"toVlan" : bonjourPolicyRuleList_toVlan,"fromVlan" : bonjourPolicyRuleList_fromVlan}],"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/bounjourGateway/policies/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_get_bonjour_gateway_policies_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Bonjour Gateway Policies List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/bounjourGateway/policies'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_disable_ap_group_override_wlan_group24(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Wlan Group24    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wlanGroup24'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_wlan_web_auth(self, authServiceOrProfile_locationDeliveryEnabled, authServiceOrProfile_throughController, name, url_zoneId, authServiceOrProfile_id, authServiceOrProfile_name, portalServiceProfile_id, portalServiceProfile_name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        authServiceOrProfile_locationDeliveryEnabled (Boolean)  : RFC5580 location delivery support
        authServiceOrProfile_id (String)  : Identifier of the authentication service or profile. At least one ID or name is required in the request.
        authServiceOrProfile_throughController (Boolean)  : Indicates whether authentication messages were sent through the controller or not
        authServiceOrProfile_name (String)  : Name of the authentication service or profile. At least one ID or name is required in the request.
        portalServiceProfile_id : ""
        portalServiceProfile_name : ""
        
        Optional Params  :
        description (String)  : Description of the WLAN
        hessid (String)  : HESSID of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Web Auth    url_zoneId    name    ssid    authServiceOrProfile_locationDeliveryEnabled    authServiceOrProfile_id    authServiceOrProfile_throughController    authServiceOrProfile_name    portalServiceProfile_id    portalServiceProfile_name
        '''
        
        data={"ssid" : ssid,"description" : description,"name" : name,"portalServiceProfile":{"id" : portalServiceProfile_id,"name" : portalServiceProfile_name},"hessid" : hessid,"authServiceOrProfile":{"locationDeliveryEnabled" : authServiceOrProfile_locationDeliveryEnabled,"id" : authServiceOrProfile_id,"throughController" : authServiceOrProfile_throughController,"name" : authServiceOrProfile_name}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/webauth'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_wlan_attribute_v1_since_l2_acl(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Attribute V1 Since L2 Acl    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlans/{id}/l2ACL'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_wlan_attribute_v2_since_diff_serv_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Attribute V2 Since Diff Serv Profile    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlans/{id}/diffServProfile'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_wlans(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wlans    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlans'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_disable_ap_group_override_channel_evaluation_interval(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Channel Evaluation Interval    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/channelEvaluationInterval'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_delete_accounting_server(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Accounting Server    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/aaa/accounting/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_update_diff_serv(self, url_zoneId, url_id, name, uplinkDiffServ_uplinkEnable=None, description=None, preservedList=None, uplinkDiffServ_uplink=None, downlinkDiffServ_downlink=None, downlinkDiffServ_downlinkEnable=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        name (String)  : Name of the diffserv
        
        Optional Params  :
        downlinkDiffServ_downlink (String)  : Downlink
        downlinkDiffServ_downlinkEnable (Boolean)  : Downlink enable
        description (String)  : Description of the diffserv
        uplinkDiffServ_uplinkEnable (Boolean)  : Uplink enable
        uplinkDiffServ_uplink (String)  : Uplink
        preservedList (String)  : Preserved list
        
        Robot Format :
        Rkszones Update Diff Serv    url_zoneId    url_id    name
        '''
        
        data={"downlinkDiffServ":{"downlink" : downlinkDiffServ_downlink,"downlinkEnable" : downlinkDiffServ_downlinkEnable},"description" : description,"uplinkDiffServ":{"uplinkEnable" : uplinkDiffServ_uplinkEnable,"uplink" : uplinkDiffServ_uplink},"name" : name,"preservedList":[ preservedList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/diffserv/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_upload_dpsk_file_cloud_path(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Upload Dpsk File Cloud Path    url_zoneId    url_id
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/{id}/dpsk/uploadOverwrite'.format(zoneId=url_zoneId,id=url_id),jdata)
        return response
        

    def rkszones_create_wlan_standard_open(self, url_zoneId, name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        
        Optional Params  :
        description (String)  : Description of the WLAN
        hessid (String)  : HESSID of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Standard Open    url_zoneId    name    ssid
        '''
        
        data={"ssid" : ssid,"description" : description,"hessid" : hessid,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_attribute_client_admission_control24(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Client Admission Control24    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/clientAdmissionControl24'.format(id=url_id))
        

    def rkszones_delete_block_client(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Block Client    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/blockClient/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_ap_group_override_wifi50(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Wifi50    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi50'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_ap_group_override_altitude(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Altitude    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/altitude'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_update_l2_acl(self, url_zoneId, url_id, restriction=None, ruleMacs=None, name=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        restriction (Enum)  : restriction of the L2 Access Control, ALLOW: Only allow all stations listed below, BLOCK:Only block all stations listed below
        ruleMacs : ""
        name (String)  : name of the L2 Access Control 
        description (String)  : description of the L2 Access Control 
        
        Robot Format :
        Rkszones Update L2 Acl    url_zoneId    url_id
        '''
        
        data={"restriction" : restriction,"ruleMacs":[ ruleMacs],"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/l2ACL/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_delete_device_policy(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Device Policy    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/devicePolicy/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_wlan_hotspot_mac_by_pass(self, authServiceOrProfile_locationDeliveryEnabled, authServiceOrProfile_throughController, name, url_zoneId, authServiceOrProfile_id, authServiceOrProfile_name, portalServiceProfile_id, portalServiceProfile_name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        authServiceOrProfile_locationDeliveryEnabled (Boolean)  : RFC5580 location delivery support
        authServiceOrProfile_id (String)  : Identifier of the authentication service or profile. At least one ID or name is required in the request.
        authServiceOrProfile_throughController (Boolean)  : Indicates whether authentication messages were sent through the controller or not
        authServiceOrProfile_name (String)  : Name of the authentication service or profile. At least one ID or name is required in the request.
        portalServiceProfile_id : ""
        portalServiceProfile_name : ""
        
        Optional Params  :
        description (String)  : Description of the WLAN
        hessid (String)  : HESSID of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Hotspot Mac By Pass    url_zoneId    name    ssid    authServiceOrProfile_locationDeliveryEnabled    authServiceOrProfile_id    authServiceOrProfile_throughController    authServiceOrProfile_name    portalServiceProfile_id    portalServiceProfile_name
        '''
        
        data={"ssid" : ssid,"description" : description,"name" : name,"portalServiceProfile":{"id" : portalServiceProfile_id,"name" : portalServiceProfile_name},"hessid" : hessid,"authServiceOrProfile":{"locationDeliveryEnabled" : authServiceOrProfile_locationDeliveryEnabled,"id" : authServiceOrProfile_id,"throughController" : authServiceOrProfile_throughController,"name" : authServiceOrProfile_name}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/wisprmac'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_ap_group_override_location_additional_info(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Location Additional Info    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/locationAdditionalInfo'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_wlan_group_member_override_nas_id(self, url_zoneId, url_id, url_memberId):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_memberId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Group Member Override Nas Id    url_zoneId    url_id    url_memberId
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlangroups/{id}/members/{memberId}/nasId'.format(zoneId=url_zoneId,id=url_id,memberId=url_memberId))
        

    def rkszones_delete_ldap_server(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Ldap Server    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/aaa/ldap/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_attribute_recovery_ssid(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Recovery Ssid    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/recoverySsid'.format(id=url_id))
        

    def rkszones_disable_ap_group_override_v3_since_wifi50_channel_width(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi50 Channel Width    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi50/channelWidth'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_attribute_location_based_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Location Based Service    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/locationBasedService'.format(id=url_id))
        

    def rkszones_update_accounting_server(self, url_zoneId, url_id, primary_ip=None, description=None, secondary_ip=None, primary_port=None, primary_sharedSecret=None, secondary_port=None, secondary_sharedSecret=None, name=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        description (String)  : Description of the accounting server
        primary_ip (String)  : Server IP
        primary_port (Integer)  : Server port
        primary_sharedSecret (String)  : Server shared secrect
        name (String)  : Name of the accounting server
        secondary_ip (String)  : Server IP
        secondary_port (Integer)  : Server port
        secondary_sharedSecret (String)  : Server shared secrect
        
        Robot Format :
        Rkszones Update Accounting Server    url_zoneId    url_id
        '''
        
        data={"description" : description,"primary":{"ip" : primary_ip,"port" : primary_port,"sharedSecret" : primary_sharedSecret},"name" : name,"secondary":{"ip" : secondary_ip,"port" : secondary_port,"sharedSecret" : secondary_sharedSecret}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/aaa/accounting/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_create_l2_acl_profile(self, url_zoneId, name, restriction, ruleMacs=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : name of the L2 Access Control 
        restriction (Enum)  : restriction of the L2 Access Control, ALLOW: Only allow all stations listed below, BLOCK:Only block all stations listed below
        
        Optional Params  :
        ruleMacs : ""
        description (String)  : description of the L2 Access Control 
        
        Robot Format :
        Rkszones Create L2 Acl Profile    url_zoneId    name    restriction
        '''
        
        data={"restriction" : restriction,"ruleMacs":[ ruleMacs],"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/l2ACL'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_update_calea_config(self, url_zoneId, url_id, dpTunnelNatEnabled=None, awsVenueEnable=None, awsExtNasIPEnable=None, caleaEnabled=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        dpTunnelNatEnabled (Boolean)  : DP Tunnel Nat enable/disable
        awsExtNasIPEnable (Boolean)  : awsExtNasIP enable/disable
        caleaEnabled (Boolean)  : CARLEA enable/disable
        awsVenueEnable (Boolean)  : awsVenue  enable/disable
        
        Robot Format :
        Rkszones Update Calea Config    url_zoneId    url_id
        '''
        
        data={"dpTunnelNatEnabled" : dpTunnelNatEnabled,"awsExtNasIPEnable" : awsExtNasIPEnable,"caleaEnabled" : caleaEnabled,"awsVenueEnable" : awsVenueEnable}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/wlans/{id}/calea'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_get_ap_group_ap_model_specific(self, url_zoneId, url_id, url_model):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_model : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ap Group Ap Model Specific    url_zoneId    url_id    url_model
        '''
        
        response = self.session.get('/rkszones/{zoneId}/apgroups/{id}/apmodel/{model}'.format(zoneId=url_zoneId,id=url_id,model=url_model))
        return response
        

    def rkszones_disable_ap_group_override_v3_since_wifi50_indoor_channel(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi50 Indoor Channel    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi50/indoorChannel'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_wlan_hotspot20(self, hotspot20Profile_id, url_zoneId, name, hotspot20Profile_name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        hotspot20Profile_id : ""
        hotspot20Profile_name : ""
        
        Optional Params  :
        hessid (String)  : HESSID of the WLAN
        description (String)  : Description of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Hotspot20    url_zoneId    name    ssid    hotspot20Profile_id    hotspot20Profile_name
        '''
        
        data={"ssid" : ssid,"hessid" : hessid,"description" : description,"hotspot20Profile":{"id" : hotspot20Profile_id,"name" : hotspot20Profile_name},"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/hotspot20'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_wlan_group(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wlan Group    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlangroups/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_create_hotspot_external(self, url_zoneId, macAddressFormat, portalUrl, name, smartClientSupport, location_name=None, description=None, walledGardens=None, userSession_gracePeriodInMin=None, redirect_url=None, location_id=None, userSession_timeoutInMin=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the Hotspot
        smartClientSupport (Enum)  : Smart client support of the Hotspot
        portalUrl (String)  : Portal URL of the Hotspot
        macAddressFormat (Integer)  : mac address format of redirection
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        walledGardens (String)  : Walled garden map set of the Hotspot
        location_id (String)  : Portal location id
        location_name (String)  : Portal location name
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        description (String)  : Description of the Hotspot
        
        Robot Format :
        Rkszones Create Hotspot External    url_zoneId    name    smartClientSupport    portalUrl    macAddressFormat
        '''
        
        data={"redirect":{"url" : redirect_url},"name" : name,"walledGardens":[ walledGardens],"smartClientSupport" : smartClientSupport,"portalUrl" : portalUrl,"location":{"id" : location_id,"name" : location_name},"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"macAddressFormat" : macAddressFormat,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/portals/hotspot/external'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_block_client(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Block Client    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/blockClient/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_disable_ap_group_override_auto_channel_selection24(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Auto Channel Selection24    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/autoChannelSelection24'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_upload_dpsk_file(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Upload Dpsk File    url_zoneId    url_id
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/{id}/dpsk/upload'.format(zoneId=url_zoneId,id=url_id),jdata)
        return response
        

    def rkszones_batch_gen_unbound_dpsk(self, url_zoneId, url_id, userName=None, passphraseList=None, vlanId=None, amount=None, userRoleId=None, groupDpsk=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        userName (String)  : User Name of DPSK
        passphraseList : ""
        vlanId (Integer)  : VLAN ID of DPSK
        amount (Integer)  : Amount of generate unbound DPSK
        userRoleId (String)  : Identity User Role ID of DPSK
        groupDpsk (Boolean)  : Using group DPSK or not
        
        Robot Format :
        Rkszones Batch Gen Unbound Dpsk    url_zoneId    url_id
        '''
        
        data={"userName" : userName,"passphraseList":[ passphraseList],"vlanId" : vlanId,"amount" : amount,"userRoleId" : userRoleId,"groupDpsk" : groupDpsk}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/{id}/dpsk/batchGenUnbound'.format(zoneId=url_zoneId,id=url_id),jdata)
        return response
        

    def rkszones_create_bonjour_fencing_policy(self, bonjourFencingRuleList_serviceType, bonjourFencingRuleList_deviceMac, bonjourFencingRuleList_description, bonjourFencingRuleList_fencingRange, url_zoneId, bonjourFencingRuleList_deviceType, bonjourFencingRuleList_closestAp, name, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the Bonjour Fencing Policy
        bonjourFencingRuleList_fencingRange (Enum)  : The range of AP can take Bonjour work
        bonjourFencingRuleList_serviceType (Enum)  : Bonjour Service Type
        bonjourFencingRuleList_description (String)  : Description of the Bonjour Fencing Rule
        bonjourFencingRuleList_deviceMac (String)  : Specify the device providing Bonjour Service
        bonjourFencingRuleList_deviceType (Enum)  : Name of the Bonjour Fencing Rule
        bonjourFencingRuleList_closestAp (String)  : Specify the closest AP while device connecting to AP wired
        
        Optional Params  :
        description (String)  : Description of the Bonjour Fencing Policy
        
        Robot Format :
        Rkszones Create Bonjour Fencing Policy    url_zoneId    name    bonjourFencingRuleList_fencingRange    bonjourFencingRuleList_serviceType    bonjourFencingRuleList_description    bonjourFencingRuleList_deviceMac    bonjourFencingRuleList_deviceType    bonjourFencingRuleList_closestAp
        '''
        
        data={"description" : description,"bonjourFencingRuleList":[{"fencingRange" : bonjourFencingRuleList_fencingRange,"serviceType" : bonjourFencingRuleList_serviceType,"description" : bonjourFencingRuleList_description,"deviceMac" : bonjourFencingRuleList_deviceMac,"deviceType" : bonjourFencingRuleList_deviceType,"closestAp" : bonjourFencingRuleList_closestAp}],"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/bonjourFencingPolicy'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_attribute_client_load_balancing24(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Client Load Balancing24    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/clientLoadBalancing24'.format(id=url_id))
        

    def rkszones_disable_attribute_venue_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Venue Profile    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/venueProfile'.format(id=url_id))
        

    def rkszones_deassociate_zone(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Deassociate Zone    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/usbSoftwarePackage'.format(id=url_id))
        

    def rkszones_get_mesh_config(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Mesh Config    url_id
        '''
        
        response = self.session.get('/rkszones/{id}/mesh'.format(id=url_id))
        return response
        

    def rkszones_update_zone_ap_model_specific(self, url_zoneId, url_model, lanPorts_enabled=None, radioBand=None, externalAntenna50_chainMask=None, externalAntenna24_chainMask=None, ledMode=None, externalAntenna50_enabled=None, poeOutPortEnabled=None, lanPorts_ethPortProfile_name=None, usbPowerEnable=None, externalAntenna24_enabled=None, externalAntenna50_dbi=None, lldp_holdTimeInSec=None, lanPorts_ethPortProfile_id=None, lldp_advertiseIntervalInSec=None, externalAntenna24_dbi=None, lanPorts_portName=None, poeModeSetting=None, lldp_managementIPTLVEnabled=None, poeTxChain=None, internalHeaterEnabled=None, lldp_enabled=None, ledStatusEnabled=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_model : ""
        
        Optional Params  :
        lldp_holdTimeInSec : ""
        lldp_advertiseIntervalInSec : ""
        lldp_enabled : ""
        lldp_managementIPTLVEnabled : ""
        externalAntenna50_dbi : ""
        externalAntenna50_enabled : ""
        externalAntenna50_chainMask : ""
        radioBand : ""
        ledStatusEnabled : ""
        usbPowerEnable : ""
        ledMode : ""
        internalHeaterEnabled : ""
        externalAntenna24_dbi : ""
        externalAntenna24_enabled : ""
        externalAntenna24_chainMask : ""
        lanPorts_portName : ""
        lanPorts_enabled : ""
        lanPorts_ethPortProfile_id : ""
        lanPorts_ethPortProfile_name : ""
        poeOutPortEnabled : ""
        poeModeSetting : ""
        poeTxChain : ""
        
        Robot Format :
        Rkszones Update Zone Ap Model Specific    url_zoneId    url_model
        '''
        
        data={"lldp":{"holdTimeInSec" : lldp_holdTimeInSec,"advertiseIntervalInSec" : lldp_advertiseIntervalInSec,"enabled" : lldp_enabled,"managementIPTLVEnabled" : lldp_managementIPTLVEnabled},"externalAntenna50":{"dbi" : externalAntenna50_dbi,"enabled" : externalAntenna50_enabled,"chainMask" : externalAntenna50_chainMask},"radioBand" : radioBand,"ledStatusEnabled" : ledStatusEnabled,"usbPowerEnable" : usbPowerEnable,"ledMode" : ledMode,"internalHeaterEnabled" : internalHeaterEnabled,"externalAntenna24":{"dbi" : externalAntenna24_dbi,"enabled" : externalAntenna24_enabled,"chainMask" : externalAntenna24_chainMask},"lanPorts":[{"portName" : lanPorts_portName,"enabled" : lanPorts_enabled,"ethPortProfile":{"id" : lanPorts_ethPortProfile_id,"name" : lanPorts_ethPortProfile_name}}],"poeOutPortEnabled" : poeOutPortEnabled,"poeModeSetting" : poeModeSetting,"poeTxChain" : poeTxChain}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/rkszones/{zoneId}/apmodel/{model}'.format(zoneId=url_zoneId,model=url_model),jdata)
        

    def rkszones_disable_ap_group_override_client_admission_control24(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Client Admission Control24    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/clientAdmissionControl24'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_dhcp_profile_by_zone_id(self, name, url_zoneId, vlanId, poolEndIp, leaseTimeMinutes, subnetMask, subnetNetworkIp, leaseTimeHours, poolStartIp, secondaryDnsIp=None, primaryDnsIp=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the DHCP Profile
        vlanId (Integer)  : VLAN ID of the DHCP Profile
        subnetNetworkIp (String)  : Subnet Network IP of the DHCP Profile
        subnetMask (String)  : Subnet Mask of the DHCP Profile
        poolStartIp (String)  : Pool Starting IP of the DHCP Profile
        poolEndIp (String)  : Pool Ending IP of the DHCP Profile
        leaseTimeHours (Integer)  : Lease time in hours of the DHCP Profile
        leaseTimeMinutes (Integer)  : Lease time in minutes of the DHCP Profile
        
        Optional Params  :
        secondaryDnsIp (String)  : Secondary DNS IP of the DHCP Profile
        primaryDnsIp (String)  : Primany DNS IP of the DHCP Profile
        description (String)  : Description of the DHCP Profile
        
        Robot Format :
        Rkszones Create Dhcp Profile By Zone Id    url_zoneId    name    vlanId    subnetNetworkIp    subnetMask    poolStartIp    poolEndIp    leaseTimeHours    leaseTimeMinutes
        '''
        
        data={"name" : name,"secondaryDnsIp" : secondaryDnsIp,"primaryDnsIp" : primaryDnsIp,"vlanId" : vlanId,"poolEndIp" : poolEndIp,"leaseTimeMinutes" : leaseTimeMinutes,"subnetMask" : subnetMask,"subnetNetworkIp" : subnetNetworkIp,"leaseTimeHours" : leaseTimeHours,"poolStartIp" : poolStartIp,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/dhcpSite/dhcpProfile'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_accounting_server(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Accounting Server    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/aaa/accounting/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_update_wlan_group(self, url_zoneId, url_id, name=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        name (String)  : Name of the WLAN group
        description (String)  : Description of the WLAN group
        
        Robot Format :
        Rkszones Update Wlan Group    url_zoneId    url_id
        '''
        
        data={"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/wlangroups/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_disable_ap_group_override_client_admission_control50(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Client Admission Control50    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/clientAdmissionControl50'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_attribute_mesh(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Mesh    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/mesh'.format(id=url_id))
        

    def rkszones_enable_qos_map(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Enable Qos Map    url_zoneId    url_id
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/{id}/qosMaps'.format(zoneId=url_zoneId,id=url_id),jdata)
        return response
        

    def rkszones_update_domain(self, url_id, name=None, parentDomainId=None, domainType=None, description=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        parentDomainId (String)  : parent domain id
        description (String)  : Description of the domain
        domainType (String)  : domain type
        name (String)  : domain name
        
        Robot Format :
        Rkszones Update Domain    url_id
        '''
        
        data={"parentDomainId" : parentDomainId,"description" : description,"domainType" : domainType,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/domains/{id}'.format(id=url_id),jdata)
        

    def rkszones_delete_active_directory_server(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Active Directory Server    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/aaa/ad/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_ethernet_port_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ethernet Port Profile    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/profile/ethernetPort/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_create_wechat(self, name, url_zoneId, whiteList, dnatDestination, blackList, authUrl, gracePeriod=None, dnatPortMapping_destPort=None, dnatPortMapping_sourcePort=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the wechat profile
        authUrl (String)  : Authentication URL of the wechat profile
        dnatDestination (String)  : DNAT destination of the wechat profile
        blackList (String)  : Black list of the wechat profile
        whiteList (String)  : White list of the wechat profile
        
        Optional Params  :
        gracePeriod (Integer)  : Grace period of the wechat profile
        dnatPortMapping_sourcePort (Integer)  : Source port
        dnatPortMapping_destPort (Integer)  : Destination port
        description (String)  : Description of the wechat profile
        
        Robot Format :
        Rkszones Create Wechat    url_zoneId    name    authUrl    dnatDestination    blackList    whiteList
        '''
        
        data={"name" : name,"gracePeriod" : gracePeriod,"whiteList":[ whiteList],"dnatDestination" : dnatDestination,"blackList" : blackList,"dnatPortMapping":[{"sourcePort" : dnatPortMapping_sourcePort,"destPort" : dnatPortMapping_destPort}],"authUrl" : authUrl,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/portals/wechat'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_add_ap_group_member(self, url_zoneId, url_id, url_apMac):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Add Ap Group Member    url_zoneId    url_id    url_apMac
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/apgroups/{id}/members/{apMac}'.format(zoneId=url_zoneId,id=url_id,apMac=url_apMac),jdata)
        return response
        

    def rkszones_disable_accounting_attribute(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Accounting Attribute    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/aaa/accounting/{id}/secondary'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_attribute_syslog(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Syslog    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/syslog'.format(id=url_id))
        

    def rkszones_delete_guest_access(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Guest Access    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/portals/guest/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_accounting_server_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Accounting Server List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/aaa/accounting'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_get_web_authentication(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Web Authentication    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/portals/webauth/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_get_subdomain_by_id(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Subdomain By Id    url_id
        '''
        
        response = self.session.get('/rkszones/domains/{id}/subdomain'.format(id=url_id))
        return response
        

    def rkszones_disable_attribute_snmp_agent(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Snmp Agent    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/snmpAgent'.format(id=url_id))
        

    def rkszones_disable_ap_group_override_location_based_service(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Location Based Service    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/locationBasedService'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_web_authentication(self, url_zoneId, name, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the web authentication profile
        
        Optional Params  :
        description (String)  : Description of the web authentication profile
        
        Robot Format :
        Rkszones Create Web Authentication    url_zoneId    name
        '''
        
        data={"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/portals/webauth'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_attribute_band_balancing(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Band Balancing    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/bandBalancing'.format(id=url_id))
        

    def rkszones_delete_authentication_server(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Authentication Server    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/aaa/radius/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_wlan_schedulers(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wlan Schedulers    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlanSchedulers'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_get_dhcp_site_config_list_model_by_criteria(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dhcp Site Config List Model By Criteria    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/services/dhcpSiteConfig/query',jdata)
        return response
        

    def rkszones_get_device_policy(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Device Policy    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/devicePolicy/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_get_active_directory_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Active Directory List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/aaa/ad'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_create(self, login_apLoginPassword, login_apLoginName, name, domainId=None, version=None, countryCode=None, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the zone
        login_apLoginName (String)  : User name of the AP administrator
        login_apLoginPassword (String)  : Password of the AP administrator
        
        Optional Params  :
        domainId (String)  : Identifier of the management domain to which the zone belongs
        countryCode (String)  : Country code of the zone
        version (String)  : AP firmware version of the zone
        description (String)  : Description of the zone
        
        Robot Format :
        Rkszones Create    name    login_apLoginName    login_apLoginPassword
        '''
        
        data={"domainId" : domainId,"name" : name,"countryCode" : countryCode,"version" : version,"login":{"apLoginName" : login_apLoginName,"apLoginPassword" : login_apLoginPassword},"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_attribute_rogue(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Rogue    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/rogue'.format(id=url_id))
        

    def rkszones_get_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get List    
        '''
        
        response = self.session.get('/rkszones')
        return response
        

    def rkszones_disable_guest_access_attribute_sms_gateway(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Guest Access Attribute Sms Gateway    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/portals/guest/{id}/smsGateway'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_update_ap_group_ap_model_specific(self, url_zoneId, url_id, url_model, lanPorts_enabled=None, radioBand=None, externalAntenna50_chainMask=None, externalAntenna24_chainMask=None, ledMode=None, externalAntenna50_enabled=None, poeOutPortEnabled=None, lanPorts_ethPortProfile_name=None, usbPowerEnable=None, externalAntenna24_enabled=None, externalAntenna50_dbi=None, lldp_holdTimeInSec=None, lanPorts_ethPortProfile_id=None, lldp_advertiseIntervalInSec=None, externalAntenna24_dbi=None, lanPorts_portName=None, poeModeSetting=None, lldp_managementIPTLVEnabled=None, poeTxChain=None, internalHeaterEnabled=None, lldp_enabled=None, ledStatusEnabled=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_model : ""
        
        Optional Params  :
        lldp_holdTimeInSec : ""
        lldp_advertiseIntervalInSec : ""
        lldp_enabled : ""
        lldp_managementIPTLVEnabled : ""
        externalAntenna50_dbi : ""
        externalAntenna50_enabled : ""
        externalAntenna50_chainMask : ""
        radioBand : ""
        ledStatusEnabled : ""
        usbPowerEnable : ""
        ledMode : ""
        internalHeaterEnabled : ""
        externalAntenna24_dbi : ""
        externalAntenna24_enabled : ""
        externalAntenna24_chainMask : ""
        lanPorts_portName : ""
        lanPorts_enabled : ""
        lanPorts_ethPortProfile_id : ""
        lanPorts_ethPortProfile_name : ""
        poeOutPortEnabled : ""
        poeModeSetting : ""
        poeTxChain : ""
        
        Robot Format :
        Rkszones Update Ap Group Ap Model Specific    url_zoneId    url_id    url_model
        '''
        
        data={"lldp":{"holdTimeInSec" : lldp_holdTimeInSec,"advertiseIntervalInSec" : lldp_advertiseIntervalInSec,"enabled" : lldp_enabled,"managementIPTLVEnabled" : lldp_managementIPTLVEnabled},"externalAntenna50":{"dbi" : externalAntenna50_dbi,"enabled" : externalAntenna50_enabled,"chainMask" : externalAntenna50_chainMask},"radioBand" : radioBand,"ledStatusEnabled" : ledStatusEnabled,"usbPowerEnable" : usbPowerEnable,"ledMode" : ledMode,"internalHeaterEnabled" : internalHeaterEnabled,"externalAntenna24":{"dbi" : externalAntenna24_dbi,"enabled" : externalAntenna24_enabled,"chainMask" : externalAntenna24_chainMask},"lanPorts":[{"portName" : lanPorts_portName,"enabled" : lanPorts_enabled,"ethPortProfile":{"id" : lanPorts_ethPortProfile_id,"name" : lanPorts_ethPortProfile_name}}],"poeOutPortEnabled" : poeOutPortEnabled,"poeModeSetting" : poeModeSetting,"poeTxChain" : poeTxChain}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/rkszones/{zoneId}/apgroups/{id}/apmodel/{model}'.format(zoneId=url_zoneId,id=url_id,model=url_model),jdata)
        

    def rkszones_get_dpsk_info_by_wlan(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dpsk Info By Wlan    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlans/{id}/dpsk'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_disable_zone_config(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Zone Config    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/timezone'.format(id=url_id))
        

    def rkszones_disable_ap_group_override_v3_since_wifi50_outdoor_channel_range(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi50 Outdoor Channel Range    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi50/outdoorChannelRange'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_delete_wlan_scheduler(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Wlan Scheduler    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlanSchedulers/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_wlan_attribute_v1_since_device_policy(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Attribute V1 Since Device Policy    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlans/{id}/devicePolicy'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_update_wlan_group_member(self, url_zoneId, url_id, url_memberId, accessVlan=None, vlanPooling_name=None, nasId=None, vlanPooling_id=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_memberId : ""
        
        Optional Params  :
        vlanPooling_id : ""
        vlanPooling_name : ""
        nasId (String)  : NAS-ID
        accessVlan (Integer)  : Access VLAN
        
        Robot Format :
        Rkszones Update Wlan Group Member    url_zoneId    url_id    url_memberId
        '''
        
        data={"vlanPooling":{"id" : vlanPooling_id,"name" : vlanPooling_name},"nasId" : nasId,"accessVlan" : accessVlan}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/wlangroups/{id}/members/{memberId}'.format(zoneId=url_zoneId,id=url_id,memberId=url_memberId),jdata)
        

    def rkszones_delete_ap_group_member(self, url_zoneId, url_id, url_apMac):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_apMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Ap Group Member    url_zoneId    url_id    url_apMac
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/members/{apMac}'.format(zoneId=url_zoneId,id=url_id,apMac=url_apMac))
        

    def rkszones_disable_ap_group_override_ap_mgmt_vlan(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Ap Mgmt Vlan    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/apMgmtVlan'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_update_ethernet_port_profile_basic(self, url_zoneId, url_id, tunnelEnabled=None, _8021X_authenticator_authentication_enableUseSCGasProxy=None, vlanMembers=None, _8021X_authenticator_authentication_server_name=None, name=None, guestVlan=None, _8021X_authenticator_accounting_server_id=None, _8021X_authenticator_accounting_server_name=None, _8021X_authenticator_macAuthByPassEnabled=None, _8021X_supplicant_userName=None, _8021X_authenticator_disabledAccounting=None, _8021X_authenticator_authentication_server_id=None, _8021X_authenticator_accounting_enableUseSCGasProxy=None, _8021X_supplicant_password=None, _8021X_type=None, dynamicVlanEnabled=None, untagId=None, _8021X_supplicant_type=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        tunnelEnabled (Boolean)  : tunnelEnabled of the ethernet port profile for AccessPort type
        vlanMembers (String)  : VLAN Members of the ethernet port profile
        name (String)  : name of the ethernet port profile
        guestVlan : ""
        _8021X_authenticator_disabledAccounting : ""
        _8021X_authenticator_authentication_enableUseSCGasProxy : ""
        _8021X_authenticator_authentication_server_id : ""
        _8021X_authenticator_authentication_server_name : ""
        _8021X_authenticator_macAuthByPassEnabled : ""
        _8021X_authenticator_accounting_enableUseSCGasProxy : ""
        _8021X_authenticator_accounting_server_id : ""
        _8021X_authenticator_accounting_server_name : ""
        _8021X_supplicant_userName : ""
        _8021X_supplicant_password : ""
        _8021X_supplicant_type : ""
        _8021X_type : ""
        untagId (Integer)  : VLAN Untag ID of the ethernet port profile
        dynamicVlanEnabled : ""
        description (String)  : description of the ethernet port profile
        
        Robot Format :
        Rkszones Update Ethernet Port Profile Basic    url_zoneId    url_id
        '''
        
        data={"tunnelEnabled" : tunnelEnabled,"vlanMembers" : vlanMembers,"name" : name,"guestVlan" : guestVlan,"_8021X":{"authenticator":{"disabledAccounting" : _8021X_authenticator_disabledAccounting,"authentication":{"enableUseSCGasProxy" : _8021X_authenticator_authentication_enableUseSCGasProxy,"server":{"id" : _8021X_authenticator_authentication_server_id,"name" : _8021X_authenticator_authentication_server_name}},"macAuthByPassEnabled" : _8021X_authenticator_macAuthByPassEnabled,"accounting":{"enableUseSCGasProxy" : _8021X_authenticator_accounting_enableUseSCGasProxy,"server":{"id" : _8021X_authenticator_accounting_server_id,"name" : _8021X_authenticator_accounting_server_name}}},"supplicant":{"userName" : _8021X_supplicant_userName,"password" : _8021X_supplicant_password,"type" : _8021X_supplicant_type},"type" : _8021X_type},"untagId" : untagId,"dynamicVlanEnabled" : dynamicVlanEnabled,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/profile/ethernetPort/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_get_device_policys(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Device Policys    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/devicePolicy'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_get_guest_access(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Guest Access    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/portals/guest/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_create_ipv6(self, login_apLoginPassword, login_apLoginName, name, domainId=None, version=None, countryCode=None, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the zone
        login_apLoginName (String)  : User name of the AP administrator
        login_apLoginPassword (String)  : Password of the AP administrator
        
        Optional Params  :
        domainId (String)  : Identifier of the management domain to which the zone belongs
        countryCode (String)  : Country code of the zone
        version (String)  : AP firmware version of the zone
        description (String)  : Description of the zone
        
        Robot Format :
        Rkszones Create Ipv6    name    login_apLoginName    login_apLoginPassword
        '''
        
        data={"domainId" : domainId,"name" : name,"countryCode" : countryCode,"version" : version,"login":{"apLoginName" : login_apLoginName,"apLoginPassword" : login_apLoginPassword},"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/ipv6',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_create_authentication_server(self, primary_port, url_zoneId, primary_sharedSecret, primary_ip, name, secondary_port=None, secondary_sharedSecret=None, description=None, secondary_ip=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the authentication server
        primary_ip (String)  : Server IP
        primary_port (Integer)  : Server port
        primary_sharedSecret (String)  : Server shared secrect
        
        Optional Params  :
        description (String)  : Description of the authentication server
        secondary_ip (String)  : Server IP
        secondary_port (Integer)  : Server port
        secondary_sharedSecret (String)  : Server shared secrect
        
        Robot Format :
        Rkszones Create Authentication Server    url_zoneId    name    primary_ip    primary_port    primary_sharedSecret
        '''
        
        data={"description" : description,"primary":{"ip" : primary_ip,"port" : primary_port,"sharedSecret" : primary_sharedSecret},"name" : name,"secondary":{"ip" : secondary_ip,"port" : secondary_port,"sharedSecret" : secondary_sharedSecret}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/aaa/radius'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_create_wlan_hotspot20_osen(self, url_zoneId, name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        
        Optional Params  :
        description (String)  : Description of the WLAN
        hessid (String)  : HESSID of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Hotspot20 Osen    url_zoneId    name    ssid
        '''
        
        data={"ssid" : ssid,"description" : description,"hessid" : hessid,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/hotspot20osen'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_delete_bulk_bonjour_fencing_policy(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Rkszones Delete Bulk Bonjour Fencing Policy    
        '''
        
        response = self.session.delete('/rkszones/bonjourFencingPolicy')
        

    def rkszones_add_ap_group_member_list(self, url_zoneId, url_id, memberList_apMac=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        memberList_apMac (String)  : MAC address of member AP
        
        Robot Format :
        Rkszones Add Ap Group Member List    url_zoneId    url_id
        '''
        
        data={"memberList":[{"apMac" : memberList_apMac}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/apgroups/{id}/members'.format(zoneId=url_zoneId,id=url_id),jdata)
        return response
        

    def rkszones_delete_web_authentication(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Web Authentication    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/portals/webauth/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_delete_hotspot(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Hotspot    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/portals/hotspot/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_block_client_by_zone_id(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Block Client By Zone Id    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/blockClient'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_delete_l2_acl(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete L2 Acl    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/l2ACL/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_l2_ac_ls(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get L2 Ac Ls    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/l2ACL'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_get_authentication_server(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Authentication Server    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/aaa/radius/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_disable_ap_group_override_v3_since_wifi24_channel_width(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi24 Channel Width    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi24/channelWidth'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_add_wlan_group_member(self, url_zoneId, url_id, accessVlan=None, vlanPooling_name=None, nasId=None, id=None, vlanPooling_id=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        vlanPooling_id : ""
        vlanPooling_name : ""
        nasId (String)  : NAS-ID
        id (String)  : Identifier of the WLAN
        accessVlan (Integer)  : Access VLAN
        
        Robot Format :
        Rkszones Add Wlan Group Member    url_zoneId    url_id
        '''
        
        data={"vlanPooling":{"id" : vlanPooling_id,"name" : vlanPooling_name},"nasId" : nasId,"id" : id,"accessVlan" : accessVlan}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlangroups/{id}/members'.format(zoneId=url_zoneId,id=url_id),jdata)
        return response
        

    def rkszones_disable_wlan_attribute_v2_since_qos_maps(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Attribute V2 Since Qos Maps    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlans/{id}/qosMaps'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_dpsk_info_by_zone_v4(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dpsk Info By Zone V4    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/dpsk'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_disable_wlan_group_member_override_vlan_override(self, url_zoneId, url_id, url_memberId):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_memberId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Group Member Override Vlan Override    url_zoneId    url_id    url_memberId
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlangroups/{id}/members/{memberId}/vlanOverride'.format(zoneId=url_zoneId,id=url_id,memberId=url_memberId))
        

    def rkszones_update_ap_group(self, url_zoneId, url_id, usbSoftwarePackage_applyModel=None, venueProfile_id=None, wifi50_channelWidth=None, clientAdmissionControl50_enabled=None, channelEvaluationInterval=None, wifi50_secondaryChannelOutdoor=None, apMgmtVlan_id=None, clientAdmissionControl24_minClientThroughputMbps=None, wlanGroup24_name=None, wlanGroup50_id=None, locationBasedService_id=None, wifi24_channelRange=None, altitude_altitudeUnit=None, clientAdmissionControl24_maxRadioLoadPercent=None, wifi50_indoorChannelRange=None, autoChannelSelection24_channelSelectMode=None, wifi50_availableOutdoorChannelRange=None, usbSoftwarePackage_usbSoftware_name=None, wlanGroup24_id=None, clientAdmissionControl24_enabled=None, location=None, wifi24_channelWidth=None, venueProfile_name=None, wifi24_txPower=None, clientAdmissionControl50_maxRadioLoadPercent=None, altitude_altitudeValue=None, autoChannelSelection50_channelFlyMtbc=None, wifi50_indoorChannel=None, description=None, clientAdmissionControl50_minClientCount=None, usbSoftwarePackage_usbSoftware_id=None, clientAdmissionControl24_minClientCount=None, locationAdditionalInfo=None, wifi50_txPower=None, autoChannelSelection50_channelSelectMode=None, apMgmtVlan_mode=None, wifi24_availableChannelRange=None, wlanGroup50_name=None, locationBasedService_name=None, wifi50_outdoorChannelRange=None, awsVenue=None, name=None, latitude=None, wifi50_secondaryChannelIndoor=None, locationBasedService_enabled=None, wifi24_channel=None, longitude=None, autoChannelSelection24_channelFlyMtbc=None, wifi50_outdoorChannel=None, clientAdmissionControl50_minClientThroughputMbps=None, wifi50_availableIndoorChannelRange=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        venueProfile_id : ""
        venueProfile_name : ""
        autoChannelSelection24_channelFlyMtbc (Integer)  : ChannelFly MTBC
        autoChannelSelection24_channelSelectMode (Enum)  : Channel Select Mode
        name (String)  : Name of the AP group
        autoChannelSelection50_channelFlyMtbc (Integer)  : ChannelFly MTBC
        autoChannelSelection50_channelSelectMode (Enum)  : Channel Select Mode
        altitude_altitudeValue (Integer)  : altitude value
        altitude_altitudeUnit (Enum)  : altitude unit
        description (String)  : Description of the AP group
        wlanGroup24_id : ""
        wlanGroup24_name : ""
        location (String)  : Location of the AP group.
        longitude (Integer)  : Longitude coordinate (in decimal format) of the AP group
        wifi24_txPower (Enum)  : Transmission power
        wifi24_availableChannelRange (Integer)  : Available channel range options
        wifi24_channelWidth (Enum)  : Channel width. Zero (0) means Auto.
        wifi24_channelRange (Integer)  : Channel range options
        wifi24_channel (Integer)  : Channel number
        usbSoftwarePackage_applyModel (String)  : List of apply models
        usbSoftwarePackage_usbSoftware_id : ""
        usbSoftwarePackage_usbSoftware_name : ""
        clientAdmissionControl50_minClientCount (Integer)  : Minimum client count number.
        clientAdmissionControl50_maxRadioLoadPercent (Integer)  : Maximum radio load percentage.
        clientAdmissionControl50_minClientThroughputMbps (Integer)  : Minimum client throughput in Mbps.
        clientAdmissionControl50_enabled : ""
        clientAdmissionControl24_minClientCount (Integer)  : Minimum client count number.
        clientAdmissionControl24_maxRadioLoadPercent (Integer)  : Maximum radio load percentage.
        clientAdmissionControl24_minClientThroughputMbps (Integer)  : Minimum client throughput in Mbps.
        clientAdmissionControl24_enabled : ""
        wlanGroup50_id : ""
        wlanGroup50_name : ""
        latitude (Integer)  : Latitude coordinate (in decimal format) of the AP group
        awsVenue (String)  : Venue code
        locationBasedService_enabled : ""
        locationBasedService_id : ""
        locationBasedService_name : ""
        locationAdditionalInfo (String)  : Location additional info of the AP group.
        channelEvaluationInterval (Integer)  : channel evaluation Interval of the ap group
        wifi50_secondaryChannelIndoor (Integer)  : Secondary channel number for Indoor AP (channelWidth is 80+80MHz only)
        wifi50_channelWidth (Enum)  : Channel width. Zero (0) means Auto. 8080 means 80+80MHz
        wifi50_outdoorChannel (Integer)  : Channel number for Outdoor AP
        wifi50_availableOutdoorChannelRange (Integer)  : Available channel range options
        wifi50_indoorChannel (Integer)  : Channel number for Indoor AP
        wifi50_txPower (Enum)  : Transmission power
        wifi50_indoorChannelRange (Integer)  : Channel range options for Indoor AP
        wifi50_secondaryChannelOutdoor (Integer)  : Secondary channel number for outdoor AP (channelWidth is 80+80MHz only)
        wifi50_availableIndoorChannelRange (Integer)  : Available channel range options
        wifi50_outdoorChannelRange (Integer)  : Channel range options for outdoor AP
        apMgmtVlan_mode (Enum)  : Vlan Mode of the zone
        apMgmtVlan_id (Integer)  : Vlan id of the zone
        
        Robot Format :
        Rkszones Update Ap Group    url_zoneId    url_id
        '''
        
        data={"venueProfile":{"id" : venueProfile_id,"name" : venueProfile_name},"autoChannelSelection24":{"channelFlyMtbc" : autoChannelSelection24_channelFlyMtbc,"channelSelectMode" : autoChannelSelection24_channelSelectMode},"name" : name,"autoChannelSelection50":{"channelFlyMtbc" : autoChannelSelection50_channelFlyMtbc,"channelSelectMode" : autoChannelSelection50_channelSelectMode},"altitude":{"altitudeValue" : altitude_altitudeValue,"altitudeUnit" : altitude_altitudeUnit},"description" : description,"wlanGroup24":{"id" : wlanGroup24_id,"name" : wlanGroup24_name},"location" : location,"longitude" : longitude,"wifi24":{"txPower" : wifi24_txPower,"availableChannelRange":[ wifi24_availableChannelRange],"channelWidth" : wifi24_channelWidth,"channelRange":[ wifi24_channelRange],"channel" : wifi24_channel},"usbSoftwarePackage":{"applyModel":[ usbSoftwarePackage_applyModel],"usbSoftware":{"id" : usbSoftwarePackage_usbSoftware_id,"name" : usbSoftwarePackage_usbSoftware_name}},"clientAdmissionControl50":{"minClientCount" : clientAdmissionControl50_minClientCount,"maxRadioLoadPercent" : clientAdmissionControl50_maxRadioLoadPercent,"minClientThroughputMbps" : clientAdmissionControl50_minClientThroughputMbps,"enabled" : clientAdmissionControl50_enabled},"clientAdmissionControl24":{"minClientCount" : clientAdmissionControl24_minClientCount,"maxRadioLoadPercent" : clientAdmissionControl24_maxRadioLoadPercent,"minClientThroughputMbps" : clientAdmissionControl24_minClientThroughputMbps,"enabled" : clientAdmissionControl24_enabled},"wlanGroup50":{"id" : wlanGroup50_id,"name" : wlanGroup50_name},"latitude" : latitude,"awsVenue" : awsVenue,"locationBasedService":{"enabled" : locationBasedService_enabled,"id" : locationBasedService_id,"name" : locationBasedService_name},"locationAdditionalInfo" : locationAdditionalInfo,"channelEvaluationInterval" : channelEvaluationInterval,"wifi50":{"secondaryChannelIndoor" : wifi50_secondaryChannelIndoor,"channelWidth" : wifi50_channelWidth,"outdoorChannel" : wifi50_outdoorChannel,"availableOutdoorChannelRange":[ wifi50_availableOutdoorChannelRange],"indoorChannel" : wifi50_indoorChannel,"txPower" : wifi50_txPower,"indoorChannelRange":[ wifi50_indoorChannelRange],"secondaryChannelOutdoor" : wifi50_secondaryChannelOutdoor,"availableIndoorChannelRange":[ wifi50_availableIndoorChannelRange],"outdoorChannelRange":[ wifi50_outdoorChannelRange]},"apMgmtVlan":{"mode" : apMgmtVlan_mode,"id" : apMgmtVlan_id}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/apgroups/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_disable_ap_group_override_v3_since_wifi24_channel_range(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi24 Channel Range    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi24/channelRange'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_authentication_server_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Authentication Server List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/aaa/radius'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_update_ap_group_v2_since(self, url_zoneId, url_id, usbSoftwarePackage_applyModel=None, venueProfile_id=None, wifi50_channelWidth=None, clientAdmissionControl50_enabled=None, channelEvaluationInterval=None, wifi50_secondaryChannelOutdoor=None, apMgmtVlan_id=None, clientAdmissionControl24_minClientThroughputMbps=None, wlanGroup24_name=None, wlanGroup50_id=None, locationBasedService_id=None, wifi24_channelRange=None, altitude_altitudeUnit=None, clientAdmissionControl24_maxRadioLoadPercent=None, wifi50_indoorChannelRange=None, autoChannelSelection24_channelSelectMode=None, wifi50_availableOutdoorChannelRange=None, usbSoftwarePackage_usbSoftware_name=None, wlanGroup24_id=None, clientAdmissionControl24_enabled=None, location=None, wifi24_channelWidth=None, venueProfile_name=None, wifi24_txPower=None, clientAdmissionControl50_maxRadioLoadPercent=None, altitude_altitudeValue=None, autoChannelSelection50_channelFlyMtbc=None, wifi50_indoorChannel=None, description=None, clientAdmissionControl50_minClientCount=None, usbSoftwarePackage_usbSoftware_id=None, clientAdmissionControl24_minClientCount=None, locationAdditionalInfo=None, wifi50_txPower=None, autoChannelSelection50_channelSelectMode=None, apMgmtVlan_mode=None, wifi24_availableChannelRange=None, wlanGroup50_name=None, locationBasedService_name=None, wifi50_outdoorChannelRange=None, awsVenue=None, name=None, latitude=None, wifi50_secondaryChannelIndoor=None, locationBasedService_enabled=None, wifi24_channel=None, longitude=None, autoChannelSelection24_channelFlyMtbc=None, wifi50_outdoorChannel=None, clientAdmissionControl50_minClientThroughputMbps=None, wifi50_availableIndoorChannelRange=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        venueProfile_id : ""
        venueProfile_name : ""
        autoChannelSelection24_channelFlyMtbc (Integer)  : ChannelFly MTBC
        autoChannelSelection24_channelSelectMode (Enum)  : Channel Select Mode
        name (String)  : Name of the AP group
        autoChannelSelection50_channelFlyMtbc (Integer)  : ChannelFly MTBC
        autoChannelSelection50_channelSelectMode (Enum)  : Channel Select Mode
        altitude_altitudeValue (Integer)  : altitude value
        altitude_altitudeUnit (Enum)  : altitude unit
        description (String)  : Description of the AP group
        wlanGroup24_id : ""
        wlanGroup24_name : ""
        location (String)  : Location of the AP group.
        longitude (Integer)  : Longitude coordinate (in decimal format) of the AP group
        wifi24_txPower (Enum)  : Transmission power
        wifi24_availableChannelRange (Integer)  : Available channel range options
        wifi24_channelWidth (Enum)  : Channel width. Zero (0) means Auto.
        wifi24_channelRange (Integer)  : Channel range options
        wifi24_channel (Integer)  : Channel number
        usbSoftwarePackage_applyModel (String)  : List of apply models
        usbSoftwarePackage_usbSoftware_id : ""
        usbSoftwarePackage_usbSoftware_name : ""
        clientAdmissionControl50_minClientCount (Integer)  : Minimum client count number.
        clientAdmissionControl50_maxRadioLoadPercent (Integer)  : Maximum radio load percentage.
        clientAdmissionControl50_minClientThroughputMbps (Integer)  : Minimum client throughput in Mbps.
        clientAdmissionControl50_enabled : ""
        clientAdmissionControl24_minClientCount (Integer)  : Minimum client count number.
        clientAdmissionControl24_maxRadioLoadPercent (Integer)  : Maximum radio load percentage.
        clientAdmissionControl24_minClientThroughputMbps (Integer)  : Minimum client throughput in Mbps.
        clientAdmissionControl24_enabled : ""
        wlanGroup50_id : ""
        wlanGroup50_name : ""
        latitude (Integer)  : Latitude coordinate (in decimal format) of the AP group
        awsVenue (String)  : Venue code
        locationBasedService_enabled : ""
        locationBasedService_id : ""
        locationBasedService_name : ""
        locationAdditionalInfo (String)  : Location additional info of the AP group.
        channelEvaluationInterval (Integer)  : channel evaluation Interval of the ap group
        wifi50_secondaryChannelIndoor (Integer)  : Secondary channel number for Indoor AP (channelWidth is 80+80MHz only)
        wifi50_channelWidth (Enum)  : Channel width. Zero (0) means Auto. 8080 means 80+80MHz
        wifi50_outdoorChannel (Integer)  : Channel number for Outdoor AP
        wifi50_availableOutdoorChannelRange (Integer)  : Available channel range options
        wifi50_indoorChannel (Integer)  : Channel number for Indoor AP
        wifi50_txPower (Enum)  : Transmission power
        wifi50_indoorChannelRange (Integer)  : Channel range options for Indoor AP
        wifi50_secondaryChannelOutdoor (Integer)  : Secondary channel number for outdoor AP (channelWidth is 80+80MHz only)
        wifi50_availableIndoorChannelRange (Integer)  : Available channel range options
        wifi50_outdoorChannelRange (Integer)  : Channel range options for outdoor AP
        apMgmtVlan_mode (Enum)  : Vlan Mode of the zone
        apMgmtVlan_id (Integer)  : Vlan id of the zone
        
        Robot Format :
        Rkszones Update Ap Group V2 Since    url_zoneId    url_id
        '''
        
        data={"venueProfile":{"id" : venueProfile_id,"name" : venueProfile_name},"autoChannelSelection24":{"channelFlyMtbc" : autoChannelSelection24_channelFlyMtbc,"channelSelectMode" : autoChannelSelection24_channelSelectMode},"name" : name,"autoChannelSelection50":{"channelFlyMtbc" : autoChannelSelection50_channelFlyMtbc,"channelSelectMode" : autoChannelSelection50_channelSelectMode},"altitude":{"altitudeValue" : altitude_altitudeValue,"altitudeUnit" : altitude_altitudeUnit},"description" : description,"wlanGroup24":{"id" : wlanGroup24_id,"name" : wlanGroup24_name},"location" : location,"longitude" : longitude,"wifi24":{"txPower" : wifi24_txPower,"availableChannelRange":[ wifi24_availableChannelRange],"channelWidth" : wifi24_channelWidth,"channelRange":[ wifi24_channelRange],"channel" : wifi24_channel},"usbSoftwarePackage":{"applyModel":[ usbSoftwarePackage_applyModel],"usbSoftware":{"id" : usbSoftwarePackage_usbSoftware_id,"name" : usbSoftwarePackage_usbSoftware_name}},"clientAdmissionControl50":{"minClientCount" : clientAdmissionControl50_minClientCount,"maxRadioLoadPercent" : clientAdmissionControl50_maxRadioLoadPercent,"minClientThroughputMbps" : clientAdmissionControl50_minClientThroughputMbps,"enabled" : clientAdmissionControl50_enabled},"clientAdmissionControl24":{"minClientCount" : clientAdmissionControl24_minClientCount,"maxRadioLoadPercent" : clientAdmissionControl24_maxRadioLoadPercent,"minClientThroughputMbps" : clientAdmissionControl24_minClientThroughputMbps,"enabled" : clientAdmissionControl24_enabled},"wlanGroup50":{"id" : wlanGroup50_id,"name" : wlanGroup50_name},"latitude" : latitude,"awsVenue" : awsVenue,"locationBasedService":{"enabled" : locationBasedService_enabled,"id" : locationBasedService_id,"name" : locationBasedService_name},"locationAdditionalInfo" : locationAdditionalInfo,"channelEvaluationInterval" : channelEvaluationInterval,"wifi50":{"secondaryChannelIndoor" : wifi50_secondaryChannelIndoor,"channelWidth" : wifi50_channelWidth,"outdoorChannel" : wifi50_outdoorChannel,"availableOutdoorChannelRange":[ wifi50_availableOutdoorChannelRange],"indoorChannel" : wifi50_indoorChannel,"txPower" : wifi50_txPower,"indoorChannelRange":[ wifi50_indoorChannelRange],"secondaryChannelOutdoor" : wifi50_secondaryChannelOutdoor,"availableIndoorChannelRange":[ wifi50_availableIndoorChannelRange],"outdoorChannelRange":[ wifi50_outdoorChannelRange]},"apMgmtVlan":{"mode" : apMgmtVlan_mode,"id" : apMgmtVlan_id}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/apgroups/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_get_hotspot20_wlan_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Hotspot20 Wlan Profile    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/hs20s/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_get_bonjour_fencing_policy(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Bonjour Fencing Policy    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/bonjourFencingPolicy/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_disable_ap_group_override_v3_since_wifi50_indoor_channel_range(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi50 Indoor Channel Range    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi50/indoorChannelRange'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_wlan_attribute_v1_since_accounting_service_or_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Wlan Attribute V1 Since Accounting Service Or Profile    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlans/{id}/accountingServiceOrProfile'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_dpsk_info_by_id_v4(self, url_zoneId, url_id, url_dpskId):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_dpskId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dpsk Info By Id V4    url_zoneId    url_id    url_dpskId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlans/{id}/dpsk/{dpskId}'.format(zoneId=url_zoneId,id=url_id,dpskId=url_dpskId))
        return response
        

    def rkszones_get_hotspot20_wlan_profiles(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Hotspot20 Wlan Profiles    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/hs20s'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_delete_wechat(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Wechat    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/portals/wechat/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_attribute_altitude(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Altitude    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/altitude'.format(id=url_id))
        

    def rkszones_create_hotspot_smart_client_only(self, url_zoneId, macAddressFormat, name, smartClientInfo, location_name=None, description=None, walledGardens=None, userSession_gracePeriodInMin=None, redirect_url=None, location_id=None, userSession_timeoutInMin=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the Hotspot
        smartClientInfo (String)  : Smart client info of the Hotspot
        macAddressFormat (Integer)  : mac address format of redirection
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        walledGardens (String)  : Walled garden map set of the Hotspot
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        location_id (String)  : Portal location id
        location_name (String)  : Portal location name
        description (String)  : Description of the Hotspot
        
        Robot Format :
        Rkszones Create Hotspot Smart Client Only    url_zoneId    name    smartClientInfo    macAddressFormat
        '''
        
        data={"redirect":{"url" : redirect_url},"name" : name,"walledGardens":[ walledGardens],"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"location":{"id" : location_id,"name" : location_name},"smartClientInfo" : smartClientInfo,"macAddressFormat" : macAddressFormat,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/portals/hotspot/smartClientOnly'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_ap_group_override_v3_since_wifi24_channel(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi24 Channel    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi24/channel'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_by_zone_id(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get By Zone Id    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/clientIsolationWhitelist'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_delete_bulk_client_isolation_whitelist(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Rkszones Delete Bulk Client Isolation Whitelist    
        '''
        
        response = self.session.delete('/rkszones/clientIsolationWhitelist')
        

    def rkszones_delete(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}'.format(id=url_id))
        

    def rkszones_update_guest_access_basic(self, url_zoneId, url_id, smsGateway_name=None, name=None, portalCustomization_language=None, portalCustomization_termsAndConditionsText=None, userSession_timeoutInMin=None, userSession_gracePeriodInMin=None, portalCustomization_title=None, smsGateway_id=None, portalCustomization_logo=None, redirect_url=None, portalCustomization_termsAndConditionsRequired=None, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        smsGateway_id : ""
        smsGateway_name : ""
        portalCustomization_logo (String)  : logo
        portalCustomization_termsAndConditionsRequired (Boolean)  : Terms and conditions is required or not
        portalCustomization_termsAndConditionsText (String)  : Terms and conditions text
        portalCustomization_language : ""
        portalCustomization_title (String)  : Title
        name (String)  : Name of the guest access profile
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        description (String)  : Description of the guest access profile
        
        Robot Format :
        Rkszones Update Guest Access Basic    url_zoneId    url_id
        '''
        
        data={"redirect":{"url" : redirect_url},"smsGateway":{"id" : smsGateway_id,"name" : smsGateway_name},"portalCustomization":{"logo" : portalCustomization_logo,"termsAndConditionsRequired" : portalCustomization_termsAndConditionsRequired,"termsAndConditionsText" : portalCustomization_termsAndConditionsText,"language" : portalCustomization_language,"title" : portalCustomization_title},"name" : name,"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/portals/guest/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_disable_attribute_client_load_balancing50(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Client Load Balancing50    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/clientLoadBalancing50'.format(id=url_id))
        

    def rkszones_create_ldap_server(self, baseDomainName, keyAttribute, name, searchFilter, url_zoneId, ip, password, port, adminDomainName, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the LDAP server
        ip (String)  : IP address
        port (Integer)  : Port
        baseDomainName (String)  : Base domain name
        adminDomainName (String)  : Admin domain name
        password (String)  : Admin password
        keyAttribute (String)  : Key attribute
        searchFilter (String)  : Search filter
        
        Optional Params  :
        description (String)  : Description of the LDAP server
        
        Robot Format :
        Rkszones Create Ldap Server    url_zoneId    name    ip    port    baseDomainName    adminDomainName    password    keyAttribute    searchFilter
        '''
        
        data={"baseDomainName" : baseDomainName,"password" : password,"name" : name,"searchFilter" : searchFilter,"ip" : ip,"keyAttribute" : keyAttribute,"port" : port,"adminDomainName" : adminDomainName,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/aaa/ldap'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_web_authentication_attr(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Web Authentication Attr    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/portals/webauth/{id}/redirect'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_ap_group_override_venue_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Venue Profile    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/venueProfile'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_ap_group_override_location(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Location    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/location'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_diff_serv_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Diff Serv List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/diffserv'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_get_guest_access_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Guest Access List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/portals/guest'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_get_ldap_server(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ldap Server    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/aaa/ldap/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_delete_bonjour_fencing_policy(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Bonjour Fencing Policy    url_id
        '''
        
        response = self.session.delete('/rkszones/bonjourFencingPolicy/{id}'.format(id=url_id))
        

    def rkszones_get_bonjour_fencing_policy_by_zone_id(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Bonjour Fencing Policy By Zone Id    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/bonjourFencingPolicy'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_delete_wlan(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Wlan    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlans/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_ap_group_override_auto_channel_selection50(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Auto Channel Selection50    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/autoChannelSelection50'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_update_hotspot20_venue_profile(self, url_zoneId, url_id, group=None, name=None, uplinkSpeedInKbps=None, type=None, description=None, venueNames_language=None, venueNames_name=None, downlinkSpeedInKbps=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        group (Enum)  : Category group of the Hotspot 2.0 venue profile
        name (String)  : Name of the Hotspot 2.0 venue profile
        uplinkSpeedInKbps (Integer)  : Uplink Speed of the Hotspot 2.0 venue profile
        venueNames_name (String)  : Venue name
        venueNames_language (Enum)  : Friendly name of venue
        downlinkSpeedInKbps (Integer)  : Downlink Speed of the Hotspot 2.0 venue profile
        type (String)  : Category type of the Hotspot 2.0 venue profile
        description (String)  : Description of the Hotspot 2.0 venue profile
        
        Robot Format :
        Rkszones Update Hotspot20 Venue Profile    url_zoneId    url_id
        '''
        
        data={"group" : group,"name" : name,"uplinkSpeedInKbps" : uplinkSpeedInKbps,"venueNames":[{"name" : venueNames_name,"language" : venueNames_language}],"downlinkSpeedInKbps" : downlinkSpeedInKbps,"type" : type,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/hs20/venues/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_modify_client_isolation_whitelist(self, url_zoneId, url_id, description=None, whitelist_description=None, whitelist_mac=None, clientIsolationAutoEnabled=None, whitelist_ip=None, name=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        whitelist_ip (String)  : Client Entry ip
        whitelist_mac (String)  : Client Entry Mac
        whitelist_description (String)  : Client Entry description
        clientIsolationAutoEnabled (Boolean)  : Client Isolation Auto Enable
        name (String)  : Client Isolation Whitelist name
        description (String)  : Client Isolation Whitelist description
        
        Robot Format :
        Rkszones Modify Client Isolation Whitelist    url_zoneId    url_id
        '''
        
        data={"whitelist":[{"ip" : whitelist_ip,"mac" : whitelist_mac,"description" : whitelist_description}],"clientIsolationAutoEnabled" : clientIsolationAutoEnabled,"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/clientIsolationWhitelist/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_delete_domain(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Domain    url_id
        '''
        
        response = self.session.delete('/rkszones/domains/{id}'.format(id=url_id))
        

    def rkszones_get_zone_dpsk_enabled_ssid_info(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Zone Dpsk Enabled Ssid Info    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/dpskEnabledWlans'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_delete_hotspot20_venue_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Hotspot20 Venue Profile    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/hs20/venues/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_bonjour_gateway_policies(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Bonjour Gateway Policies    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/bounjourGateway/policies/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_get_dpsk_info_by_wlan_v4(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dpsk Info By Wlan V4    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlans/{id}/dpsk'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_get_delete_expired_dpsk(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Delete Expired Dpsk    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/deleteExpiredDpsk'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_create_usb_software_package(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Create Usb Software Package    url_zoneId
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/usbsoftware'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_create_wlan_scheduler(self, url_zoneId, name, description=None, wed=None, sun=None, thu=None, mon=None, fri=None, tue=None, sat=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN schedule
        
        Optional Params  :
        wed (String)  : Schedules on Wednesday
        sun (String)  : Schedules on Sunday
        thu (String)  : Schedules on Thursday
        description (String)  : Description of the WLAN schedule
        tue (String)  : Schedules on Tuesday
        mon (String)  : Schedules on Monday
        fri (String)  : Schedules on Friday
        sat (String)  : Schedules on Saturday
        
        Robot Format :
        Rkszones Create Wlan Scheduler    url_zoneId    name
        '''
        
        data={"name" : name,"wed":[ wed],"sun":[ sun],"thu":[ thu],"description" : description,"tue":[ tue],"mon":[ mon],"fri":[ fri],"sat":[ sat]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlanSchedulers'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_by_id(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get By Id    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/clientIsolationWhitelist/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_get_wlan(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wlan    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlans/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_generate_assign_ip_dhcp_site_config_bo(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Generate Assign Ip Dhcp Site Config Bo    url_zoneId
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/dhcpSite/dhcpSiteConfig/doAssignIp'.format(zoneId=url_zoneId),jdata)
        return response
        

    def rkszones_create_wlan_standard_mac(self, authServiceOrProfile_locationDeliveryEnabled, authServiceOrProfile_throughController, name, url_zoneId, authServiceOrProfile_id, authServiceOrProfile_name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        authServiceOrProfile_locationDeliveryEnabled (Boolean)  : RFC5580 location delivery support
        authServiceOrProfile_id (String)  : Identifier of the authentication service or profile. At least one ID or name is required in the request.
        authServiceOrProfile_throughController (Boolean)  : Indicates whether authentication messages were sent through the controller or not
        authServiceOrProfile_name (String)  : Name of the authentication service or profile. At least one ID or name is required in the request.
        
        Optional Params  :
        hessid (String)  : HESSID of the WLAN
        description (String)  : Description of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Standard Mac    url_zoneId    name    ssid    authServiceOrProfile_locationDeliveryEnabled    authServiceOrProfile_id    authServiceOrProfile_throughController    authServiceOrProfile_name
        '''
        
        data={"ssid" : ssid,"hessid" : hessid,"description" : description,"name" : name,"authServiceOrProfile":{"locationDeliveryEnabled" : authServiceOrProfile_locationDeliveryEnabled,"id" : authServiceOrProfile_id,"throughController" : authServiceOrProfile_throughController,"name" : authServiceOrProfile_name}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/standardmac'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_ldap_server_list(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ldap Server List    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/aaa/ldap'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_create_wlan_wechat(self, url_zoneId, portalServiceProfile_name, portalServiceProfile_id, name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        portalServiceProfile_id : ""
        portalServiceProfile_name : ""
        
        Optional Params  :
        hessid (String)  : HESSID of the WLAN
        description (String)  : Description of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Wechat    url_zoneId    name    ssid    portalServiceProfile_id    portalServiceProfile_name
        '''
        
        data={"ssid" : ssid,"hessid" : hessid,"description" : description,"portalServiceProfile":{"id" : portalServiceProfile_id,"name" : portalServiceProfile_name},"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/wechat'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_delete_wlan_group_member(self, url_zoneId, url_id, url_memberId):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_memberId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Wlan Group Member    url_zoneId    url_id    url_memberId
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/wlangroups/{id}/members/{memberId}'.format(zoneId=url_zoneId,id=url_id,memberId=url_memberId))
        

    def rkszones_create_block_client(self, url_zoneId, mac, description=None, modifiedDateTime=None, creatorUsername=None, creatorId=None, modifierUsername=None, createDateTime=None, modifierId=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        mac (String)  : MAC of the Block Client
        
        Optional Params  :
        description (String)  : Description of the Block Client
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        createDateTime (Integer)  : Timestamp of being created
        modifierId (String)  : Modifier ID
        
        Robot Format :
        Rkszones Create Block Client    url_zoneId    mac
        '''
        
        data={"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"mac" : mac,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"createDateTime" : createDateTime,"modifierId" : modifierId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/blockClient'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_update(self, url_id, smartMonitor_retryThreshold=None, syslog_facility=None, dosBarringEnable=None, altitude_altitudeUnit=None, timezone_customizedTimezone_end_hour=None, snmpAgent_snmpV3Agent_notificationType=None, login_apLoginName=None, wifi50_availableOutdoorChannelRange=None, tunnelProfile_id=None, usbSoftwarePackage_usbSoftware_name=None, clientLoadBalancing24_adjacentRadioThreshold=None, location=None, latitude=None, bonjourFencingPolicyEnabled=None, snmpAgent_snmpV2Agent_notificationTarget_port=None, venueProfile_name=None, timezone_customizedTimezone_start_week=None, snmpAgent_snmpV2Agent_readEnabled=None, clientAdmissionControl50_maxRadioLoadPercent=None, autoChannelSelection50_channelFlyMtbc=None, clientAdmissionControl50_minClientCount=None, snmpAgent_snmpV3Agent_readEnabled=None, wifi50_txPower=None, locationBasedService_id=None, name=None, login_apLoginPassword=None, snmpAgent_snmpV2Agent_notificationType=None, clientLoadBalancing50_adjacentRadioThreshold=None, dhcpSiteConfig_siteMode=None, dhcpSiteConfig_manualSelect=None, snmpAgent_snmpV2Agent_communityName=None, channelEvaluationInterval=None, wifi24_channelRange=None, dfsChannelEnabled=None, timezone_customizedTimezone_abbreviation=None, backgroundScanning24_frequencyInSec=None, wifi24_channelWidth=None, altitude_altitudeValue=None, snmpAgent_snmpV3Agent_writeEnabled=None, wifi50_outdoorChannelRange=None, timezone_customizedTimezone_end_week=None, apMgmtVlan_mode=None, clientAdmissionControl24_minClientCount=None, snmpAgent_snmpV3Agent_authProtocol=None, recoverySsid_recoverySsidEnable=None, tunnelType=None, usbSoftwarePackage_usbSoftware_id=None, timezone_customizedTimezone_gmtOffset=None, wifi24_availableChannelRange=None, backgroundScanning50_frequencyInSec=None, snmpAgent_snmpV2Agent_notificationTarget_address=None, dhcpSiteConfig_siteAps_apServerEnabled=None, snmpAgent_snmpV3Agent_notificationTarget_port=None, channelModeEnabled=None, clientAdmissionControl24_maxRadioLoadPercent=None, snmpAgent_snmpV3Agent_userName=None, timezone_systemTimezone=None, wifi50_availableIndoorChannelRange=None, usbSoftwarePackage_applyModel=None, mesh_ssid=None, snmpAgent_snmpV2Agent_writeEnabled=None, dhcpSiteConfig_siteAps_apMac=None, wifi50_secondaryChannelOutdoor=None, apMgmtVlan_id=None, vlanOverlappingEnabled=None, snmpAgent_snmpV3Agent_privPassword=None, locationAdditionalInfo=None, recoverySsid_recoverySsidPskKey=None, autoChannelSelection24_channelSelectMode=None, snmpAgent_snmpV3Agent_privProtocol=None, smartMonitor_intervalInSec=None, wifi50_channelWidth=None, timezone_customizedTimezone_start_hour=None, rogue_maliciousTypes=None, dhcpSiteConfig_siteAps_apServerPrimary=None, tunnelProfile_name=None, wifi24_txPower=None, bandBalancing_wifi24Percentage=None, dhcpSiteConfig_siteAps_apStatus=None, timezone_customizedTimezone_end_month=None, dosBarringCheckPeriod=None, nodeAffinityProfile_id=None, bonjourFencingPolicy_id=None, dhcpSiteConfig_siteAps_apName=None, apRebootTimeout_gatewayLossTimeoutInSec=None, timezone_customizedTimezone_start_day=None, rogue_reportType=None, bonjourFencingPolicy_name=None, wifi50_indoorChannelRange=None, dosBarringPeriod=None, dhcpSiteConfig_siteAps_apServerIp=None, timezone_customizedTimezone_start_month=None, wifi50_secondaryChannelIndoor=None, ipsecProfile_id=None, longitude=None, snmpAgent_snmpV3Agent_notificationEnabled=None, autoChannelSelection24_channelFlyMtbc=None, nodeAffinityProfile_name=None, venueProfile_id=None, countryCode=None, snmpAgent_snmpV2Agent_notificationEnabled=None, syslog_port=None, wifi50_indoorChannel=None, clientAdmissionControl24_minClientThroughputMbps=None, dhcpSiteConfig_siteAps_apGatewayIp=None, snmpAgent_apSnmpEnabled=None, dhcpSiteConfig_siteProfileIds=None, apRebootTimeout_serverLossTimeoutInSec=None, dosBarringThreshold=None, mesh_passphrase=None, snmpAgent_snmpV3Agent_authPassword=None, dhcpSiteConfig_siteEnabled=None, description=None, timezone_customizedTimezone_end_day=None, ipv6TrafficFilterEnabled=None, ipsecProfile_name=None, timezone_customizedTimezone_gmtOffsetMinute=None, autoChannelSelection50_channelSelectMode=None, syslog_address=None, locationBasedService_name=None, domainId=None, rogue_protectionEnabled=None, wifi24_channel=None, wifi50_outdoorChannel=None, clientAdmissionControl50_minClientThroughputMbps=None, syslog_priority=None, snmpAgent_snmpV3Agent_notificationTarget_address=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        dhcpSiteConfig_siteProfileIds : ""
        dhcpSiteConfig_siteEnabled (Boolean)  : DHCP Service Enabling Status
        dhcpSiteConfig_siteMode (Enum)  : DHCP Service mode
        dhcpSiteConfig_siteAps_apName : ""
        dhcpSiteConfig_siteAps_apStatus : ""
        dhcpSiteConfig_siteAps_apServerIp : ""
        dhcpSiteConfig_siteAps_apMac : ""
        dhcpSiteConfig_siteAps_apServerEnabled : ""
        dhcpSiteConfig_siteAps_apGatewayIp : ""
        dhcpSiteConfig_siteAps_apServerPrimary : ""
        dhcpSiteConfig_manualSelect (Boolean)  : DHCP Service AP Selection Mode
        countryCode (String)  : Country code of the zone
        syslog_priority (Enum)  : Priority of the log messages
        syslog_facility (Enum)  : Facility of the syslog server
        syslog_port (Integer)  : Port number of the syslog server
        syslog_address (String)  : Address of the syslog server.
        clientAdmissionControl24_minClientCount (Integer)  : Minimum client count number.
        clientAdmissionControl24_maxRadioLoadPercent (Integer)  : Maximum radio load percentage.
        clientAdmissionControl24_minClientThroughputMbps (Integer)  : Minimum client throughput in Mbps.
        dosBarringEnable (Integer)  : Enable DoS Protection(Barring UE) of the zone.
        timezone_customizedTimezone_abbreviation (String)  : Time zone abbreviation
        timezone_customizedTimezone_start_week (Enum)  : Week of the month (1 for the first week, 2 for the second week, and so on)
        timezone_customizedTimezone_start_day (Enum)  : Day of the week (0 for Sunday, 1 for Monday, 2 for Tuesday, and so on)
        timezone_customizedTimezone_start_hour (Integer)  : Hour of the day
        timezone_customizedTimezone_start_month (Enum)  : Month when daylight saving time begins
        timezone_customizedTimezone_gmtOffsetMinute (Integer)  : GMT offset minute
        timezone_customizedTimezone_end_week (Enum)  : Week of the month (1 for the first week, 2 for the second week, and so on)
        timezone_customizedTimezone_end_day (Enum)  : Day of the week (0 for Sunday, 1 for Monday, 2 for Tuesday, and so on)
        timezone_customizedTimezone_end_hour (Integer)  : Hour of the day
        timezone_customizedTimezone_end_month (Enum)  : Month when daylight saving time begins
        timezone_customizedTimezone_gmtOffset (Integer)  : GMT offset 
        timezone_systemTimezone (String)  : System defined time zone
        backgroundScanning50_frequencyInSec (Integer)  : Frequency in second
        bonjourFencingPolicy_id : ""
        bonjourFencingPolicy_name : ""
        channelEvaluationInterval (Integer)  : channel evaluation Interval of the zone
        wifi50_secondaryChannelIndoor (Integer)  : Secondary channel number for Indoor AP (channelWidth is 80+80MHz only)
        wifi50_channelWidth (Enum)  : Channel width. Zero (0) means Auto. 8080 means 80+80MHz
        wifi50_outdoorChannel (Integer)  : Channel number for Outdoor AP
        wifi50_availableOutdoorChannelRange (Integer)  : Available channel range options
        wifi50_indoorChannel (Integer)  : Channel number for Indoor AP
        wifi50_txPower (Enum)  : Transmission power
        wifi50_indoorChannelRange (Integer)  : Channel range options for Indoor AP
        wifi50_secondaryChannelOutdoor (Integer)  : Secondary channel number for outdoor AP (channelWidth is 80+80MHz only)
        wifi50_availableIndoorChannelRange (Integer)  : Available channel range options
        wifi50_outdoorChannelRange (Integer)  : Channel range options for outdoor AP
        description (String)  : Description of the zone
        dfsChannelEnabled (Boolean)  : DFS Channel enabled configuration of the zone, only for the US country code .
        smartMonitor_retryThreshold (Integer)  : Retry threshold. This is required if smartMonitor is enabled
        smartMonitor_intervalInSec (Integer)  : Interval in seconds. This is required if smartMonitor is enabled
        tunnelType : ""
        vlanOverlappingEnabled (Boolean)  : VLAN pooling overlapping of the zone
        backgroundScanning24_frequencyInSec (Integer)  : Frequency in second
        altitude_altitudeValue (Integer)  : altitude value
        altitude_altitudeUnit (Enum)  : altitude unit
        tunnelProfile_id : ""
        tunnelProfile_name : ""
        clientLoadBalancing24_adjacentRadioThreshold (Integer)  : Adjacent radio threshold
        dosBarringThreshold (Integer)  : DoS Protection(Barring UE) threshold of the zone.
        latitude (Integer)  : Latitude coordinate (in decimal format) of the zone
        bonjourFencingPolicyEnabled (Boolean)  : Enable Bonjour Fencing Policy on the AP
        bandBalancing_wifi24Percentage (Integer)  : Percentage of client load on 2.4GHz radio band
        dosBarringPeriod (Integer)  : DoS Protection(Barring UE) blocking period of the zone.
        dosBarringCheckPeriod (Integer)  : DoS Protection(Barring UE) check period of the zone.
        nodeAffinityProfile_id : ""
        nodeAffinityProfile_name : ""
        apMgmtVlan_mode (Enum)  : Vlan Mode of the zone
        apMgmtVlan_id (Integer)  : Vlan id of the zone
        location (String)  : Location of the zone.
        wifi24_txPower (Enum)  : Transmission power
        wifi24_availableChannelRange (Integer)  : Available channel range options
        wifi24_channelWidth (Enum)  : Channel width. Zero (0) means Auto.
        wifi24_channelRange (Integer)  : Channel range options
        wifi24_channel (Integer)  : Channel number
        mesh_ssid (String)  : SSID of the mesh network
        mesh_passphrase (String)  : Passphrase for the mesh network
        clientAdmissionControl50_minClientCount (Integer)  : Minimum client count number.
        clientAdmissionControl50_maxRadioLoadPercent (Integer)  : Maximum radio load percentage.
        clientAdmissionControl50_minClientThroughputMbps (Integer)  : Minimum client throughput in Mbps.
        autoChannelSelection24_channelFlyMtbc (Integer)  : ChannelFly MTBC
        autoChannelSelection24_channelSelectMode (Enum)  : Channel Select Mode
        ipv6TrafficFilterEnabled (Integer)  : IPv6 Traffic filtering on the AP
        login_apLoginName (String)  : User name of the AP administrator
        login_apLoginPassword (String)  : Password of the AP administrator
        recoverySsid_recoverySsidPskKey (String)  : recovery ssid password
        recoverySsid_recoverySsidEnable (Integer)  : recovery ssid enable/disable
        venueProfile_id : ""
        venueProfile_name : ""
        domainId (String)  : Identifier of the management domain to which the zone belongs
        name (String)  : Name of the zone
        usbSoftwarePackage_applyModel (String)  : List of apply models
        usbSoftwarePackage_usbSoftware_id : ""
        usbSoftwarePackage_usbSoftware_name : ""
        autoChannelSelection50_channelFlyMtbc (Integer)  : ChannelFly MTBC
        autoChannelSelection50_channelSelectMode (Enum)  : Channel Select Mode
        ipsecProfile_id : ""
        ipsecProfile_name : ""
        longitude (Integer)  : Longitude coordinate (in decimal format) of the zone
        locationBasedService_id : ""
        locationBasedService_name : ""
        apRebootTimeout_gatewayLossTimeoutInSec (Enum)  : Gateway loss timeout in second
        apRebootTimeout_serverLossTimeoutInSec (Enum)  : Server loss timeout in second
        rogue_protectionEnabled (Boolean)  : Protection enabled
        rogue_maliciousTypes (Enum)  : Malicious type when reportType is Malicious
        rogue_reportType (Enum)  : Report type
        clientLoadBalancing50_adjacentRadioThreshold (Integer)  : Adjacent radio threshold
        channelModeEnabled (Boolean)  : Channel mode configuration of the zone.
        locationAdditionalInfo (String)  : Location additional info of the zone.
        snmpAgent_snmpV2Agent_notificationType (Enum)  : type of the notification privilege
        snmpAgent_snmpV2Agent_writeEnabled (Boolean)  : write privilege of the SNMP Coummunity
        snmpAgent_snmpV2Agent_notificationTarget_port (Integer)  : port number of the SNMP Trap
        snmpAgent_snmpV2Agent_notificationTarget_address (String)  : address of the SNMP Trap
        snmpAgent_snmpV2Agent_communityName (String)  : name of the SNMP Community.
        snmpAgent_snmpV2Agent_readEnabled (Boolean)  : read privilege of the SNMP Coummunity
        snmpAgent_snmpV2Agent_notificationEnabled (Boolean)  : notification privilege of the SNMP Coummunity
        snmpAgent_snmpV3Agent_userName (String)  : name of the SNMP User.
        snmpAgent_snmpV3Agent_notificationType (Enum)  : type of the notification privilege
        snmpAgent_snmpV3Agent_authProtocol (Enum)  : authProtocol of the SNMP User.
        snmpAgent_snmpV3Agent_privProtocol (Enum)  : privProtocol of the SNMP User.
        snmpAgent_snmpV3Agent_writeEnabled (Boolean)  : write privilege of the SNMP User
        snmpAgent_snmpV3Agent_notificationTarget_port (Integer)  : port number of the SNMP Trap
        snmpAgent_snmpV3Agent_notificationTarget_address (String)  : address of the SNMP Trap
        snmpAgent_snmpV3Agent_privPassword (String)  : privPassword of the SNMP User.
        snmpAgent_snmpV3Agent_readEnabled (Boolean)  : read privilege of the SNMP User
        snmpAgent_snmpV3Agent_authPassword (String)  : authPassword of the SNMP User.
        snmpAgent_snmpV3Agent_notificationEnabled (Boolean)  : notification privilege of the SNMP User
        snmpAgent_apSnmpEnabled (Boolean)  : Enable AP SNMP
        
        Robot Format :
        Rkszones Update    url_id
        '''
        
        data={"dhcpSiteConfig":{"siteProfileIds":[ dhcpSiteConfig_siteProfileIds],"siteEnabled" : dhcpSiteConfig_siteEnabled,"siteMode" : dhcpSiteConfig_siteMode,"siteAps":[{"apName" : dhcpSiteConfig_siteAps_apName,"apStatus" : dhcpSiteConfig_siteAps_apStatus,"apServerIp" : dhcpSiteConfig_siteAps_apServerIp,"apMac" : dhcpSiteConfig_siteAps_apMac,"apServerEnabled" : dhcpSiteConfig_siteAps_apServerEnabled,"apGatewayIp" : dhcpSiteConfig_siteAps_apGatewayIp,"apServerPrimary" : dhcpSiteConfig_siteAps_apServerPrimary}],"manualSelect" : dhcpSiteConfig_manualSelect},"countryCode" : countryCode,"syslog":{"priority" : syslog_priority,"facility" : syslog_facility,"port" : syslog_port,"address" : syslog_address},"clientAdmissionControl24":{"minClientCount" : clientAdmissionControl24_minClientCount,"maxRadioLoadPercent" : clientAdmissionControl24_maxRadioLoadPercent,"minClientThroughputMbps" : clientAdmissionControl24_minClientThroughputMbps},"dosBarringEnable" : dosBarringEnable,"timezone":{"customizedTimezone":{"abbreviation" : timezone_customizedTimezone_abbreviation,"start":{"week" : timezone_customizedTimezone_start_week,"day" : timezone_customizedTimezone_start_day,"hour" : timezone_customizedTimezone_start_hour,"month" : timezone_customizedTimezone_start_month},"gmtOffsetMinute" : timezone_customizedTimezone_gmtOffsetMinute,"end":{"week" : timezone_customizedTimezone_end_week,"day" : timezone_customizedTimezone_end_day,"hour" : timezone_customizedTimezone_end_hour,"month" : timezone_customizedTimezone_end_month},"gmtOffset" : timezone_customizedTimezone_gmtOffset},"systemTimezone" : timezone_systemTimezone},"backgroundScanning50":{"frequencyInSec" : backgroundScanning50_frequencyInSec},"bonjourFencingPolicy":{"id" : bonjourFencingPolicy_id,"name" : bonjourFencingPolicy_name},"channelEvaluationInterval" : channelEvaluationInterval,"wifi50":{"secondaryChannelIndoor" : wifi50_secondaryChannelIndoor,"channelWidth" : wifi50_channelWidth,"outdoorChannel" : wifi50_outdoorChannel,"availableOutdoorChannelRange":[ wifi50_availableOutdoorChannelRange],"indoorChannel" : wifi50_indoorChannel,"txPower" : wifi50_txPower,"indoorChannelRange":[ wifi50_indoorChannelRange],"secondaryChannelOutdoor" : wifi50_secondaryChannelOutdoor,"availableIndoorChannelRange":[ wifi50_availableIndoorChannelRange],"outdoorChannelRange":[ wifi50_outdoorChannelRange]},"description" : description,"dfsChannelEnabled" : dfsChannelEnabled,"smartMonitor":{"retryThreshold" : smartMonitor_retryThreshold,"intervalInSec" : smartMonitor_intervalInSec},"tunnelType" : tunnelType,"vlanOverlappingEnabled" : vlanOverlappingEnabled,"backgroundScanning24":{"frequencyInSec" : backgroundScanning24_frequencyInSec},"altitude":{"altitudeValue" : altitude_altitudeValue,"altitudeUnit" : altitude_altitudeUnit},"tunnelProfile":{"id" : tunnelProfile_id,"name" : tunnelProfile_name},"clientLoadBalancing24":{"adjacentRadioThreshold" : clientLoadBalancing24_adjacentRadioThreshold},"dosBarringThreshold" : dosBarringThreshold,"latitude" : latitude,"bonjourFencingPolicyEnabled" : bonjourFencingPolicyEnabled,"bandBalancing":{"wifi24Percentage" : bandBalancing_wifi24Percentage},"dosBarringPeriod" : dosBarringPeriod,"dosBarringCheckPeriod" : dosBarringCheckPeriod,"nodeAffinityProfile":{"id" : nodeAffinityProfile_id,"name" : nodeAffinityProfile_name},"apMgmtVlan":{"mode" : apMgmtVlan_mode,"id" : apMgmtVlan_id},"location" : location,"wifi24":{"txPower" : wifi24_txPower,"availableChannelRange":[ wifi24_availableChannelRange],"channelWidth" : wifi24_channelWidth,"channelRange":[ wifi24_channelRange],"channel" : wifi24_channel},"mesh":{"ssid" : mesh_ssid,"passphrase" : mesh_passphrase},"clientAdmissionControl50":{"minClientCount" : clientAdmissionControl50_minClientCount,"maxRadioLoadPercent" : clientAdmissionControl50_maxRadioLoadPercent,"minClientThroughputMbps" : clientAdmissionControl50_minClientThroughputMbps},"autoChannelSelection24":{"channelFlyMtbc" : autoChannelSelection24_channelFlyMtbc,"channelSelectMode" : autoChannelSelection24_channelSelectMode},"ipv6TrafficFilterEnabled" : ipv6TrafficFilterEnabled,"login":{"apLoginName" : login_apLoginName,"apLoginPassword" : login_apLoginPassword},"recoverySsid":{"recoverySsidPskKey" : recoverySsid_recoverySsidPskKey,"recoverySsidEnable" : recoverySsid_recoverySsidEnable},"venueProfile":{"id" : venueProfile_id,"name" : venueProfile_name},"domainId" : domainId,"name" : name,"usbSoftwarePackage":{"applyModel":[ usbSoftwarePackage_applyModel],"usbSoftware":{"id" : usbSoftwarePackage_usbSoftware_id,"name" : usbSoftwarePackage_usbSoftware_name}},"autoChannelSelection50":{"channelFlyMtbc" : autoChannelSelection50_channelFlyMtbc,"channelSelectMode" : autoChannelSelection50_channelSelectMode},"ipsecProfile":{"id" : ipsecProfile_id,"name" : ipsecProfile_name},"longitude" : longitude,"locationBasedService":{"id" : locationBasedService_id,"name" : locationBasedService_name},"apRebootTimeout":{"gatewayLossTimeoutInSec" : apRebootTimeout_gatewayLossTimeoutInSec,"serverLossTimeoutInSec" : apRebootTimeout_serverLossTimeoutInSec},"rogue":{"protectionEnabled" : rogue_protectionEnabled,"maliciousTypes":[ rogue_maliciousTypes],"reportType" : rogue_reportType},"clientLoadBalancing50":{"adjacentRadioThreshold" : clientLoadBalancing50_adjacentRadioThreshold},"channelModeEnabled" : channelModeEnabled,"locationAdditionalInfo" : locationAdditionalInfo,"snmpAgent":{"snmpV2Agent":[{"notificationType" : snmpAgent_snmpV2Agent_notificationType,"writeEnabled" : snmpAgent_snmpV2Agent_writeEnabled,"notificationTarget":[{"port" : snmpAgent_snmpV2Agent_notificationTarget_port,"address" : snmpAgent_snmpV2Agent_notificationTarget_address}],"communityName" : snmpAgent_snmpV2Agent_communityName,"readEnabled" : snmpAgent_snmpV2Agent_readEnabled,"notificationEnabled" : snmpAgent_snmpV2Agent_notificationEnabled}],"snmpV3Agent":[{"userName" : snmpAgent_snmpV3Agent_userName,"notificationType" : snmpAgent_snmpV3Agent_notificationType,"authProtocol" : snmpAgent_snmpV3Agent_authProtocol,"privProtocol" : snmpAgent_snmpV3Agent_privProtocol,"writeEnabled" : snmpAgent_snmpV3Agent_writeEnabled,"notificationTarget":[{"port" : snmpAgent_snmpV3Agent_notificationTarget_port,"address" : snmpAgent_snmpV3Agent_notificationTarget_address}],"privPassword" : snmpAgent_snmpV3Agent_privPassword,"readEnabled" : snmpAgent_snmpV3Agent_readEnabled,"authPassword" : snmpAgent_snmpV3Agent_authPassword,"notificationEnabled" : snmpAgent_snmpV3Agent_notificationEnabled}],"apSnmpEnabled" : snmpAgent_apSnmpEnabled}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{id}'.format(id=url_id),jdata)
        

    def rkszones_get_l2_acl(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get L2 Acl    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/l2ACL/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_delete_ethernet_port_profile(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Ethernet Port Profile    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/profile/ethernetPort/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_zone_id_and_name_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Zone Id And Name List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/basicInfo/query',jdata)
        return response
        

    def rkszones_create_wlan_standard80211(self, authServiceOrProfile_locationDeliveryEnabled, authServiceOrProfile_throughController, name, url_zoneId, authServiceOrProfile_id, authServiceOrProfile_name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        authServiceOrProfile_locationDeliveryEnabled (Boolean)  : RFC5580 location delivery support
        authServiceOrProfile_id (String)  : Identifier of the authentication service or profile. At least one ID or name is required in the request.
        authServiceOrProfile_throughController (Boolean)  : Indicates whether authentication messages were sent through the controller or not
        authServiceOrProfile_name (String)  : Name of the authentication service or profile. At least one ID or name is required in the request.
        
        Optional Params  :
        hessid (String)  : HESSID of the WLAN
        description (String)  : Description of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Standard80211    url_zoneId    name    ssid    authServiceOrProfile_locationDeliveryEnabled    authServiceOrProfile_id    authServiceOrProfile_throughController    authServiceOrProfile_name
        '''
        
        data={"ssid" : ssid,"hessid" : hessid,"description" : description,"name" : name,"authServiceOrProfile":{"locationDeliveryEnabled" : authServiceOrProfile_locationDeliveryEnabled,"id" : authServiceOrProfile_id,"throughController" : authServiceOrProfile_throughController,"name" : authServiceOrProfile_name}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/standard80211'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_diff_serv(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Diff Serv    url_zoneId    url_id
        '''
        
        response = self.session.get('/rkszones/{zoneId}/diffserv/{id}'.format(zoneId=url_zoneId,id=url_id))
        return response
        

    def rkszones_update_bonjour_gateway_enable(self, url_zoneId, enabledBonjourGateway):
        '''
        Mandatory Params :
        url_zoneId : ""
        enabledBonjourGateway (Boolean)  : Enable Bonjour gateway on th AP
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Update Bonjour Gateway Enable    url_zoneId    enabledBonjourGateway
        '''
        
        data={"enabledBonjourGateway" : enabledBonjourGateway}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/bounjourGateway/enable'.format(zoneId=url_zoneId),jdata)
        

    def rkszones_disable_ap_group_override_wifi24(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override Wifi24    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi24'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_dhcp_profile_list_by_zone_id(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dhcp Profile List By Zone Id    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/dhcpSite/dhcpProfile'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_get_hotspot20_venue_profiles(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Hotspot20 Venue Profiles    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/hs20/venues'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_update_active_directory_server(self, url_zoneId, url_id, name=None, ip=None, description=None, windowsDomainName=None, globalCatalogEnabled=None, password=None, port=None, adminDomainName=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        name (String)  : Name of the active directory server
        ip (String)  : IP address
        windowsDomainName (String)  : Windows domain name
        globalCatalogEnabled (Boolean)  : Enable global catalog support
        password (String)  : Admin password
        port (Integer)  : Port
        adminDomainName (String)  : Admin domain name
        description (String)  : Description of the active directory server
        
        Robot Format :
        Rkszones Update Active Directory Server    url_zoneId    url_id
        '''
        
        data={"name" : name,"ip" : ip,"windowsDomainName" : windowsDomainName,"globalCatalogEnabled" : globalCatalogEnabled,"password" : password,"port" : port,"adminDomainName" : adminDomainName,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/aaa/ad/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def rkszones_get_ethernet_port_profiles(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ethernet Port Profiles    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/profile/ethernetPort'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_create_wlan_hotspot(self, authServiceOrProfile_locationDeliveryEnabled, authServiceOrProfile_throughController, name, url_zoneId, authServiceOrProfile_id, authServiceOrProfile_name, portalServiceProfile_id, portalServiceProfile_name, ssid, description=None, hessid=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the WLAN
        ssid (String)  : SSID of the WLAN
        authServiceOrProfile_locationDeliveryEnabled (Boolean)  : RFC5580 location delivery support
        authServiceOrProfile_id (String)  : Identifier of the authentication service or profile. At least one ID or name is required in the request.
        authServiceOrProfile_throughController (Boolean)  : Indicates whether authentication messages were sent through the controller or not
        authServiceOrProfile_name (String)  : Name of the authentication service or profile. At least one ID or name is required in the request.
        portalServiceProfile_id : ""
        portalServiceProfile_name : ""
        
        Optional Params  :
        description (String)  : Description of the WLAN
        hessid (String)  : HESSID of the WLAN
        
        Robot Format :
        Rkszones Create Wlan Hotspot    url_zoneId    name    ssid    authServiceOrProfile_locationDeliveryEnabled    authServiceOrProfile_id    authServiceOrProfile_throughController    authServiceOrProfile_name    portalServiceProfile_id    portalServiceProfile_name
        '''
        
        data={"ssid" : ssid,"description" : description,"name" : name,"portalServiceProfile":{"id" : portalServiceProfile_id,"name" : portalServiceProfile_name},"hessid" : hessid,"authServiceOrProfile":{"locationDeliveryEnabled" : authServiceOrProfile_locationDeliveryEnabled,"id" : authServiceOrProfile_id,"throughController" : authServiceOrProfile_throughController,"name" : authServiceOrProfile_name}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/wlans/wispr'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_ap_groups(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Ap Groups    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/apgroups'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_deassociate_ap_group(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Deassociate Ap Group    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/usbSoftwarePackage'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_delete_dhcp_profile_by_profile_id(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Delete Dhcp Profile By Profile Id    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/dhcpSite/dhcpProfile/{id}'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_disable_attribute_client_admission_control50(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Attribute Client Admission Control50    url_id
        '''
        
        response = self.session.delete('/rkszones/{id}/clientAdmissionControl50'.format(id=url_id))
        

    def rkszones_disable_ap_group_override_v3_since_wifi50_outdoor_channel(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Ap Group Override V3 Since Wifi50 Outdoor Channel    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/apgroups/{id}/wifi50/outdoorChannel'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_get_dpsk_info_by_id(self, url_zoneId, url_id, url_dpskId):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        url_dpskId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Dpsk Info By Id    url_zoneId    url_id    url_dpskId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlans/{id}/dpsk/{dpskId}'.format(zoneId=url_zoneId,id=url_id,dpskId=url_dpskId))
        return response
        

    def rkszones_create_ap_group(self, url_zoneId, name, description=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the AP group
        
        Optional Params  :
        description (String)  : Description of the AP group
        
        Robot Format :
        Rkszones Create Ap Group    url_zoneId    name
        '''
        
        data={"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/apgroups'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_wlan_list_by_group_type_and_group_id(self, url_groupId):
        '''
        Mandatory Params :
        url_groupId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wlan List By Group Type And Group Id    url_groupId
        '''
        
        response = self.session.get('/rkszones/wlans?groupId={groupId}'.format(groupId=url_groupId))
        return response
        

    def rkszones_create_hotspot20_venue_profile(self, url_zoneId, venueNames_language, venueNames_name, name, uplinkSpeedInKbps=None, type=None, group=None, description=None, downlinkSpeedInKbps=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the Hotspot 2.0 venue profile
        venueNames_name (String)  : Venue name
        venueNames_language (Enum)  : Friendly name of venue
        
        Optional Params  :
        group (Enum)  : Category group of the Hotspot 2.0 venue profile
        uplinkSpeedInKbps (Integer)  : Uplink Speed of the Hotspot 2.0 venue profile
        downlinkSpeedInKbps (Integer)  : Downlink Speed of the Hotspot 2.0 venue profile
        type (String)  : Category type of the Hotspot 2.0 venue profile
        description (String)  : Description of the Hotspot 2.0 venue profile
        
        Robot Format :
        Rkszones Create Hotspot20 Venue Profile    url_zoneId    name    venueNames_name    venueNames_language
        '''
        
        data={"group" : group,"name" : name,"uplinkSpeedInKbps" : uplinkSpeedInKbps,"venueNames":[{"name" : venueNames_name,"language" : venueNames_language}],"downlinkSpeedInKbps" : downlinkSpeedInKbps,"type" : type,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/hs20/venues'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_disable_guest_access_attribute_redirect(self, url_zoneId, url_id):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Disable Guest Access Attribute Redirect    url_zoneId    url_id
        '''
        
        response = self.session.delete('/rkszones/{zoneId}/portals/guest/{id}/redirect'.format(zoneId=url_zoneId,id=url_id))
        

    def rkszones_create_hotspot_internal(self, url_zoneId, macAddressFormat, name, smartClientSupport, location_name=None, description=None, walledGardens=None, userSession_gracePeriodInMin=None, redirect_url=None, location_id=None, userSession_timeoutInMin=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        name (String)  : Name of the Hotspot
        smartClientSupport (Enum)  : Smart client support of the Hotspot
        macAddressFormat (Integer)  : mac address format of redirection
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        walledGardens (String)  : Walled garden map set of the Hotspot
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        location_id (String)  : Portal location id
        location_name (String)  : Portal location name
        description (String)  : Description of the Hotspot
        
        Robot Format :
        Rkszones Create Hotspot Internal    url_zoneId    name    smartClientSupport    macAddressFormat
        '''
        
        data={"redirect":{"url" : redirect_url},"name" : name,"walledGardens":[ walledGardens],"smartClientSupport" : smartClientSupport,"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"location":{"id" : location_id,"name" : location_name},"macAddressFormat" : macAddressFormat,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/rkszones/{zoneId}/portals/hotspot/internal'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def rkszones_get_wlan_groups(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Rkszones Get Wlan Groups    url_zoneId
        '''
        
        response = self.session.get('/rkszones/{zoneId}/wlangroups'.format(zoneId=url_zoneId))
        return response
        

    def rkszones_update_web_authentication(self, url_zoneId, url_id, description=None, userSession_timeoutInMin=None, userSession_gracePeriodInMin=None, portalLanguage=None, redirect_url=None, name=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        url_id : ""
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        portalLanguage (Enum)  : Portal language of the web authentication profile
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        name (String)  : Name of the web authentication profile
        description (String)  : Description of the web authentication profile
        
        Robot Format :
        Rkszones Update Web Authentication    url_zoneId    url_id
        '''
        
        data={"redirect":{"url" : redirect_url},"portalLanguage" : portalLanguage,"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/rkszones/{zoneId}/portals/webauth/{id}'.format(zoneId=url_zoneId,id=url_id),jdata)
        

    def trafficAnalysis_aggregate_usage_by_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Usage By Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/wlan/usage',jdata)
        return response
        

    def trafficAnalysis_get_usage_list_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Usage List From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/line/usage/wlan',jdata)
        return response
        

    def trafficAnalysis_get_usage_avg_and_group_aps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Usage Avg And Group Aps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/aggs/usage/group/ap',jdata)
        return response
        

    def trafficAnalysis_get_clients_max_avg_min_and_self_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Clients Max Avg Min And Self From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/aggs/clients/wlan',jdata)
        return response
        

    def trafficAnalysis_get_clients_max_avg_min_and_self_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Clients Max Avg Min And Self From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/aggs/clients/ap',jdata)
        return response
        

    def trafficAnalysis_get_usage_avg_and_group_wlans(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Usage Avg And Group Wlans    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/aggs/usage/group/wlan',jdata)
        return response
        

    def trafficAnalysis_get_clients_avg_and_group_wlans(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Clients Avg And Group Wlans    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/aggs/clients/group/wlan',jdata)
        return response
        

    def trafficAnalysis_get_clients_avg_and_group_a_ps(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Clients Avg And Group A Ps    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/aggs/clients/group/ap',jdata)
        return response
        

    def trafficAnalysis_aggregate_usage_by_app_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Usage By App From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/client/app/ap',jdata)
        return response
        

    def trafficAnalysis_get_agg_clients_list_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Agg Clients List From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/line/aggclients/wlan',jdata)
        return response
        

    def trafficAnalysis_get_usage_list_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Usage List From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/line/usage/ap',jdata)
        return response
        

    def trafficAnalysis_aggregate_usage_by_client_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Usage By Client From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/client/usage/wlan',jdata)
        return response
        

    def trafficAnalysis_get_usage_max_avg_min_and_self_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Usage Max Avg Min And Self From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/aggs/usage/wlan',jdata)
        return response
        

    def trafficAnalysis_aggregate_client_count_by_os_type_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Client Count By Os Type From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/client/os/wlan',jdata)
        return response
        

    def trafficAnalysis_get_os_clients_list_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Os Clients List From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/line/clients/os/wlan',jdata)
        return response
        

    def trafficAnalysis_get_agg_clients_list_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Agg Clients List From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/line/aggclients/ap',jdata)
        return response
        

    def trafficAnalysis_aggregate_usage_by_top_client_from_app(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Usage By Top Client From App    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/client/app/topclient',jdata)
        return response
        

    def trafficAnalysis_get_os_clients_list_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Os Clients List From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/line/clients/os/ap',jdata)
        return response
        

    def trafficAnalysis_aggregate_usage_by_client_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Usage By Client From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/client/usage/ap',jdata)
        return response
        

    def trafficAnalysis_aggregate_usage_by_top_app_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Usage By Top App From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/client/app/topapp',jdata)
        return response
        

    def trafficAnalysis_aggregate_avg_clients_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Avg Clients By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/ap/clients/avg',jdata)
        return response
        

    def trafficAnalysis_get_clients_list_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Clients List From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/line/clients/wlan',jdata)
        return response
        

    def trafficAnalysis_get_clients_list_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Clients List From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/line/clients/ap',jdata)
        return response
        

    def trafficAnalysis_aggregate_usage_by_app_from_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Usage By App From Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/client/app/wlan',jdata)
        return response
        

    def trafficAnalysis_aggregate_client_count_by_os_type_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Client Count By Os Type From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/client/os/ap',jdata)
        return response
        

    def trafficAnalysis_aggregate_max_clients_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Max Clients By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/ap/clients/max',jdata)
        return response
        

    def trafficAnalysis_aggregate_usage_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Usage By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/ap/usage',jdata)
        return response
        

    def trafficAnalysis_get_usage_max_avg_min_and_self_from_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Get Usage Max Avg Min And Self From Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/aggs/usage/ap',jdata)
        return response
        

    def trafficAnalysis_aggregate_clients_by_wlan(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Clients By Wlan    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/wlan/clients',jdata)
        return response
        

    def trafficAnalysis_aggregate_clients_by_ap(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Trafficanalysis Aggregate Clients By Ap    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/trafficAnalysis/ap/clients',jdata)
        return response
        

    def userGroups_get(self, url_userGroupId):
        '''
        Mandatory Params :
        url_userGroupId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Usergroups Get    url_userGroupId
        '''
        
        response = self.session.get('/userGroups/{userGroupId}'.format(userGroupId=url_userGroupId))
        return response
        

    def userGroups_create(self, resourceGroups_id=None, users_email=None, permissions_ids=None, users_companyName=None, id=None, modifierId=None, users_userName=None, modifiedDateTime=None, creatorUsername=None, users_creatorUsername=None, users_modifiedDateTime=None, users_id=None, permissions_display=None, role=None, users_phone=None, permissions_resource=None, createDateTime=None, permissions_access=None, description=None, resourceGroups_type=None, users_creatorId=None, users_domainId=None, users_createDateTime=None, users_title=None, domainId=None, name=None, users_modifierUsername=None, users_modifierId=None, tenantId=None, creatorId=None, modifierUsername=None, users_passphrase=None, users_realName=None, users_tenantUUID=None, users_enabled=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : User group description
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        name (String)  : User group name
        resourceGroups_type (Enum)  : the type of SCG resource group
        resourceGroups_id (String)  : the identifier of the SCG resource group
        tenantId (String)  : Tenant Id
        role (String)  : User group role
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        id (String)  : User group Id
        permissions_access (Enum)  : Access level
        permissions_resource (String)  : Resource type
        permissions_display (String)  : Resource display name
        permissions_ids (String)  : Resource id list
        createDateTime (Integer)  : Timestamp of being created
        modifierId (String)  : Modifier ID
        users_userName (String)  : User name
        users_tenantUUID (String)  : Tenant id
        users_realName (String)  : User real name
        users_modifiedDateTime (Integer)  : Timestamp of being modified
        users_companyName (String)  : User company name
        users_createDateTime (Integer)  : Timestamp of being created
        users_title (String)  : User title
        users_enabled (Enum)  : User enabled or not
        users_id (String)  : User id
        users_phone (String)  : User phone
        users_domainId (String)  : Domain id
        users_creatorUsername (String)  : Creator Name
        users_creatorId (String)  : Creator ID
        users_modifierUsername (String)  : Modifier Name
        users_passphrase (String)  : User login passphrase
        users_email (String)  : User email
        users_modifierId (String)  : Modifier ID
        
        Robot Format :
        Usergroups Create    
        '''
        
        data={"domainId" : domainId,"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"name" : name,"resourceGroups":[{"type" : resourceGroups_type,"id" : resourceGroups_id}],"tenantId" : tenantId,"role" : role,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"id" : id,"permissions":[{"access" : permissions_access,"resource" : permissions_resource,"display" : permissions_display,"ids":[ permissions_ids]}],"createDateTime" : createDateTime,"modifierId" : modifierId,"users":[{"userName" : users_userName,"tenantUUID" : users_tenantUUID,"realName" : users_realName,"modifiedDateTime" : users_modifiedDateTime,"companyName" : users_companyName,"createDateTime" : users_createDateTime,"title" : users_title,"enabled" : users_enabled,"id" : users_id,"phone" : users_phone,"domainId" : users_domainId,"creatorUsername" : users_creatorUsername,"creatorId" : users_creatorId,"modifierUsername" : users_modifierUsername,"passphrase" : users_passphrase,"email" : users_email,"modifierId" : users_modifierId}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/userGroups',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def userGroups_get_allowed_categories_by_pre_defined_role(self, url_role):
        '''
        Mandatory Params :
        url_role : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Usergroups Get Allowed Categories By Pre Defined Role    url_role
        '''
        
        response = self.session.get('/userGroups/roles/{role}/permissions'.format(role=url_role))
        return response
        

    def userGroups_update(self, url_userGroupId, resourceGroups_id=None, users_email=None, permissions_ids=None, users_companyName=None, id=None, modifierId=None, users_userName=None, modifiedDateTime=None, creatorUsername=None, users_creatorUsername=None, users_modifiedDateTime=None, users_id=None, permissions_display=None, role=None, users_phone=None, permissions_resource=None, createDateTime=None, permissions_access=None, description=None, resourceGroups_type=None, users_creatorId=None, users_domainId=None, users_createDateTime=None, users_title=None, domainId=None, name=None, users_modifierUsername=None, users_modifierId=None, tenantId=None, creatorId=None, modifierUsername=None, users_passphrase=None, users_realName=None, users_tenantUUID=None, users_enabled=None):
        '''
        Mandatory Params :
        url_userGroupId : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : User group description
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        name (String)  : User group name
        resourceGroups_type (Enum)  : the type of SCG resource group
        resourceGroups_id (String)  : the identifier of the SCG resource group
        tenantId (String)  : Tenant Id
        role (String)  : User group role
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        id (String)  : User group Id
        permissions_access (Enum)  : Access level
        permissions_resource (String)  : Resource type
        permissions_display (String)  : Resource display name
        permissions_ids (String)  : Resource id list
        createDateTime (Integer)  : Timestamp of being created
        modifierId (String)  : Modifier ID
        users_userName (String)  : User name
        users_tenantUUID (String)  : Tenant id
        users_realName (String)  : User real name
        users_modifiedDateTime (Integer)  : Timestamp of being modified
        users_companyName (String)  : User company name
        users_createDateTime (Integer)  : Timestamp of being created
        users_title (String)  : User title
        users_enabled (Enum)  : User enabled or not
        users_id (String)  : User id
        users_phone (String)  : User phone
        users_domainId (String)  : Domain id
        users_creatorUsername (String)  : Creator Name
        users_creatorId (String)  : Creator ID
        users_modifierUsername (String)  : Modifier Name
        users_passphrase (String)  : User login passphrase
        users_email (String)  : User email
        users_modifierId (String)  : Modifier ID
        
        Robot Format :
        Usergroups Update    url_userGroupId
        '''
        
        data={"domainId" : domainId,"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"name" : name,"resourceGroups":[{"type" : resourceGroups_type,"id" : resourceGroups_id}],"tenantId" : tenantId,"role" : role,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"id" : id,"permissions":[{"access" : permissions_access,"resource" : permissions_resource,"display" : permissions_display,"ids":[ permissions_ids]}],"createDateTime" : createDateTime,"modifierId" : modifierId,"users":[{"userName" : users_userName,"tenantUUID" : users_tenantUUID,"realName" : users_realName,"modifiedDateTime" : users_modifiedDateTime,"companyName" : users_companyName,"createDateTime" : users_createDateTime,"title" : users_title,"enabled" : users_enabled,"id" : users_id,"phone" : users_phone,"domainId" : users_domainId,"creatorUsername" : users_creatorUsername,"creatorId" : users_creatorId,"modifierUsername" : users_modifierUsername,"passphrase" : users_passphrase,"email" : users_email,"modifierId" : users_modifierId}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/userGroups/{userGroupId}'.format(userGroupId=url_userGroupId),jdata)
        

    def userGroups_delete_by_ids(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Usergroups Delete By Ids    
        '''
        
        response = self.session.delete('/userGroups')
        

    def userGroups_get_merged_permission_categories(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Usergroups Get Merged Permission Categories    
        '''
        
        response = self.session.get('/userGroups/currentUser/permissionCategories')
        return response
        

    def userGroups_query(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Usergroups Query    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/userGroups/query',jdata)
        return response
        

    def userGroups_get_pre_defined_roles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Usergroups Get Pre Defined Roles    
        '''
        
        response = self.session.get('/userGroups/roles')
        return response
        

    def userGroups_delete(self, url_userGroupId):
        '''
        Mandatory Params :
        url_userGroupId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Usergroups Delete    url_userGroupId
        '''
        
        response = self.session.delete('/userGroups/{userGroupId}'.format(userGroupId=url_userGroupId))
        

    def users_delete_by_id(self, url_userId):
        '''
        Mandatory Params :
        url_userId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Users Delete By Id    url_userId
        '''
        
        response = self.session.delete('/users/{userId}'.format(userId=url_userId))
        

    def users_create(self, userName=None, tenantUUID=None, realName=None, modifiedDateTime=None, companyName=None, createDateTime=None, title=None, enabled=None, id=None, phone=None, domainId=None, creatorUsername=None, creatorId=None, modifierUsername=None, passphrase=None, email=None, modifierId=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        userName (String)  : User name
        tenantUUID (String)  : Tenant id
        realName (String)  : User real name
        modifiedDateTime (Integer)  : Timestamp of being modified
        title (String)  : User title
        companyName (String)  : User company name
        enabled (Enum)  : User enabled or not
        email (String)  : User email
        phone (String)  : User phone
        domainId (String)  : Domain id
        creatorUsername (String)  : Creator Name
        modifierId (String)  : Modifier ID
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        id (String)  : User id
        createDateTime (Integer)  : Timestamp of being created
        passphrase (String)  : User login passphrase
        
        Robot Format :
        Users Create    
        '''
        
        data={"userName" : userName,"tenantUUID" : tenantUUID,"realName" : realName,"modifiedDateTime" : modifiedDateTime,"title" : title,"companyName" : companyName,"enabled" : enabled,"email" : email,"phone" : phone,"domainId" : domainId,"creatorUsername" : creatorUsername,"modifierId" : modifierId,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"id" : id,"createDateTime" : createDateTime,"passphrase" : passphrase}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/users',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def users_patch(self, url_userId, userName=None, tenantUUID=None, realName=None, modifiedDateTime=None, companyName=None, createDateTime=None, title=None, enabled=None, id=None, phone=None, domainId=None, creatorUsername=None, creatorId=None, modifierUsername=None, passphrase=None, email=None, modifierId=None):
        '''
        Mandatory Params :
        url_userId : ""
        
        Optional Params  :
        userName (String)  : User name
        tenantUUID (String)  : Tenant id
        realName (String)  : User real name
        modifiedDateTime (Integer)  : Timestamp of being modified
        title (String)  : User title
        companyName (String)  : User company name
        enabled (Enum)  : User enabled or not
        email (String)  : User email
        phone (String)  : User phone
        domainId (String)  : Domain id
        creatorUsername (String)  : Creator Name
        modifierId (String)  : Modifier ID
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        id (String)  : User id
        createDateTime (Integer)  : Timestamp of being created
        passphrase (String)  : User login passphrase
        
        Robot Format :
        Users Patch    url_userId
        '''
        
        data={"userName" : userName,"tenantUUID" : tenantUUID,"realName" : realName,"modifiedDateTime" : modifiedDateTime,"title" : title,"companyName" : companyName,"enabled" : enabled,"email" : email,"phone" : phone,"domainId" : domainId,"creatorUsername" : creatorUsername,"modifierId" : modifierId,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"id" : id,"createDateTime" : createDateTime,"passphrase" : passphrase}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/users/{userId}'.format(userId=url_userId),jdata)
        

    def users_delete_by_ids(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Users Delete By Ids    
        '''
        
        response = self.session.delete('/users')
        

    def users_query(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Users Query    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/users/query',jdata)
        return response
        

    def users_get_by_id(self, url_userId):
        '''
        Mandatory Params :
        url_userId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Users Get By Id    url_userId
        '''
        
        response = self.session.get('/users/{userId}'.format(userId=url_userId))
        return response
        

    def tool_trace_route_test(self, url_targetIP, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        url_targetIP : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Tool Trace Route Test    url_apMac    url_targetIP
        '''
        
        response = self.session.get('/tool/traceRoute?apMac={apMac}&targetIP={targetIP}'.format(apMac=url_apMac,targetIP=url_targetIP))
        return response
        

    def tool_start_test(self, tool, protocol, serverMac=None, serverIp=None, clientMac=None, syspmtu=None, clientIp=None, model=None):
        '''
        Mandatory Params :
        tool (Enum)  : SpeedFlex tool
        protocol (Enum)  : Protocol used in the SpeedFlex test
        
        Optional Params  :
        serverMac (String)  : The AP MAC address is resolved from the client MAC address if none is specified
        serverIp (String)  : The AP IP address is resolved from the client IP address if none is specified
        clientMac (String)  : The HTTP request remove MAC address is used if none is specified
        syspmtu (Integer)  : Default: 1500
        clientIp (String)  : The HTTP request remove address is used if none is specified
        model (Enum)  : Test model
        
        Robot Format :
        Tool Start Test    tool    protocol
        '''
        
        data={"serverMac" : serverMac,"protocol" : protocol,"tool" : tool,"serverIp" : serverIp,"clientMac" : clientMac,"syspmtu" : syspmtu,"clientIp" : clientIp,"model" : model}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/tool/speedflex',jdata)
        return response
        

    def tool_ping_test(self, url_targetIP, url_apMac):
        '''
        Mandatory Params :
        url_apMac : ""
        url_targetIP : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Tool Ping Test    url_apMac    url_targetIP
        '''
        
        response = self.session.get('/tool/ping?apMac={apMac}&targetIP={targetIP}'.format(apMac=url_apMac,targetIP=url_targetIP))
        return response
        

    def tool_get_test_result(self, url_wcid):
        '''
        Mandatory Params :
        url_wcid : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Tool Get Test Result    url_wcid
        '''
        
        response = self.session.get('/tool/speedflex/{wcid}'.format(wcid=url_wcid))
        return response
        

    def alert_acknowledge_alarms(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Alert Acknowledge Alarms    
        '''
        
        data={"idList":[ idList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/alert/alarm/ack',jdata)
        

    def alert_get_event_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Alert Get Event List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/alert/event/list',jdata)
        return response
        

    def alert_clear_alarm(self, url_alarmID):
        '''
        Mandatory Params :
        url_alarmID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Alert Clear Alarm    url_alarmID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/alert/alarm/{alarmID}/clear'.format(alarmID=url_alarmID),jdata)
        

    def alert_clear_alarms(self, comment=None, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        comment (String)  : Comment for clearing alarm
        idList : ""
        
        Robot Format :
        Alert Clear Alarms    
        '''
        
        data={"comment" : comment,"idList":[ idList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/alert/alarm/clear',jdata)
        

    def alert_acknowledge_alarm(self, url_alarmID):
        '''
        Mandatory Params :
        url_alarmID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Alert Acknowledge Alarm    url_alarmID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/alert/alarm/{alarmID}/ack'.format(alarmID=url_alarmID),jdata)
        

    def alert_get_alarm_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Alert Get Alarm List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/alert/alarm/list',jdata)
        return response
        

    def blockClient_create_by_ap_mac(self, mac, url_apMac, description=None, modifiedDateTime=None, creatorUsername=None, creatorId=None, modifierUsername=None, createDateTime=None, modifierId=None):
        '''
        Mandatory Params :
        url_apMac : ""
        mac (String)  : MAC of the Block Client
        
        Optional Params  :
        description (String)  : Description of the Block Client
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        createDateTime (Integer)  : Timestamp of being created
        modifierId (String)  : Modifier ID
        
        Robot Format :
        Blockclient Create By Ap Mac    url_apMac    mac
        '''
        
        data={"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"mac" : mac,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"createDateTime" : createDateTime,"modifierId" : modifierId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/blockClient/byApMac/{apMac}'.format(apMac=url_apMac),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def blockClient_modify_block_client(self, url_id, mac=None, description=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        mac (String)  : MAC of the Block Client
        description (String)  : Description of the Block Client
        
        Robot Format :
        Blockclient Modify Block Client    url_id
        '''
        
        data={"mac" : mac,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/blockClient/{id}'.format(id=url_id),jdata)
        

    def blockClient_delete_block_clients(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Blockclient Delete Block Clients    
        '''
        
        response = self.session.delete('/blockClient')
        

    def blockClient_query(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Blockclient Query    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/blockClient/query',jdata)
        return response
        

    def blockClient_put_block_client(self, url_id, mac=None, description=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        mac (String)  : MAC of the Block Client
        description (String)  : Description of the Block Client
        
        Robot Format :
        Blockclient Put Block Client    url_id
        '''
        
        data={"mac" : mac,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/blockClient/{id}'.format(id=url_id),jdata)
        

    def blockClient_get_by_zone_id(self, url_zoneId):
        '''
        Mandatory Params :
        url_zoneId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Blockclient Get By Zone Id    url_zoneId
        '''
        
        response = self.session.get('/blockClient/byZone/{zoneId}'.format(zoneId=url_zoneId))
        return response
        

    def blockClient_get_by_id(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Blockclient Get By Id    url_id
        '''
        
        response = self.session.get('/blockClient/{id}'.format(id=url_id))
        return response
        

    def blockClient_delete_block_client(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Blockclient Delete Block Client    url_id
        '''
        
        response = self.session.delete('/blockClient/{id}'.format(id=url_id))
        

    def blockClient_create(self, blockClientList_creatorUsername=None, blockClientList_createDateTime=None, blockClientList_creatorId=None, blockClientList_modifierUsername=None, description=None, blockClientList_modifierId=None, blockClientList_mac=None, blockClientList_apMac=None, blockClientList_description=None, blockClientList_modifiedDateTime=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        blockClientList_description (String)  : Description of the Block Client
        blockClientList_modifiedDateTime (Integer)  : Timestamp of being modified
        blockClientList_creatorUsername (String)  : Creator Name
        blockClientList_mac (String)  : MAC of the Block Client
        blockClientList_creatorId (String)  : Creator ID
        blockClientList_modifierUsername (String)  : Modifier Name
        blockClientList_createDateTime (Integer)  : Timestamp of being created
        blockClientList_modifierId (String)  : Modifier ID
        blockClientList_apMac (String)  : MAC of the AP
        description (String)  : Description of the Block Client
        
        Robot Format :
        Blockclient Create    
        '''
        
        data={"blockClientList":[{"description" : blockClientList_description,"modifiedDateTime" : blockClientList_modifiedDateTime,"creatorUsername" : blockClientList_creatorUsername,"mac" : blockClientList_mac,"creatorId" : blockClientList_creatorId,"modifierUsername" : blockClientList_modifierUsername,"createDateTime" : blockClientList_createDateTime,"modifierId" : blockClientList_modifierId,"apMac" : blockClientList_apMac}],"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/blockClient',jdata)
        return response
        

    def blockClient_create_by_zone_id(self, url_zoneId, mac, description=None, modifiedDateTime=None, creatorUsername=None, creatorId=None, modifierUsername=None, createDateTime=None, modifierId=None):
        '''
        Mandatory Params :
        url_zoneId : ""
        mac (String)  : MAC of the Block Client
        
        Optional Params  :
        description (String)  : Description of the Block Client
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        createDateTime (Integer)  : Timestamp of being created
        modifierId (String)  : Modifier ID
        
        Robot Format :
        Blockclient Create By Zone Id    url_zoneId    mac
        '''
        
        data={"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"mac" : mac,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"createDateTime" : createDateTime,"modifierId" : modifierId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/blockClient/{zoneId}'.format(zoneId=url_zoneId),jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def groups_get_ap_count(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Groups Get Ap Count    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/groups/query/apCount',jdata)
        return response
        

    def groups_get_index_domain_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Groups Get Index Domain List    
        '''
        
        response = self.session.get('/groups/query/index/domain')
        return response
        

    def groups_get_a_ps(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Groups Get A Ps    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/groups/query/ap',jdata)
        return response
        

    def groups_get_index_ap_group_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Groups Get Index Ap Group List    
        '''
        
        response = self.session.get('/groups/query/index/apgroup')
        return response
        

    def groups_get_index_ap_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Groups Get Index Ap List    
        '''
        
        response = self.session.get('/groups/query/index/ap')
        return response
        

    def groups_get_index_zone_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Groups Get Index Zone List    
        '''
        
        response = self.session.get('/groups/query/index/zone')
        return response
        

    def groups_get_clients(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Groups Get Clients    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/groups/query/client',jdata)
        return response
        

    def cluster_control_remove_control_blade(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Remove Control Blade    url_bladeUUID
        '''
        
        response = self.session.delete('/cluster/control/{bladeUUID}/remove'.format(bladeUUID=url_bladeUUID))
        

    def cluster_control_get_cp_interface_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Get Cp Interface List    
        '''
        
        response = self.session.get('/cluster/control/interfacelist')
        return response
        

    def cluster_control_update_control_plane_binding_i_ps(self, url_bindingips):
        '''
        Mandatory Params :
        url_bindingips : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Update Control Plane Binding I Ps    url_bindingips
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/control/control/bindingips/{bindingips}'.format(bindingips=url_bindingips),jdata)
        

    def cluster_control_update_internal_subnet(self, url_internalSub):
        '''
        Mandatory Params :
        url_internalSub : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Update Internal Subnet    url_internalSub
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/control/internalsubnet/{internalSub}'.format(internalSub=url_internalSub),jdata)
        

    def cluster_control_fetch_removing_status(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Fetch Removing Status    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/control/{bladeUUID}/removalStatus'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_control_get_cp_port_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Get Cp Port List    
        '''
        
        response = self.session.get('/cluster/control/portlist')
        return response
        

    def cluster_control_get_all_control_blade_nodes(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Get All Control Blade Nodes    
        '''
        
        response = self.session.get('/cluster/control/nodes')
        return response
        

    def cluster_control_get_all_control_blade_ids(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Get All Control Blade Ids    
        '''
        
        response = self.session.get('/cluster/control/ids')
        return response
        

    def cluster_control_get_cp_statistics_by_blade(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Get Cp Statistics By Blade    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/control/{bladeUUID}/statistics'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_control_get_all_control_blades(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Get All Control Blades    
        '''
        
        response = self.session.get('/cluster/control')
        return response
        

    def cluster_control_get_control_blades_interfaces(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Get Control Blades Interfaces    
        '''
        
        response = self.session.get('/cluster/control/interfaces')
        return response
        

    def cluster_control_fetch_rebooting_status(self, url_dpMac):
        '''
        Mandatory Params :
        url_dpMac : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Fetch Rebooting Status    url_dpMac
        '''
        
        response = self.session.get('/cluster/control/data/{dpMac}/rebootingStatus'.format(dpMac=url_dpMac))
        return response
        

    def cluster_control_get_control_blade_by_id(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Get Control Blade By Id    url_bladeUUID
        '''
        
        response = self.session.get('/cluster/control/{bladeUUID}'.format(bladeUUID=url_bladeUUID))
        return response
        

    def cluster_control_apply_ap_connect_ip(self, url_bladeUUID):
        '''
        Mandatory Params :
        url_bladeUUID : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Cluster Control Apply Ap Connect Ip    url_bladeUUID
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/cluster/control/nat/{bladeUUID}'.format(bladeUUID=url_bladeUUID),jdata)
        

    def services_delete_active_directory_authentication_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Delete Active Directory Authentication Service    url_id
        '''
        
        response = self.session.delete('/services/auth/ad/{id}'.format(id=url_id))
        

    def services_update_ldap_authentication_service(self, url_id, baseDomainName=None, password=None, domainId=None, description=None, searchFilter=None, ip=None, mappings_userRole_id=None, tlsEnabled=None, port=None, mappings_groupAttr=None, mappings_userRole_name=None, friendlyName=None, keyAttribute=None, type=None, id=None, adminDomainName=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        baseDomainName (String)  : Base domain name
        keyAttribute (String)  : Key attribute
        description (String)  : Description of the LDAP authentication service
        searchFilter (String)  : Search filter
        ip (String)  : IP address
        tlsEnabled (Boolean)  : LDAP over TLS Enabled
        name (String)  : Name of the LDAP authentication service
        id (String)  : Identifier of the authentication service
        domainId (String)  : Domain Id
        friendlyName (String)  : Friendly name of the LDAP authentication service
        password (String)  : Admin password
        type (Enum)  : Authentication protocol same as protocol.
        port (Integer)  : Port
        adminDomainName (String)  : Admin domain name
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Update Ldap Authentication Service    url_id
        '''
        
        data={"baseDomainName" : baseDomainName,"keyAttribute" : keyAttribute,"description" : description,"searchFilter" : searchFilter,"ip" : ip,"tlsEnabled" : tlsEnabled,"name" : name,"id" : id,"domainId" : domainId,"friendlyName" : friendlyName,"password" : password,"type" : type,"port" : port,"adminDomainName" : adminDomainName,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/auth/ldap/{id}'.format(id=url_id),jdata)
        

    def services_get_local_db_authentication(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Local Db Authentication    url_id
        '''
        
        response = self.session.get('/services/auth/local_db/{id}'.format(id=url_id))
        return response
        

    def services_delete_authentication_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Delete Authentication Service    url_id
        '''
        
        response = self.session.delete('/services/auth/{id}'.format(id=url_id))
        

    def services_test_authentication(self, url_id, loginRequest_userName=None, id=None, loginRequest_protocol=None, loginRequest_timeZoneUtcOffset=None, loginRequest_password=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        loginRequest_userName (String)  : name for test user
        loginRequest_timeZoneUtcOffset (String)  : timezone offset, ex: '+8'
        loginRequest_password (String)  : password for test user
        loginRequest_protocol : ""
        id (String)  : Identifier of the authentication service
        
        Robot Format :
        Services Test Authentication    url_id
        '''
        
        data={"loginRequest":{"userName" : loginRequest_userName,"timeZoneUtcOffset" : loginRequest_timeZoneUtcOffset,"password" : loginRequest_password,"protocol" : loginRequest_protocol},"id" : id}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/test/{id}'.format(id=url_id),jdata)
        return response
        

    def services_create_radius_accounting(self, primary_port, primary_sharedSecret, primary_ip, name, secondary_ip=None, domainId=None, protocol=None, description=None, healthCheckPolicy_responseWindow=None, rateLimiting_threshold=None, secondary_autoFallbackDisable=None, rateLimiting_sanityTimer=None, rateLimiting_maxOutstandingRequestsPerServer=None, secondary_port=None, secondary_sharedSecret=None, healthCheckPolicy_reviveInterval=None, healthCheckPolicy_zombiePeriod=None, healthCheckPolicy_responseFail=None, type=None):
        '''
        Mandatory Params :
        name (String)  : Name of the RADIUS accounting service
        primary_ip (String)  : Server IP
        primary_port (Integer)  : Server port
        primary_sharedSecret (String)  : Server shared secrect
        
        Optional Params  :
        domainId (String)  : Domain Id
        protocol (Enum)  : Accounting protocol.
        description (String)  : Description of the RADIUS accounting service
        healthCheckPolicy_reviveInterval (Integer)  : Revive interval
        healthCheckPolicy_responseWindow (Integer)  : Response window
        healthCheckPolicy_zombiePeriod (Integer)  : Zombie period
        healthCheckPolicy_responseFail (Boolean)  : Response Fail
        rateLimiting_threshold (Integer)  : Threshold, value should be 0 if MOR is 0, or between 10 and 90 if MOR is between 10 and 4096
        rateLimiting_sanityTimer (Integer)  : Sanity timer 
        rateLimiting_maxOutstandingRequestsPerServer (Integer)  : Maximum outstanding requests (MOR), value should be 0 or between 10 and 4096
        type (Enum)  : Accounting protocol.
        secondary_ip (String)  : RADIUS server IP
        secondary_autoFallbackDisable (Boolean)  : Automatic fallback enabled or disabled
        secondary_port (Integer)  : RADIUS server port
        secondary_sharedSecret (String)  : RADIUS server shared secrect
        
        Robot Format :
        Services Create Radius Accounting    name    primary_ip    primary_port    primary_sharedSecret
        '''
        
        data={"domainId" : domainId,"protocol" : protocol,"name" : name,"description" : description,"primary":{"ip" : primary_ip,"port" : primary_port,"sharedSecret" : primary_sharedSecret},"healthCheckPolicy":{"reviveInterval" : healthCheckPolicy_reviveInterval,"responseWindow" : healthCheckPolicy_responseWindow,"zombiePeriod" : healthCheckPolicy_zombiePeriod,"responseFail" : healthCheckPolicy_responseFail},"rateLimiting":{"threshold" : rateLimiting_threshold,"sanityTimer" : rateLimiting_sanityTimer,"maxOutstandingRequestsPerServer" : rateLimiting_maxOutstandingRequestsPerServer},"type" : type,"secondary":{"ip" : secondary_ip,"autoFallbackDisable" : secondary_autoFallbackDisable,"port" : secondary_port,"sharedSecret" : secondary_sharedSecret}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/acct/radius',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def services_get_o_auth_authentications_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Get O Auth Authentications By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/oauth/query',jdata)
        return response
        

    def services_get_o_auth_authentication(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get O Auth Authentication    url_id
        '''
        
        response = self.session.get('/services/auth/oauth/{id}'.format(id=url_id))
        return response
        

    def services_get_accountings_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Get Accountings By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/acct/query',jdata)
        return response
        

    def services_create_ldap_authentication_service(self, baseDomainName, keyAttribute, name, searchFilter, ip, tlsEnabled, password, port, adminDomainName, domainId=None, description=None, mappings_userRole_id=None, mappings_userRole_name=None, friendlyName=None, type=None, id=None, mappings_groupAttr=None):
        '''
        Mandatory Params :
        name (String)  : Name of the LDAP authentication service
        ip (String)  : IP address
        port (Integer)  : Port
        baseDomainName (String)  : Base domain name
        adminDomainName (String)  : Admin domain name
        password (String)  : Admin password
        keyAttribute (String)  : Key attribute
        searchFilter (String)  : Search filter
        tlsEnabled (Boolean)  : LDAP over TLS Enabled
        
        Optional Params  :
        description (String)  : Description of the LDAP authentication service
        id (String)  : Identifier of the authentication service
        domainId (String)  : Domain Id
        friendlyName (String)  : Friendly name of the LDAP authentication service
        type (Enum)  : Authentication protocol.
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Create Ldap Authentication Service    name    ip    port    baseDomainName    adminDomainName    password    keyAttribute    searchFilter    tlsEnabled
        '''
        
        data={"baseDomainName" : baseDomainName,"keyAttribute" : keyAttribute,"description" : description,"searchFilter" : searchFilter,"ip" : ip,"tlsEnabled" : tlsEnabled,"name" : name,"id" : id,"domainId" : domainId,"friendlyName" : friendlyName,"password" : password,"type" : type,"port" : port,"adminDomainName" : adminDomainName,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/ldap',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def services_get_radius_authentications(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Radius Authentications    
        '''
        
        response = self.session.get('/services/auth/radius')
        return response
        

    def services_disable_ggsn_ggsn_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Disable Ggsn Ggsn List    
        '''
        
        response = self.session.delete('/services/ggsn/ggsnList')
        

    def services_get_cgf_accountings_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Get Cgf Accountings By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/acct/cgf/query',jdata)
        return response
        

    def services_update_hlr_authentication_service(self, url_id, sccpGttList_e164Address=None, destNatureOfAddressIndicator=None, sctpAssociationsList_maxOutboundsStreams=None, protocol=None, sccpGttList_gtDigits=None, defaultPointCodeFormat=None, sctpAssociationsList_destinationIp=None, reuseEnable=None, sccpGttList_natureOfAddressIndicator=None, gtPointCode=None, mncNdcList_mcc=None, avCachingEnabled=None, eapSimMapVer=None, id=None, modifierId=None, sccpGttList_pointCode=None, localPointCode=None, sccpGttList_gtIndicator=None, mncNdcList_mvnoId=None, sctpAssociationsList_maxInboundsStreams=None, modifiedDateTime=None, creatorUsername=None, hasSrcPointCode=None, addressIndicator=None, localNetworkIndicator=None, sccpGttList_hasPointCode=None, maxReuseTimes=None, cacheOptionType=None, authorizationCachingEnabled=None, friendlyName=None, type=None, destNumberingPlan=None, destTransType=None, historyTime=None, pointCode=None, e164Address=None, description=None, creatorId=None, mncNdcList_mnc=None, sccpGttList_numberingPlan=None, sctpAssociationsList_nodeTermination=None, cleanUpTimeHour=None, destGtIndicator=None, routingContext=None, sctpAssociationsList_adjPointCode=None, sgsnIsdnAddress=None, authMapVer=None, mvnoId=None, sctpAssociationsList_destinationPort=None, domainId=None, srcNatureOfAddressIndicator=None, name=None, srcTransType=None, mncNdcList_ndc=None, hasPointCode=None, hasSSN=None, createDateTime=None, mncNdcList_profileId=None, sccpGttList_addressIndicator=None, locationDeliveryEnabled=None, srcGtIndicator=None, srcNumberingPlan=None, modifierUsername=None, sccpGttList_transType=None, cleanUpTimeMinute=None, sccpGttList_hasSSN=None, sctpAssociationsList_sourcePort=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        destNatureOfAddressIndicator (Enum)  : - For HLR Authentiaction server
        protocol : ""
        avCachingEnabled (Boolean)  : - For HLR Authentiaction server
        gtPointCode (Integer)  : - For HLR Authentiaction server
        hasSSN (Boolean)  : - For HLR Authentiaction server
        defaultPointCodeFormat (String)  : - For HLR Authentiaction server
        id (String)  : Identifier of the HLR authentication service
        modifierId (String)  : Modifier ID
        localPointCode (Integer)  : - For HLR Authentiaction server
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        hasSrcPointCode (Boolean)  : - For HLR Authentiaction server
        srcNumberingPlan (Enum)  : - For HLR Authentiaction server
        addressIndicator (Enum)  : - For HLR Authentiaction server
        localNetworkIndicator (Enum)  : - For HLR Authentiaction server
        maxReuseTimes (Integer)  : - For HLR Authentiaction server
        cacheOptionType (String)  : - For HLR Authentiaction server
        authorizationCachingEnabled (Boolean)  : - For HLR Authentiaction server
        friendlyName (String)  : Friendly name of the HLR service
        type : ""
        destNumberingPlan (Enum)  : - For HLR Authentiaction server
        destTransType (Integer)  : - For HLR Authentiaction server
        historyTime (Integer)  : - For HLR Authentiaction server
        pointCode (Integer)  : - For HLR Authentiaction server
        mncNdcList_mvnoId (String)  :  MVNO ID
        mncNdcList_ndc (String)  : NDC
        mncNdcList_mnc (String)  : MNC
        mncNdcList_mcc (String)  : MCC
        mncNdcList_profileId (String)  : Profile ID
        description (String)  : Description of the HLR service
        name (String)  : Name of the HLR service
        cleanUpTimeMinute (Integer)  : - For HLR Authentiaction server
        cleanUpTimeHour (Integer)  : - For HLR Authentiaction server
        domainId (String)  : Domain Id
        sccpGttList_pointCode (Integer)  : - For HLR Authentiaction server
        sccpGttList_e164Address (String)  : - For HLR Authentiaction server
        sccpGttList_addressIndicator (Enum)  : - For HLR Authentiaction server
        sccpGttList_hasSSN (Boolean)  : Enable SSN- For HLR Authentiaction server
        sccpGttList_natureOfAddressIndicator (Enum)  : - For HLR Authentiaction server
        sccpGttList_gtIndicator (Enum)  : - For HLR Authentiaction server
        sccpGttList_numberingPlan (Enum)  : - For HLR Authentiaction server
        sccpGttList_transType (Integer)  : - For HLR Authentiaction server
        sccpGttList_gtDigits (String)  : GT digits
        sccpGttList_hasPointCode (Boolean)  : Enable Point Code submitted
        authMapVer (Enum)  : - For HLR Authentiaction server
        mvnoId (String)  : Tenant UUID
        destGtIndicator (Enum)  : - For HLR Authentiaction server
        srcNatureOfAddressIndicator (Enum)  : - For HLR Authentiaction server
        routingContext (Integer)  : - For HLR Authentiaction server
        sctpAssociationsList_destinationIp (String)  : Destination IP
        sctpAssociationsList_nodeTermination (Enum)  : Node termination
        sctpAssociationsList_maxOutboundsStreams (Integer)  : Profile ID
        sctpAssociationsList_adjPointCode (String)  : Adj Pointcode
        sctpAssociationsList_destinationPort (Integer)  : Destination Port
        sctpAssociationsList_sourcePort (Integer)  : Source port
        sctpAssociationsList_maxInboundsStreams (Integer)  : NDC
        e164Address (String)  : - For HLR Authentiaction server
        eapSimMapVer (Enum)  : - For HLR Authentiaction server
        reuseEnable (Boolean)  : - For HLR Authentiaction server
        createDateTime (Integer)  : Timestamp of being created
        locationDeliveryEnabled (Boolean)  : - For HLR Authentiaction server
        srcGtIndicator (Enum)  : - For HLR Authentiaction server
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        hasPointCode (Boolean)  : - For HLR Authentiaction server
        sgsnIsdnAddress (String)  : - For HLR Authentiaction server
        srcTransType (Integer)  : - For HLR Authentiaction server
        
        Robot Format :
        Services Update Hlr Authentication Service    url_id
        '''
        
        data={"destNatureOfAddressIndicator" : destNatureOfAddressIndicator,"protocol" : protocol,"avCachingEnabled" : avCachingEnabled,"gtPointCode" : gtPointCode,"hasSSN" : hasSSN,"defaultPointCodeFormat" : defaultPointCodeFormat,"id" : id,"modifierId" : modifierId,"localPointCode" : localPointCode,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"hasSrcPointCode" : hasSrcPointCode,"srcNumberingPlan" : srcNumberingPlan,"addressIndicator" : addressIndicator,"localNetworkIndicator" : localNetworkIndicator,"maxReuseTimes" : maxReuseTimes,"cacheOptionType" : cacheOptionType,"authorizationCachingEnabled" : authorizationCachingEnabled,"friendlyName" : friendlyName,"type" : type,"destNumberingPlan" : destNumberingPlan,"destTransType" : destTransType,"historyTime" : historyTime,"pointCode" : pointCode,"mncNdcList":[{"mvnoId" : mncNdcList_mvnoId,"ndc" : mncNdcList_ndc,"mnc" : mncNdcList_mnc,"mcc" : mncNdcList_mcc,"profileId" : mncNdcList_profileId}],"description" : description,"name" : name,"cleanUpTimeMinute" : cleanUpTimeMinute,"cleanUpTimeHour" : cleanUpTimeHour,"domainId" : domainId,"sccpGttList":[{"pointCode" : sccpGttList_pointCode,"e164Address" : sccpGttList_e164Address,"addressIndicator" : sccpGttList_addressIndicator,"hasSSN" : sccpGttList_hasSSN,"natureOfAddressIndicator" : sccpGttList_natureOfAddressIndicator,"gtIndicator" : sccpGttList_gtIndicator,"numberingPlan" : sccpGttList_numberingPlan,"transType" : sccpGttList_transType,"gtDigits" : sccpGttList_gtDigits,"hasPointCode" : sccpGttList_hasPointCode}],"authMapVer" : authMapVer,"mvnoId" : mvnoId,"destGtIndicator" : destGtIndicator,"srcNatureOfAddressIndicator" : srcNatureOfAddressIndicator,"routingContext" : routingContext,"sctpAssociationsList":[{"destinationIp" : sctpAssociationsList_destinationIp,"nodeTermination" : sctpAssociationsList_nodeTermination,"maxOutboundsStreams" : sctpAssociationsList_maxOutboundsStreams,"adjPointCode" : sctpAssociationsList_adjPointCode,"destinationPort" : sctpAssociationsList_destinationPort,"sourcePort" : sctpAssociationsList_sourcePort,"maxInboundsStreams" : sctpAssociationsList_maxInboundsStreams}],"e164Address" : e164Address,"eapSimMapVer" : eapSimMapVer,"reuseEnable" : reuseEnable,"createDateTime" : createDateTime,"locationDeliveryEnabled" : locationDeliveryEnabled,"srcGtIndicator" : srcGtIndicator,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"hasPointCode" : hasPointCode,"sgsnIsdnAddress" : sgsnIsdnAddress,"srcTransType" : srcTransType}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/auth/hlr/{id}'.format(id=url_id),jdata)
        

    def services_update_active_directory_authentication_service(self, url_id, domainId=None, description=None, mappings_userRole_name=None, ip=None, mappings_userRole_id=None, tlsEnabled=None, port=None, mappings_groupAttr=None, windowsDomainName=None, friendlyName=None, globalCatalogEnabled=None, password=None, type=None, id=None, adminDomainName=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the active directory authentication service
        name (String)  : Name of the active directory authentication service
        ip (String)  : IP address
        tlsEnabled (Boolean)  : AD over TLS Enabled
        id (String)  : Identifier of the authentication service
        windowsDomainName (String)  : Windows domain name
        friendlyName (String)  : Friendly name of the active directory authentication service
        globalCatalogEnabled (Boolean)  : Global catalog support enabled or disabled
        password (String)  : Admin password
        type (Enum)  : Authentication protocol.
        port (Integer)  : Port
        adminDomainName (String)  : Admin domain name
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Update Active Directory Authentication Service    url_id
        '''
        
        data={"domainId" : domainId,"description" : description,"name" : name,"ip" : ip,"tlsEnabled" : tlsEnabled,"id" : id,"windowsDomainName" : windowsDomainName,"friendlyName" : friendlyName,"globalCatalogEnabled" : globalCatalogEnabled,"password" : password,"type" : type,"port" : port,"adminDomainName" : adminDomainName,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/auth/ad/{id}'.format(id=url_id),jdata)
        

    def services_gethlr_authentications_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Gethlr Authentications By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/hlr/query',jdata)
        return response
        

    def services_get_hlr_authentications(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Hlr Authentications    
        '''
        
        response = self.session.get('/services/auth/hlr')
        return response
        

    def services_create_hlr_authentication_service(self, sccpGttList_e164Address=None, destNatureOfAddressIndicator=None, sctpAssociationsList_maxOutboundsStreams=None, protocol=None, sccpGttList_gtDigits=None, defaultPointCodeFormat=None, sctpAssociationsList_destinationIp=None, reuseEnable=None, sccpGttList_natureOfAddressIndicator=None, gtPointCode=None, mncNdcList_mcc=None, avCachingEnabled=None, eapSimMapVer=None, id=None, modifierId=None, sccpGttList_pointCode=None, localPointCode=None, sccpGttList_gtIndicator=None, mncNdcList_mvnoId=None, sctpAssociationsList_maxInboundsStreams=None, modifiedDateTime=None, creatorUsername=None, hasSrcPointCode=None, addressIndicator=None, localNetworkIndicator=None, sccpGttList_hasPointCode=None, maxReuseTimes=None, cacheOptionType=None, authorizationCachingEnabled=None, friendlyName=None, type=None, destNumberingPlan=None, destTransType=None, historyTime=None, pointCode=None, e164Address=None, description=None, creatorId=None, mncNdcList_mnc=None, sccpGttList_numberingPlan=None, sctpAssociationsList_nodeTermination=None, cleanUpTimeHour=None, destGtIndicator=None, routingContext=None, sctpAssociationsList_adjPointCode=None, sgsnIsdnAddress=None, authMapVer=None, mvnoId=None, sctpAssociationsList_destinationPort=None, domainId=None, srcNatureOfAddressIndicator=None, name=None, srcTransType=None, mncNdcList_ndc=None, hasPointCode=None, hasSSN=None, createDateTime=None, mncNdcList_profileId=None, sccpGttList_addressIndicator=None, locationDeliveryEnabled=None, srcGtIndicator=None, srcNumberingPlan=None, modifierUsername=None, sccpGttList_transType=None, cleanUpTimeMinute=None, sccpGttList_hasSSN=None, sctpAssociationsList_sourcePort=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        destNatureOfAddressIndicator (Enum)  : - For HLR Authentiaction server
        protocol : ""
        avCachingEnabled (Boolean)  : - For HLR Authentiaction server
        gtPointCode (Integer)  : - For HLR Authentiaction server
        hasSSN (Boolean)  : - For HLR Authentiaction server
        defaultPointCodeFormat (String)  : - For HLR Authentiaction server
        id (String)  : Identifier of the HLR authentication service
        modifierId (String)  : Modifier ID
        localPointCode (Integer)  : - For HLR Authentiaction server
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        hasSrcPointCode (Boolean)  : - For HLR Authentiaction server
        srcNumberingPlan (Enum)  : - For HLR Authentiaction server
        addressIndicator (Enum)  : - For HLR Authentiaction server
        localNetworkIndicator (Enum)  : - For HLR Authentiaction server
        maxReuseTimes (Integer)  : - For HLR Authentiaction server
        cacheOptionType (String)  : - For HLR Authentiaction server
        authorizationCachingEnabled (Boolean)  : - For HLR Authentiaction server
        friendlyName (String)  : Friendly name of the HLR service
        type : ""
        destNumberingPlan (Enum)  : - For HLR Authentiaction server
        destTransType (Integer)  : - For HLR Authentiaction server
        historyTime (Integer)  : - For HLR Authentiaction server
        pointCode (Integer)  : - For HLR Authentiaction server
        mncNdcList_mvnoId (String)  :  MVNO ID
        mncNdcList_ndc (String)  : NDC
        mncNdcList_mnc (String)  : MNC
        mncNdcList_mcc (String)  : MCC
        mncNdcList_profileId (String)  : Profile ID
        description (String)  : Description of the HLR service
        name (String)  : Name of the HLR service
        cleanUpTimeMinute (Integer)  : - For HLR Authentiaction server
        cleanUpTimeHour (Integer)  : - For HLR Authentiaction server
        domainId (String)  : Domain Id
        sccpGttList_pointCode (Integer)  : - For HLR Authentiaction server
        sccpGttList_e164Address (String)  : - For HLR Authentiaction server
        sccpGttList_addressIndicator (Enum)  : - For HLR Authentiaction server
        sccpGttList_hasSSN (Boolean)  : Enable SSN- For HLR Authentiaction server
        sccpGttList_natureOfAddressIndicator (Enum)  : - For HLR Authentiaction server
        sccpGttList_gtIndicator (Enum)  : - For HLR Authentiaction server
        sccpGttList_numberingPlan (Enum)  : - For HLR Authentiaction server
        sccpGttList_transType (Integer)  : - For HLR Authentiaction server
        sccpGttList_gtDigits (String)  : GT digits
        sccpGttList_hasPointCode (Boolean)  : Enable Point Code submitted
        authMapVer (Enum)  : - For HLR Authentiaction server
        mvnoId (String)  : Tenant UUID
        destGtIndicator (Enum)  : - For HLR Authentiaction server
        srcNatureOfAddressIndicator (Enum)  : - For HLR Authentiaction server
        routingContext (Integer)  : - For HLR Authentiaction server
        sctpAssociationsList_destinationIp (String)  : Destination IP
        sctpAssociationsList_nodeTermination (Enum)  : Node termination
        sctpAssociationsList_maxOutboundsStreams (Integer)  : Profile ID
        sctpAssociationsList_adjPointCode (String)  : Adj Pointcode
        sctpAssociationsList_destinationPort (Integer)  : Destination Port
        sctpAssociationsList_sourcePort (Integer)  : Source port
        sctpAssociationsList_maxInboundsStreams (Integer)  : NDC
        e164Address (String)  : - For HLR Authentiaction server
        eapSimMapVer (Enum)  : - For HLR Authentiaction server
        reuseEnable (Boolean)  : - For HLR Authentiaction server
        createDateTime (Integer)  : Timestamp of being created
        locationDeliveryEnabled (Boolean)  : - For HLR Authentiaction server
        srcGtIndicator (Enum)  : - For HLR Authentiaction server
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        hasPointCode (Boolean)  : - For HLR Authentiaction server
        sgsnIsdnAddress (String)  : - For HLR Authentiaction server
        srcTransType (Integer)  : - For HLR Authentiaction server
        
        Robot Format :
        Services Create Hlr Authentication Service    
        '''
        
        data={"destNatureOfAddressIndicator" : destNatureOfAddressIndicator,"protocol" : protocol,"avCachingEnabled" : avCachingEnabled,"gtPointCode" : gtPointCode,"hasSSN" : hasSSN,"defaultPointCodeFormat" : defaultPointCodeFormat,"id" : id,"modifierId" : modifierId,"localPointCode" : localPointCode,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"hasSrcPointCode" : hasSrcPointCode,"srcNumberingPlan" : srcNumberingPlan,"addressIndicator" : addressIndicator,"localNetworkIndicator" : localNetworkIndicator,"maxReuseTimes" : maxReuseTimes,"cacheOptionType" : cacheOptionType,"authorizationCachingEnabled" : authorizationCachingEnabled,"friendlyName" : friendlyName,"type" : type,"destNumberingPlan" : destNumberingPlan,"destTransType" : destTransType,"historyTime" : historyTime,"pointCode" : pointCode,"mncNdcList":[{"mvnoId" : mncNdcList_mvnoId,"ndc" : mncNdcList_ndc,"mnc" : mncNdcList_mnc,"mcc" : mncNdcList_mcc,"profileId" : mncNdcList_profileId}],"description" : description,"name" : name,"cleanUpTimeMinute" : cleanUpTimeMinute,"cleanUpTimeHour" : cleanUpTimeHour,"domainId" : domainId,"sccpGttList":[{"pointCode" : sccpGttList_pointCode,"e164Address" : sccpGttList_e164Address,"addressIndicator" : sccpGttList_addressIndicator,"hasSSN" : sccpGttList_hasSSN,"natureOfAddressIndicator" : sccpGttList_natureOfAddressIndicator,"gtIndicator" : sccpGttList_gtIndicator,"numberingPlan" : sccpGttList_numberingPlan,"transType" : sccpGttList_transType,"gtDigits" : sccpGttList_gtDigits,"hasPointCode" : sccpGttList_hasPointCode}],"authMapVer" : authMapVer,"mvnoId" : mvnoId,"destGtIndicator" : destGtIndicator,"srcNatureOfAddressIndicator" : srcNatureOfAddressIndicator,"routingContext" : routingContext,"sctpAssociationsList":[{"destinationIp" : sctpAssociationsList_destinationIp,"nodeTermination" : sctpAssociationsList_nodeTermination,"maxOutboundsStreams" : sctpAssociationsList_maxOutboundsStreams,"adjPointCode" : sctpAssociationsList_adjPointCode,"destinationPort" : sctpAssociationsList_destinationPort,"sourcePort" : sctpAssociationsList_sourcePort,"maxInboundsStreams" : sctpAssociationsList_maxInboundsStreams}],"e164Address" : e164Address,"eapSimMapVer" : eapSimMapVer,"reuseEnable" : reuseEnable,"createDateTime" : createDateTime,"locationDeliveryEnabled" : locationDeliveryEnabled,"srcGtIndicator" : srcGtIndicator,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"hasPointCode" : hasPointCode,"sgsnIsdnAddress" : sgsnIsdnAddress,"srcTransType" : srcTransType}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/hlr',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def services_get_ldap_authentications(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Ldap Authentications    
        '''
        
        response = self.session.get('/services/auth/ldap')
        return response
        

    def services_get_ldap_authentications_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Get Ldap Authentications By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/ldap/query',jdata)
        return response
        

    def services_get_radius_accountings(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Radius Accountings    
        '''
        
        response = self.session.get('/services/acct/radius')
        return response
        

    def services_get_cgf_accounting(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Cgf Accounting    url_id
        '''
        
        response = self.session.get('/services/acct/cgf/{id}'.format(id=url_id))
        return response
        

    def services_get_radius_authentications_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Get Radius Authentications By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/radius/query',jdata)
        return response
        

    def services_update_ggsn_ggsn(self, dnsServerList_ip=None, gtpSettings_t3ResponseTimer=None, ggsnList_ggsnIPAddress=None, gtpSettings_echoRequestTimer=None, gtpSettings_dnsNumberOfRetries=None, gtpSettings_responseTimeout=None, gtpSettings_numberOfRetries=None, ggsnList_domainName=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        dnsServerList_ip (String)  : IP of server
        gtpSettings_responseTimeout (Integer)  : DNS Response Timeout
        gtpSettings_t3ResponseTimer (Integer)  : Response Timer
        gtpSettings_dnsNumberOfRetries (Integer)  : DNS Number of Retries
        gtpSettings_echoRequestTimer (Integer)  : Echo Request Timerr
        gtpSettings_numberOfRetries (Integer)  : Number of Retries
        ggsnList_ggsnIPAddress (String)  : IP of GGSN
        ggsnList_domainName (String)  : Domain name of GGSN
        
        Robot Format :
        Services Update Ggsn Ggsn    
        '''
        
        data={"dnsServerList":[{"ip" : dnsServerList_ip}],"gtpSettings":{"responseTimeout" : gtpSettings_responseTimeout,"t3ResponseTimer" : gtpSettings_t3ResponseTimer,"dnsNumberOfRetries" : gtpSettings_dnsNumberOfRetries,"echoRequestTimer" : gtpSettings_echoRequestTimer,"numberOfRetries" : gtpSettings_numberOfRetries},"ggsnList":[{"ggsnIPAddress" : ggsnList_ggsnIPAddress,"domainName" : ggsnList_domainName}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/ggsn',jdata)
        

    def services_create_o_auth_authentication_service(self, applicationId, applicationSecret, type, name, willCollectEmail, domainId=None, protocol=None, description=None, mappings_userRole_id=None, whitelistedDomains=None, mappings_userRole_name=None, friendlyName=None, id=None, mappings_groupAttr=None):
        '''
        Mandatory Params :
        type (Enum)  : OAuth Type, may be GOOGLE, FACEBOOK or LINKEDIN
        name (String)  : Name of the OAuth authentication service
        applicationId (String)  : Application ID
        applicationSecret (String)  : Application Secret
        willCollectEmail (Boolean)  : Will collect user's email address
        
        Optional Params  :
        protocol (Enum)  : Authentication protocol.
        description (String)  : Description of the OAuth authentication service
        whitelistedDomains (String)  : Admin domain name
        domainId (String)  : Domain Id
        friendlyName (String)  : Friendly name of the LDAP authentication service
        id (String)  : Identifier of the authentication service
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Create O Auth Authentication Service    type    name    applicationId    applicationSecret    willCollectEmail
        '''
        
        data={"applicationSecret" : applicationSecret,"protocol" : protocol,"name" : name,"type" : type,"description" : description,"whitelistedDomains":[ whitelistedDomains],"domainId" : domainId,"friendlyName" : friendlyName,"applicationId" : applicationId,"id" : id,"willCollectEmail" : willCollectEmail,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/oauth',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def services_update_radius_authentication_service(self, url_id, secondary_autoFallbackDisable=None, healthCheckPolicy_responseWindow=None, mappings_userRole_id=None, secondary_port=None, id=None, mappings_groupAttr=None, primary_sharedSecret=None, rateLimiting_maxOutstandingRequestsPerServer=None, locationDeliveryEnabled=None, healthCheckPolicy_zombiePeriod=None, friendlyName=None, healthCheckPolicy_responseFail=None, type=None, primary_ip=None, description=None, secondary_ip=None, primary_port=None, rateLimiting_sanityTimer=None, domainId=None, name=None, rateLimiting_threshold=None, healthCheckPolicy_reviveInterval=None, secondary_sharedSecret=None, mappings_userRole_name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the RADIUS authentication service
        primary_ip (String)  : Server IP
        primary_port (Integer)  : Server port
        primary_sharedSecret (String)  : Server shared secrect
        name (String)  : Name of the RADIUS authentication service
        locationDeliveryEnabled (Boolean)  : RFC5580 out of band location delivery support(for Ruckus AP only)
        healthCheckPolicy_reviveInterval (Integer)  : Revive interval
        healthCheckPolicy_responseWindow (Integer)  : Response window
        healthCheckPolicy_zombiePeriod (Integer)  : Zombie period
        healthCheckPolicy_responseFail (Boolean)  : Response Fail
        friendlyName (String)  : Friendly name of the RADIUS authentication service
        rateLimiting_threshold (Integer)  : Threshold, value should be 0 if MOR is 0, or between 10 and 90 if MOR is between 10 and 4096
        rateLimiting_sanityTimer (Integer)  : Sanity timer 
        rateLimiting_maxOutstandingRequestsPerServer (Integer)  : Maximum outstanding requests (MOR), value should be 0 or between 10 and 4096
        secondary_ip (String)  : RADIUS server IP
        secondary_autoFallbackDisable (Boolean)  : Automatic fallback enabled or disabled
        secondary_port (Integer)  : RADIUS server port
        secondary_sharedSecret (String)  : RADIUS server shared secrect
        type : ""
        id (String)  : Identifier of the authentication service
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Update Radius Authentication Service    url_id
        '''
        
        data={"domainId" : domainId,"description" : description,"primary":{"ip" : primary_ip,"port" : primary_port,"sharedSecret" : primary_sharedSecret},"name" : name,"locationDeliveryEnabled" : locationDeliveryEnabled,"healthCheckPolicy":{"reviveInterval" : healthCheckPolicy_reviveInterval,"responseWindow" : healthCheckPolicy_responseWindow,"zombiePeriod" : healthCheckPolicy_zombiePeriod,"responseFail" : healthCheckPolicy_responseFail},"friendlyName" : friendlyName,"rateLimiting":{"threshold" : rateLimiting_threshold,"sanityTimer" : rateLimiting_sanityTimer,"maxOutstandingRequestsPerServer" : rateLimiting_maxOutstandingRequestsPerServer},"secondary":{"ip" : secondary_ip,"autoFallbackDisable" : secondary_autoFallbackDisable,"port" : secondary_port,"sharedSecret" : secondary_sharedSecret},"type" : type,"id" : id,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/auth/radius/{id}'.format(id=url_id),jdata)
        

    def services_delete_accounting_service_list(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Services Delete Accounting Service List    
        '''
        
        response = self.session.delete('/services/acct')
        

    def services_delete_radius_accounting_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Delete Radius Accounting Service    url_id
        '''
        
        response = self.session.delete('/services/acct/radius/{id}'.format(id=url_id))
        

    def services_get_guest_authentication(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Guest Authentication    url_id
        '''
        
        response = self.session.get('/services/auth/guest/{id}'.format(id=url_id))
        return response
        

    def services_disable_accounting_service_attribute(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Disable Accounting Service Attribute    url_id
        '''
        
        response = self.session.delete('/services/acct/radius/{id}/secondary'.format(id=url_id))
        

    def services_create_cgf_accounting(self, type, name, sendApnNetworkIdentifier=None, sgsnPlmnId=None, listOfTrafficVolumes=None, protocol=None, serverOptions_gtpEchoTimeout=None, localBinaryFileOptions_ftpServerSettingsKey=None, serverOptions_serverConfigurationList_priority=None, lboSendLocalRecordSequenceNumber=None, sendDynamicModeAddressFlag=None, lboNodeId=None, serverOptions_serverConfigurationList_serverPort=None, lboSendNodeId=None, localBinaryFileOptions_exportScheduleList_minute=None, serverOptions_serverConfigurationList_serverIp=None, serverOptions_maxNumOfCdrsPerRequest=None, modifierId=None, description=None, sendServedPdpAddress=None, nodeId=None, modifiedDateTime=None, serverOptions_maxNumOfCdrs=None, lboSendServiceContextId=None, sendApnOperatorIdentifier=None, serverOptions_cdrResponseTimeout=None, id=None, localBinaryFileOptions_fileLifetime=None, sendLocalRecordSequenceNumber=None, localBinaryFileOptions_exportScheduleList_hour=None, lboEnabled=None, sendSgsnAddress=None, createDateTime=None, localBinaryFileOptions_exportScheduleList_interval=None, serverOptions_cdrNumOfRetries=None, serverOptions_numOfRetriesForGtpEchoResponse=None, creatorId=None, sendDiagnostic=None, localBinaryFileOptions_fileTimeLimit=None, chargingServiceType=None, sendRatType=None, localBinaryFileOptions_recordLimit=None, sendChargingCharacteristicsSelectionMode=None, mvnoId=None, ttgpdgEnabled=None, domainId=None, sendNodeId=None, cdrType=None, creatorUsername=None, sendApnSelectionMode=None, sendPdpType=None, sendMsisdn=None, modifierUsername=None, localBinaryFileOptions_autoExportViaFtp=None):
        '''
        Mandatory Params :
        name (String)  : Name of the CGF accounting service
        type (Enum)  : Accounting protocol.
        
        Optional Params  :
        sendApnNetworkIdentifier (Boolean)  : To send App network identifier
        sgsnPlmnId (Boolean)  : To send SGSN PLNM ID
        protocol (Enum)  : Accounting protocol.
        localBinaryFileOptions_autoExportViaFtp (Boolean)  : Export local binary file to FTP
        localBinaryFileOptions_fileLifetime (Integer)  : the expire days of local binary file
        localBinaryFileOptions_ftpServerSettingsKey (String)  : the ID of ftp server for upload
        localBinaryFileOptions_fileTimeLimit (Integer)  : the limit of file time
        localBinaryFileOptions_recordLimit (Integer)  : The limit of file to upload
        localBinaryFileOptions_exportScheduleList_interval (Enum)  : the interval to automatically export data
        localBinaryFileOptions_exportScheduleList_minute (Integer)  : Set the minute
        localBinaryFileOptions_exportScheduleList_hour (Integer)  : Set the hour
        lboSendLocalRecordSequenceNumber (Boolean)  : To send local record sequence number
        sendDynamicModeAddressFlag (Boolean)  : To send the address flag of dynamic mode
        sendMsisdn (Boolean)  : To send the MSISDN
        modifierId (String)  : Modifier ID
        lboNodeId (String)  : The node id of LBO
        serverOptions_maxNumOfCdrsPerRequest (Integer)  : To enable TTG/PDG
        serverOptions_maxNumOfCdrs (Integer)  : To enable TTG/PDG
        serverOptions_gtpEchoTimeout (Integer)  : To enable TTG/PDG
        serverOptions_cdrNumOfRetries (Integer)  : To enable TTG/PDG
        serverOptions_cdrResponseTimeout (Integer)  : To enable TTG/PDG
        serverOptions_serverConfigurationList_priority (Integer)  : the priority of server
        serverOptions_serverConfigurationList_serverPort (Integer)  : Port
        serverOptions_serverConfigurationList_serverIp (String)  : IP
        serverOptions_numOfRetriesForGtpEchoResponse (Integer)  : To enable TTG/PDG
        lboSendNodeId (Boolean)  : To send LBO node id
        id (String)  : Identifier of the RADIUS accounting service
        lboEnabled (Boolean)  : To enable LBO
        description (String)  : Description of the CGF accounting service
        sendServedPdpAddress (Boolean)  : To send Address of ServedPDP address
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        sendApnOperatorIdentifier (Boolean)  : To send APN operator ID
        nodeId (String)  : ID of TTG
        lboSendServiceContextId (Boolean)  : To send service context id
        sendSgsnAddress (Boolean)  : To send SGSN Address
        sendChargingCharacteristicsSelectionMode (Boolean)  : To send selection mode of charging characteristic
        createDateTime (Integer)  : Timestamp of being created
        sendDiagnostic (Boolean)  : To send diagnostic information
        chargingServiceType (Enum)  : Type of Charging service
        sendRatType (Boolean)  : To send RAT type
        sendLocalRecordSequenceNumber (Boolean)  : To send the sequence number of local record
        mvnoId (String)  : Tenant UUID
        ttgpdgEnabled (Boolean)  : To enable TTG/PDG
        domainId (String)  : Domain Id
        sendNodeId (Boolean)  : To send node id
        cdrType (Enum)  : Type of CDR
        listOfTrafficVolumes (Boolean)  : To list traffic volumes
        sendApnSelectionMode (Boolean)  : To send APN selection mode
        sendPdpType (Boolean)  : To send PDP type
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        
        Robot Format :
        Services Create Cgf Accounting    name    type
        '''
        
        data={"sendApnNetworkIdentifier" : sendApnNetworkIdentifier,"sgsnPlmnId" : sgsnPlmnId,"protocol" : protocol,"localBinaryFileOptions":{"autoExportViaFtp" : localBinaryFileOptions_autoExportViaFtp,"fileLifetime" : localBinaryFileOptions_fileLifetime,"ftpServerSettingsKey" : localBinaryFileOptions_ftpServerSettingsKey,"fileTimeLimit" : localBinaryFileOptions_fileTimeLimit,"recordLimit" : localBinaryFileOptions_recordLimit,"exportScheduleList":[{"interval" : localBinaryFileOptions_exportScheduleList_interval,"minute" : localBinaryFileOptions_exportScheduleList_minute,"hour" : localBinaryFileOptions_exportScheduleList_hour}]},"lboSendLocalRecordSequenceNumber" : lboSendLocalRecordSequenceNumber,"sendDynamicModeAddressFlag" : sendDynamicModeAddressFlag,"sendMsisdn" : sendMsisdn,"modifierId" : modifierId,"lboNodeId" : lboNodeId,"serverOptions":{"maxNumOfCdrsPerRequest" : serverOptions_maxNumOfCdrsPerRequest,"maxNumOfCdrs" : serverOptions_maxNumOfCdrs,"gtpEchoTimeout" : serverOptions_gtpEchoTimeout,"cdrNumOfRetries" : serverOptions_cdrNumOfRetries,"cdrResponseTimeout" : serverOptions_cdrResponseTimeout,"serverConfigurationList":[{"priority" : serverOptions_serverConfigurationList_priority,"serverPort" : serverOptions_serverConfigurationList_serverPort,"serverIp" : serverOptions_serverConfigurationList_serverIp}],"numOfRetriesForGtpEchoResponse" : serverOptions_numOfRetriesForGtpEchoResponse},"lboSendNodeId" : lboSendNodeId,"id" : id,"lboEnabled" : lboEnabled,"description" : description,"sendServedPdpAddress" : sendServedPdpAddress,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"sendApnOperatorIdentifier" : sendApnOperatorIdentifier,"nodeId" : nodeId,"lboSendServiceContextId" : lboSendServiceContextId,"sendSgsnAddress" : sendSgsnAddress,"sendChargingCharacteristicsSelectionMode" : sendChargingCharacteristicsSelectionMode,"type" : type,"createDateTime" : createDateTime,"sendDiagnostic" : sendDiagnostic,"chargingServiceType" : chargingServiceType,"sendRatType" : sendRatType,"sendLocalRecordSequenceNumber" : sendLocalRecordSequenceNumber,"mvnoId" : mvnoId,"ttgpdgEnabled" : ttgpdgEnabled,"domainId" : domainId,"name" : name,"sendNodeId" : sendNodeId,"cdrType" : cdrType,"listOfTrafficVolumes" : listOfTrafficVolumes,"sendApnSelectionMode" : sendApnSelectionMode,"sendPdpType" : sendPdpType,"creatorId" : creatorId,"modifierUsername" : modifierUsername}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/acct/cgf',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def services_get_active_directory_authentication(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Active Directory Authentication    url_id
        '''
        
        response = self.session.get('/services/auth/ad/{id}'.format(id=url_id))
        return response
        

    def services_update_ggsn(self, dnsServerList_ip=None, gtpSettings_t3ResponseTimer=None, ggsnList_ggsnIPAddress=None, gtpSettings_echoRequestTimer=None, gtpSettings_dnsNumberOfRetries=None, gtpSettings_responseTimeout=None, gtpSettings_numberOfRetries=None, ggsnList_domainName=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        dnsServerList_ip (String)  : IP of server
        gtpSettings_responseTimeout (Integer)  : DNS Response Timeout
        gtpSettings_t3ResponseTimer (Integer)  : Response Timer
        gtpSettings_dnsNumberOfRetries (Integer)  : DNS Number of Retries
        gtpSettings_echoRequestTimer (Integer)  : Echo Request Timerr
        gtpSettings_numberOfRetries (Integer)  : Number of Retries
        ggsnList_ggsnIPAddress (String)  : IP of GGSN
        ggsnList_domainName (String)  : Domain name of GGSN
        
        Robot Format :
        Services Update Ggsn    
        '''
        
        data={"dnsServerList":[{"ip" : dnsServerList_ip}],"gtpSettings":{"responseTimeout" : gtpSettings_responseTimeout,"t3ResponseTimer" : gtpSettings_t3ResponseTimer,"dnsNumberOfRetries" : gtpSettings_dnsNumberOfRetries,"echoRequestTimer" : gtpSettings_echoRequestTimer,"numberOfRetries" : gtpSettings_numberOfRetries},"ggsnList":[{"ggsnIPAddress" : ggsnList_ggsnIPAddress,"domainName" : ggsnList_domainName}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/ggsn',jdata)
        

    def services_delete_ldap_authentication_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Delete Ldap Authentication Service    url_id
        '''
        
        response = self.session.delete('/services/auth/ldap/{id}'.format(id=url_id))
        

    def services_get_radius_accounting(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Radius Accounting    url_id
        '''
        
        response = self.session.get('/services/acct/radius/{id}'.format(id=url_id))
        return response
        

    def services_disable_ggsn_dns_server_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Disable Ggsn Dns Server List    
        '''
        
        response = self.session.delete('/services/ggsn/dnsServerList')
        

    def services_get_all_authentications_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Get All Authentications By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/query',jdata)
        return response
        

    def services_update_local_db_authentication(self, url_id, mvnoId=None, domainId=None, protocol=None, description=None, mappings_userRole_id=None, mappings_userRole_name=None, friendlyName=None, type=None, id=None, mappings_groupAttr=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        mvnoId (String)  : Tenant UUID
        domainId (String)  : Domain Id
        protocol (Enum)  : Authentication protocol.
        description (String)  : Description of the authentication service
        name (String)  : Name of the RADIUS authentication service
        friendlyName (String)  : Friendly name of the authentication service
        type (Enum)  : Authentication protocol.
        id (String)  : Identifier of the authentication service
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Update Local Db Authentication    url_id
        '''
        
        data={"mvnoId" : mvnoId,"domainId" : domainId,"protocol" : protocol,"description" : description,"name" : name,"friendlyName" : friendlyName,"type" : type,"id" : id,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/auth/local_db/{id}'.format(id=url_id),jdata)
        

    def services_test_accounting(self, url_id, loginRequest_userName=None, id=None, loginRequest_protocol=None, loginRequest_timeZoneUtcOffset=None, loginRequest_password=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        loginRequest_userName (String)  : name for test user
        loginRequest_timeZoneUtcOffset (String)  : timezone offset, ex: '+8'
        loginRequest_password (String)  : password for test user
        loginRequest_protocol : ""
        id (String)  : Identifier of the authentication service
        
        Robot Format :
        Services Test Accounting    url_id
        '''
        
        data={"loginRequest":{"userName" : loginRequest_userName,"timeZoneUtcOffset" : loginRequest_timeZoneUtcOffset,"password" : loginRequest_password,"protocol" : loginRequest_protocol},"id" : id}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/acct/test/{id}'.format(id=url_id),jdata)
        return response
        

    def services_get_ldap_authentication(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Ldap Authentication    url_id
        '''
        
        response = self.session.get('/services/auth/ldap/{id}'.format(id=url_id))
        return response
        

    def services_delete_authentication_service_list(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Services Delete Authentication Service List    
        '''
        
        response = self.session.delete('/services/auth')
        

    def services_delete_o_auth_authentication_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Delete O Auth Authentication Service    url_id
        '''
        
        response = self.session.delete('/services/auth/oauth/{id}'.format(id=url_id))
        

    def services_delete_hlr_authentication_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Delete Hlr Authentication Service    url_id
        '''
        
        response = self.session.delete('/services/auth/hlr/{id}'.format(id=url_id))
        

    def services_get_ggsn(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Ggsn    
        '''
        
        response = self.session.get('/services/ggsn')
        return response
        

    def services_get_radius_accountings_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Get Radius Accountings By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/acct/radius/query',jdata)
        return response
        

    def services_disable_radius_authentication_service_attribute(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Disable Radius Authentication Service Attribute    url_id
        '''
        
        response = self.session.delete('/services/auth/radius/{id}/secondary'.format(id=url_id))
        

    def services_update_radius_accounting(self, url_id, secondary_ip=None, domainId=None, primary_ip=None, description=None, healthCheckPolicy_responseWindow=None, rateLimiting_threshold=None, primary_port=None, rateLimiting_sanityTimer=None, primary_sharedSecret=None, rateLimiting_maxOutstandingRequestsPerServer=None, secondary_port=None, healthCheckPolicy_responseFail=None, secondary_sharedSecret=None, healthCheckPolicy_reviveInterval=None, healthCheckPolicy_zombiePeriod=None, protocol=None, secondary_autoFallbackDisable=None, type=None, id=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        protocol (Enum)  : Accounting protocol.
        description (String)  : Description of the RADIUS accounting service
        primary_ip (String)  : Server IP
        primary_port (Integer)  : Server port
        primary_sharedSecret (String)  : Server shared secrect
        name (String)  : Name of the RADIUS accounting service
        healthCheckPolicy_reviveInterval (Integer)  : Revive interval
        healthCheckPolicy_responseWindow (Integer)  : Response window
        healthCheckPolicy_zombiePeriod (Integer)  : Zombie period
        healthCheckPolicy_responseFail (Boolean)  : Response Fail
        rateLimiting_threshold (Integer)  : Threshold, value should be 0 if MOR is 0, or between 10 and 90 if MOR is between 10 and 4096
        rateLimiting_sanityTimer (Integer)  : Sanity timer 
        rateLimiting_maxOutstandingRequestsPerServer (Integer)  : Maximum outstanding requests (MOR), value should be 0 or between 10 and 4096
        type (Enum)  : Accounting protocol.
        id (String)  : Identifier of the RADIUS accounting service
        secondary_ip (String)  : RADIUS server IP
        secondary_autoFallbackDisable (Boolean)  : Automatic fallback enabled or disabled
        secondary_port (Integer)  : RADIUS server port
        secondary_sharedSecret (String)  : RADIUS server shared secrect
        
        Robot Format :
        Services Update Radius Accounting    url_id
        '''
        
        data={"domainId" : domainId,"protocol" : protocol,"description" : description,"primary":{"ip" : primary_ip,"port" : primary_port,"sharedSecret" : primary_sharedSecret},"name" : name,"healthCheckPolicy":{"reviveInterval" : healthCheckPolicy_reviveInterval,"responseWindow" : healthCheckPolicy_responseWindow,"zombiePeriod" : healthCheckPolicy_zombiePeriod,"responseFail" : healthCheckPolicy_responseFail},"rateLimiting":{"threshold" : rateLimiting_threshold,"sanityTimer" : rateLimiting_sanityTimer,"maxOutstandingRequestsPerServer" : rateLimiting_maxOutstandingRequestsPerServer},"type" : type,"id" : id,"secondary":{"ip" : secondary_ip,"autoFallbackDisable" : secondary_autoFallbackDisable,"port" : secondary_port,"sharedSecret" : secondary_sharedSecret}}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/acct/radius/{id}'.format(id=url_id),jdata)
        

    def services_update_o_auth_authentication_service(self, url_id, applicationSecret=None, protocol=None, description=None, applicationId=None, mappings_userRole_id=None, whitelistedDomains=None, domainId=None, mappings_groupAttr=None, mappings_userRole_name=None, friendlyName=None, type=None, id=None, willCollectEmail=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        applicationSecret (String)  : Application Secret
        protocol (Enum)  : Authentication protocol.
        description (String)  : Description of the OAuth authentication service
        type (Enum)  : OAuth Type, may be GOOGLE, FACEBOOK or LINKEDIN
        whitelistedDomains (String)  : Admin domain name
        name (String)  : Name of the OAuth authentication service
        domainId (String)  : Domain Id
        friendlyName (String)  : Friendly name of the LDAP authentication service
        applicationId (String)  : Application ID
        id (String)  : Identifier of the authentication service
        willCollectEmail (Boolean)  : Will collect user's email address
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Update O Auth Authentication Service    url_id
        '''
        
        data={"applicationSecret" : applicationSecret,"protocol" : protocol,"description" : description,"type" : type,"whitelistedDomains":[ whitelistedDomains],"name" : name,"domainId" : domainId,"friendlyName" : friendlyName,"applicationId" : applicationId,"id" : id,"willCollectEmail" : willCollectEmail,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/auth/oauth/{id}'.format(id=url_id),jdata)
        

    def services_get_active_directory_authentications_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Services Get Active Directory Authentications By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/ad/query',jdata)
        return response
        

    def services_get_cgf_accountings(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Cgf Accountings    
        '''
        
        response = self.session.get('/services/acct/cgf')
        return response
        

    def services_update_cgf_accounting(self, url_id, name, id, sendApnNetworkIdentifier=None, sgsnPlmnId=None, listOfTrafficVolumes=None, protocol=None, serverOptions_gtpEchoTimeout=None, localBinaryFileOptions_ftpServerSettingsKey=None, serverOptions_serverConfigurationList_priority=None, lboSendLocalRecordSequenceNumber=None, sendDynamicModeAddressFlag=None, lboNodeId=None, serverOptions_serverConfigurationList_serverPort=None, lboSendNodeId=None, localBinaryFileOptions_exportScheduleList_minute=None, serverOptions_serverConfigurationList_serverIp=None, serverOptions_maxNumOfCdrsPerRequest=None, modifierId=None, description=None, sendServedPdpAddress=None, nodeId=None, modifiedDateTime=None, serverOptions_maxNumOfCdrs=None, sendApnOperatorIdentifier=None, serverOptions_cdrResponseTimeout=None, lboSendServiceContextId=None, localBinaryFileOptions_fileLifetime=None, sendLocalRecordSequenceNumber=None, localBinaryFileOptions_exportScheduleList_hour=None, lboEnabled=None, sendSgsnAddress=None, type=None, createDateTime=None, localBinaryFileOptions_exportScheduleList_interval=None, serverOptions_cdrNumOfRetries=None, serverOptions_numOfRetriesForGtpEchoResponse=None, creatorId=None, sendDiagnostic=None, localBinaryFileOptions_fileTimeLimit=None, chargingServiceType=None, sendRatType=None, localBinaryFileOptions_recordLimit=None, sendChargingCharacteristicsSelectionMode=None, mvnoId=None, ttgpdgEnabled=None, domainId=None, sendNodeId=None, cdrType=None, creatorUsername=None, sendApnSelectionMode=None, sendPdpType=None, sendMsisdn=None, modifierUsername=None, localBinaryFileOptions_autoExportViaFtp=None):
        '''
        Mandatory Params :
        url_id : ""
        name (String)  : Name of the CGF accounting service
        id (String)  : Identifier of the RADIUS accounting service
        
        Optional Params  :
        sendApnNetworkIdentifier (Boolean)  : To send App network identifier
        sgsnPlmnId (Boolean)  : To send SGSN PLNM ID
        protocol (Enum)  : Accounting protocol.
        localBinaryFileOptions_autoExportViaFtp (Boolean)  : Export local binary file to FTP
        localBinaryFileOptions_fileLifetime (Integer)  : the expire days of local binary file
        localBinaryFileOptions_ftpServerSettingsKey (String)  : the ID of ftp server for upload
        localBinaryFileOptions_fileTimeLimit (Integer)  : the limit of file time
        localBinaryFileOptions_recordLimit (Integer)  : The limit of file to upload
        localBinaryFileOptions_exportScheduleList_interval (Enum)  : the interval to automatically export data
        localBinaryFileOptions_exportScheduleList_minute (Integer)  : Set the minute
        localBinaryFileOptions_exportScheduleList_hour (Integer)  : Set the hour
        lboSendLocalRecordSequenceNumber (Boolean)  : To send local record sequence number
        sendDynamicModeAddressFlag (Boolean)  : To send the address flag of dynamic mode
        sendMsisdn (Boolean)  : To send the MSISDN
        modifierId (String)  : Modifier ID
        lboNodeId (String)  : The node id of LBO
        serverOptions_maxNumOfCdrsPerRequest (Integer)  : To enable TTG/PDG
        serverOptions_maxNumOfCdrs (Integer)  : To enable TTG/PDG
        serverOptions_gtpEchoTimeout (Integer)  : To enable TTG/PDG
        serverOptions_cdrNumOfRetries (Integer)  : To enable TTG/PDG
        serverOptions_cdrResponseTimeout (Integer)  : To enable TTG/PDG
        serverOptions_serverConfigurationList_priority (Integer)  : the priority of server
        serverOptions_serverConfigurationList_serverPort (Integer)  : Port
        serverOptions_serverConfigurationList_serverIp (String)  : IP
        serverOptions_numOfRetriesForGtpEchoResponse (Integer)  : To enable TTG/PDG
        lboSendNodeId (Boolean)  : To send LBO node id
        lboEnabled (Boolean)  : To enable LBO
        description (String)  : Description of the CGF accounting service
        sendServedPdpAddress (Boolean)  : To send Address of ServedPDP address
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        sendApnOperatorIdentifier (Boolean)  : To send APN operator ID
        nodeId (String)  : ID of TTG
        lboSendServiceContextId (Boolean)  : To send service context id
        sendSgsnAddress (Boolean)  : To send SGSN Address
        sendChargingCharacteristicsSelectionMode (Boolean)  : To send selection mode of charging characteristic
        type (Enum)  : Accounting protocol.
        createDateTime (Integer)  : Timestamp of being created
        sendDiagnostic (Boolean)  : To send diagnostic information
        chargingServiceType (Enum)  : Type of Charging service
        sendRatType (Boolean)  : To send RAT type
        sendLocalRecordSequenceNumber (Boolean)  : To send the sequence number of local record
        mvnoId (String)  : Tenant UUID
        ttgpdgEnabled (Boolean)  : To enable TTG/PDG
        domainId (String)  : Domain Id
        sendNodeId (Boolean)  : To send node id
        cdrType (Enum)  : Type of CDR
        listOfTrafficVolumes (Boolean)  : To list traffic volumes
        sendApnSelectionMode (Boolean)  : To send APN selection mode
        sendPdpType (Boolean)  : To send PDP type
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        
        Robot Format :
        Services Update Cgf Accounting    url_id    name    id
        '''
        
        data={"sendApnNetworkIdentifier" : sendApnNetworkIdentifier,"sgsnPlmnId" : sgsnPlmnId,"protocol" : protocol,"localBinaryFileOptions":{"autoExportViaFtp" : localBinaryFileOptions_autoExportViaFtp,"fileLifetime" : localBinaryFileOptions_fileLifetime,"ftpServerSettingsKey" : localBinaryFileOptions_ftpServerSettingsKey,"fileTimeLimit" : localBinaryFileOptions_fileTimeLimit,"recordLimit" : localBinaryFileOptions_recordLimit,"exportScheduleList":[{"interval" : localBinaryFileOptions_exportScheduleList_interval,"minute" : localBinaryFileOptions_exportScheduleList_minute,"hour" : localBinaryFileOptions_exportScheduleList_hour}]},"lboSendLocalRecordSequenceNumber" : lboSendLocalRecordSequenceNumber,"sendDynamicModeAddressFlag" : sendDynamicModeAddressFlag,"sendMsisdn" : sendMsisdn,"modifierId" : modifierId,"lboNodeId" : lboNodeId,"serverOptions":{"maxNumOfCdrsPerRequest" : serverOptions_maxNumOfCdrsPerRequest,"maxNumOfCdrs" : serverOptions_maxNumOfCdrs,"gtpEchoTimeout" : serverOptions_gtpEchoTimeout,"cdrNumOfRetries" : serverOptions_cdrNumOfRetries,"cdrResponseTimeout" : serverOptions_cdrResponseTimeout,"serverConfigurationList":[{"priority" : serverOptions_serverConfigurationList_priority,"serverPort" : serverOptions_serverConfigurationList_serverPort,"serverIp" : serverOptions_serverConfigurationList_serverIp}],"numOfRetriesForGtpEchoResponse" : serverOptions_numOfRetriesForGtpEchoResponse},"lboSendNodeId" : lboSendNodeId,"id" : id,"lboEnabled" : lboEnabled,"description" : description,"sendServedPdpAddress" : sendServedPdpAddress,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"sendApnOperatorIdentifier" : sendApnOperatorIdentifier,"nodeId" : nodeId,"lboSendServiceContextId" : lboSendServiceContextId,"sendSgsnAddress" : sendSgsnAddress,"sendChargingCharacteristicsSelectionMode" : sendChargingCharacteristicsSelectionMode,"type" : type,"createDateTime" : createDateTime,"sendDiagnostic" : sendDiagnostic,"chargingServiceType" : chargingServiceType,"sendRatType" : sendRatType,"sendLocalRecordSequenceNumber" : sendLocalRecordSequenceNumber,"mvnoId" : mvnoId,"ttgpdgEnabled" : ttgpdgEnabled,"domainId" : domainId,"name" : name,"sendNodeId" : sendNodeId,"cdrType" : cdrType,"listOfTrafficVolumes" : listOfTrafficVolumes,"sendApnSelectionMode" : sendApnSelectionMode,"sendPdpType" : sendPdpType,"creatorId" : creatorId,"modifierUsername" : modifierUsername}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/services/acct/cgf/{id}'.format(id=url_id),jdata)
        

    def services_create_radius_authentication_service(self, primary_port, primary_sharedSecret, primary_ip, name, secondary_ip=None, domainId=None, description=None, healthCheckPolicy_responseWindow=None, locationDeliveryEnabled=None, secondary_autoFallbackDisable=None, rateLimiting_sanityTimer=None, rateLimiting_threshold=None, rateLimiting_maxOutstandingRequestsPerServer=None, secondary_port=None, secondary_sharedSecret=None, healthCheckPolicy_reviveInterval=None, healthCheckPolicy_zombiePeriod=None, mappings_userRole_name=None, friendlyName=None, healthCheckPolicy_responseFail=None, mappings_userRole_id=None, type=None, id=None, mappings_groupAttr=None):
        '''
        Mandatory Params :
        name (String)  : Name of the RADIUS authentication service
        primary_ip (String)  : Server IP
        primary_port (Integer)  : Server port
        primary_sharedSecret (String)  : Server shared secrect
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the RADIUS authentication service
        locationDeliveryEnabled (Boolean)  : RFC5580 out of band location delivery support(for Ruckus AP only)
        healthCheckPolicy_reviveInterval (Integer)  : Revive interval
        healthCheckPolicy_responseWindow (Integer)  : Response window
        healthCheckPolicy_zombiePeriod (Integer)  : Zombie period
        healthCheckPolicy_responseFail (Boolean)  : Response Fail
        friendlyName (String)  : Friendly name of the RADIUS authentication service
        rateLimiting_threshold (Integer)  : Threshold, value should be 0 if MOR is 0, or between 10 and 90 if MOR is between 10 and 4096
        rateLimiting_sanityTimer (Integer)  : Sanity timer 
        rateLimiting_maxOutstandingRequestsPerServer (Integer)  : Maximum outstanding requests (MOR), value should be 0 or between 10 and 4096
        secondary_ip (String)  : RADIUS server IP
        secondary_autoFallbackDisable (Boolean)  : Automatic fallback enabled or disabled
        secondary_port (Integer)  : RADIUS server port
        secondary_sharedSecret (String)  : RADIUS server shared secrect
        type : ""
        id (String)  : Identifier of the authentication service
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Create Radius Authentication Service    name    primary_ip    primary_port    primary_sharedSecret
        '''
        
        data={"domainId" : domainId,"description" : description,"primary":{"ip" : primary_ip,"port" : primary_port,"sharedSecret" : primary_sharedSecret},"name" : name,"locationDeliveryEnabled" : locationDeliveryEnabled,"healthCheckPolicy":{"reviveInterval" : healthCheckPolicy_reviveInterval,"responseWindow" : healthCheckPolicy_responseWindow,"zombiePeriod" : healthCheckPolicy_zombiePeriod,"responseFail" : healthCheckPolicy_responseFail},"friendlyName" : friendlyName,"rateLimiting":{"threshold" : rateLimiting_threshold,"sanityTimer" : rateLimiting_sanityTimer,"maxOutstandingRequestsPerServer" : rateLimiting_maxOutstandingRequestsPerServer},"secondary":{"ip" : secondary_ip,"autoFallbackDisable" : secondary_autoFallbackDisable,"port" : secondary_port,"sharedSecret" : secondary_sharedSecret},"type" : type,"id" : id,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/radius',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def services_create_active_directory_authentication_service(self, name, ip, tlsEnabled, windowsDomainName, globalCatalogEnabled, port, domainId=None, description=None, mappings_userRole_id=None, mappings_userRole_name=None, friendlyName=None, password=None, type=None, id=None, mappings_groupAttr=None, adminDomainName=None):
        '''
        Mandatory Params :
        name (String)  : Name of the active directory authentication service
        ip (String)  : IP address
        port (Integer)  : Port
        windowsDomainName (String)  : Windows domain name
        globalCatalogEnabled (Boolean)  : Global catalog support enabled or disabled
        tlsEnabled (Boolean)  : AD over TLS Enabled
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the active directory authentication service
        id (String)  : Identifier of the authentication service
        friendlyName (String)  : Friendly name of the active directory authentication service
        password (String)  : Admin password
        type (Enum)  : Authentication protocol.
        adminDomainName (String)  : Admin domain name
        mappings_groupAttr (String)  : Group attribute
        mappings_userRole_id (String)  : Identity user role UUID
        mappings_userRole_name (String)  : Identity user role name
        
        Robot Format :
        Services Create Active Directory Authentication Service    name    ip    port    windowsDomainName    globalCatalogEnabled    tlsEnabled
        '''
        
        data={"domainId" : domainId,"description" : description,"name" : name,"ip" : ip,"tlsEnabled" : tlsEnabled,"id" : id,"windowsDomainName" : windowsDomainName,"friendlyName" : friendlyName,"globalCatalogEnabled" : globalCatalogEnabled,"password" : password,"type" : type,"port" : port,"adminDomainName" : adminDomainName,"mappings":[{"groupAttr" : mappings_groupAttr,"userRole":{"id" : mappings_userRole_id,"name" : mappings_userRole_name}}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/services/auth/ad',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def services_get_o_auth_authentications(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get O Auth Authentications    
        '''
        
        response = self.session.get('/services/auth/oauth')
        return response
        

    def services_get_hlr_authentication(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Hlr Authentication    url_id
        '''
        
        response = self.session.get('/services/auth/hlr/{id}'.format(id=url_id))
        return response
        

    def services_get_active_directory_authentications(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Active Directory Authentications    
        '''
        
        response = self.session.get('/services/auth/ad')
        return response
        

    def services_get_radius_authentication(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Get Radius Authentication    url_id
        '''
        
        response = self.session.get('/services/auth/radius/{id}'.format(id=url_id))
        return response
        

    def services_delete_accounting_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Delete Accounting Service    url_id
        '''
        
        response = self.session.delete('/services/acct/{id}'.format(id=url_id))
        

    def services_delete_radius_authentication_service(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Services Delete Radius Authentication Service    url_id
        '''
        
        response = self.session.delete('/services/auth/radius/{id}'.format(id=url_id))
        

    def dashboardWarning_get_dashboard_warnings(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Dashboardwarning Get Dashboard Warnings    
        '''
        
        response = self.session.get('/dashboardWarning')
        return response
        

    def identity_get_subscription_packages(self, filters_type=None, filters_value=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        filters_type (Enum)  : Identifier of the service
        filters_value (String)  : Domain Id
        
        Robot Format :
        Identity Get Subscription Packages    
        '''
        
        data={"filters":[{"type" : filters_type,"value" : filters_value}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/packageList',jdata)
        return response
        

    def identity_delete_user_roles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Delete User Roles    
        '''
        
        response = self.session.delete('/identity/userrole')
        

    def identity_get_identity_user_role(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get Identity User Role    url_id
        '''
        
        response = self.session.get('/identity/userrole/{id}'.format(id=url_id))
        return response
        

    def identity_delete_user(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Delete User    url_id
        '''
        
        response = self.session.delete('/identity/users/{id}'.format(id=url_id))
        

    def identity_create_user(self, userName, lastName, isDisabled, password, firstName, city=None, remark=None, domainId=None, zipCode=None, subscriberPackage_id=None, countryShortName=None, countryName=None, phone=None, state=None, subscriberPackage_name=None, address=None, email=None):
        '''
        Mandatory Params :
        firstName (String)  : First name
        lastName (String)  : Last Name
        isDisabled (Enum)  : Is Disabled
        userName (String)  : User Name
        password (String)  : Password
        
        Optional Params  :
        city (String)  : City
        remark (String)  : Remark
        domainId (String)  : Domain ID
        zipCode (String)  : Zip Code
        countryShortName (String)  : Country
        countryName (String)  : Country
        phone (String)  : Phone
        state (String)  : State
        address (String)  : Address
        subscriberPackage_id : ""
        subscriberPackage_name : ""
        email (String)  : Email
        
        Robot Format :
        Identity Create User    firstName    lastName    isDisabled    userName    password
        '''
        
        data={"userName" : userName,"city" : city,"remark" : remark,"domainId" : domainId,"firstName" : firstName,"lastName" : lastName,"isDisabled" : isDisabled,"zipCode" : zipCode,"countryShortName" : countryShortName,"countryName" : countryName,"phone" : phone,"state" : state,"address" : address,"password" : password,"subscriberPackage":{"id" : subscriberPackage_id,"name" : subscriberPackage_name},"email" : email}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/users',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def identity_get_user(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get User    url_id
        '''
        
        response = self.session.get('/identity/users/{id}'.format(id=url_id))
        return response
        

    def identity_get_user_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get User List    
        '''
        
        response = self.session.get('/identity/users')
        return response
        

    def identity_get_roles(self, filters_type=None, filters_value=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        filters_type (Enum)  : Identifier of the service
        filters_value (String)  : Domain Id
        
        Robot Format :
        Identity Get Roles    
        '''
        
        data={"filters":[{"type" : filters_type,"value" : filters_value}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/userRoleList',jdata)
        return response
        

    def identity_get_package_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get Package List    
        '''
        
        response = self.session.get('/identity/users/packages')
        return response
        

    def identity_delete_subscription_package(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Delete Subscription Package    url_id
        '''
        
        response = self.session.delete('/identity/packages/{id}'.format(id=url_id))
        

    def identity_update_subscription_package(self, url_id, expirationInterval=None, domainId=None, description=None, expirationValue=None, id=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        expirationInterval (Enum)  : Expiration interval
        domainId (String)  : Domain Id
        description (String)  : description of the subscription package
        expirationValue (Integer)  : Expiration value
        id (String)  : ID
        name (String)  : name of subscription package
        
        Robot Format :
        Identity Update Subscription Package    url_id
        '''
        
        data={"expirationInterval" : expirationInterval,"domainId" : domainId,"description" : description,"expirationValue" : expirationValue,"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/identity/packages/{id}'.format(id=url_id),jdata)
        

    def identity_delete_users(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Delete Users    
        '''
        
        response = self.session.delete('/identity/users')
        

    def identity_delete_user_role(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Delete User Role    url_id
        '''
        
        response = self.session.delete('/identity/userrole/{id}'.format(id=url_id))
        

    def identity_get_identity_user_roles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get Identity User Roles    
        '''
        
        response = self.session.get('/identity/userrole')
        return response
        

    def identity_create_subscription_package(self, expirationValue, expirationInterval, name, domainId=None, description=None):
        '''
        Mandatory Params :
        name (String)  : name of subscription package
        expirationInterval (Enum)  : Expiration interval
        expirationValue (Integer)  : Expiration value
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : description of the subscription package
        
        Robot Format :
        Identity Create Subscription Package    name    expirationInterval    expirationValue
        '''
        
        data={"expirationValue" : expirationValue,"expirationInterval" : expirationInterval,"domainId" : domainId,"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/packages',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def identity_import_guest_pass(self, passValidFor_expirationUnit, wlan_name, zone_id, maxDevices_maxDevicesNumber, maxDevices_maxDevicesAllowed, passValidFor_expirationValue, zone_name, wlan_id, passEffectSince=None, passUseDays=None, domainId=None, sessionDuration_sessionValue=None, sessionDuration_requireLoginAgain=None, sessionDuration_sessionUnit=None):
        '''
        Mandatory Params :
        wlan_id : ""
        wlan_name : ""
        zone_id : ""
        zone_name : ""
        passValidFor_expirationValue : ""
        passValidFor_expirationUnit : ""
        maxDevices_maxDevicesNumber (Integer)  : max devices number
        maxDevices_maxDevicesAllowed (Enum)  : Max devices allowed
        
        Optional Params  :
        passEffectSince (Enum)  : Pass effective since
        passUseDays (Integer)  : Expire new guest pass if not used within
        domainId (String)  : Domain Id
        sessionDuration_requireLoginAgain : ""
        sessionDuration_sessionValue : ""
        sessionDuration_sessionUnit : ""
        
        Robot Format :
        Identity Import Guest Pass    wlan_id    wlan_name    zone_id    zone_name    passValidFor_expirationValue    passValidFor_expirationUnit    maxDevices_maxDevicesNumber    maxDevices_maxDevicesAllowed
        '''
        
        data={"passEffectSince" : passEffectSince,"passUseDays" : passUseDays,"domainId" : domainId,"wlan":{"id" : wlan_id,"name" : wlan_name},"zone":{"id" : zone_id,"name" : zone_name},"maxDevices":{"maxDevicesNumber" : maxDevices_maxDevicesNumber,"maxDevicesAllowed" : maxDevices_maxDevicesAllowed},"passValidFor":{"expirationValue" : passValidFor_expirationValue,"expirationUnit" : passValidFor_expirationUnit},"sessionDuration":{"requireLoginAgain" : sessionDuration_requireLoginAgain,"sessionValue" : sessionDuration_sessionValue,"sessionUnit" : sessionDuration_sessionUnit}}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/guestpass/upload/common',jdata)
        return response
        

    def identity_delete_subscription_packages(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Delete Subscription Packages    
        '''
        
        response = self.session.delete('/identity/packages')
        

    def identity_delete_guest_passes(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Delete Guest Passes    
        '''
        
        response = self.session.delete('/identity/guestpass')
        

    def identity_upload_csv_file(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Upload Csv File    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/guestpass/upload',jdata)
        return response
        

    def identity_get_country_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get Country List    
        '''
        
        response = self.session.get('/identity/users/countries')
        return response
        

    def identity_get_subscription_package_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get Subscription Package List    
        '''
        
        response = self.session.get('/identity/packages')
        return response
        

    def identity_get_users(self, options_createdOnTo=None, options_subscriberType=None, filters_value=None, options_userSource=None, options_userName=None, options_lastName=None, options_status=None, filters_type=None, options_firstName=None, start=None, limit=None, options_createdOnFrom=None, options_displayName=None, options_primaryPhoneNumber=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        start (Integer)  : The index of the first entry to be retrieved. Default: 0
        limit (Integer)  : The maximum number of entries to be retrieved. Default: 1000
        options_userName (String)  : filter identity user list by user name
        options_status (Enum)  : filter identity user list by status
        options_displayName (String)  : filter identity user list by display name
        options_firstName (String)  : filter identity user list by first name
        options_userSource (String)  : filter identity user list by user source
        options_lastName (String)  : filter identity user list by last name
        options_primaryPhoneNumber (String)  : filter identity user list by primary phone number
        options_createdOnTo (Integer)  : filter identity user list by created time, (milliseconds in UTC time)
        options_subscriberType (Enum)  : filter identity user list by subscriber type
        options_createdOnFrom (Integer)  : filter identity user list by created time, (milliseconds in UTC time)
        filters_type (Enum)  : Identifier of the service
        filters_value (String)  : Domain Id
        
        Robot Format :
        Identity Get Users    
        '''
        
        data={"start" : start,"limit" : limit,"options":{"userName" : options_userName,"status" : options_status,"displayName" : options_displayName,"firstName" : options_firstName,"userSource" : options_userSource,"lastName" : options_lastName,"primaryPhoneNumber" : options_primaryPhoneNumber,"createdOnTo" : options_createdOnTo,"subscriberType" : options_subscriberType,"createdOnFrom" : options_createdOnFrom},"filters":[{"type" : filters_type,"value" : filters_value}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/userList',jdata)
        return response
        

    def identity_create_user_role(self, userTrafficProfile_name, maxDevices_maxDevicesNumber, userTrafficProfile_id, name, maxDevices_maxDevicesAllowed, description=None, domainId=None, vlanPooling_name=None, vlanId=None, vlanPooling_id=None):
        '''
        Mandatory Params :
        name (String)  : name
        userTrafficProfile_id : ""
        userTrafficProfile_name : ""
        maxDevices_maxDevicesNumber (Integer)  : max devices number
        maxDevices_maxDevicesAllowed (Enum)  : Max devices allowed
        
        Optional Params  :
        domainId (String)  : Domain Id
        vlanId (Integer)  : vlan id
        vlanPooling_id : ""
        vlanPooling_name : ""
        description (String)  : description
        
        Robot Format :
        Identity Create User Role    name    userTrafficProfile_id    userTrafficProfile_name    maxDevices_maxDevicesNumber    maxDevices_maxDevicesAllowed
        '''
        
        data={"domainId" : domainId,"userTrafficProfile":{"id" : userTrafficProfile_id,"name" : userTrafficProfile_name},"maxDevices":{"maxDevicesNumber" : maxDevices_maxDevicesNumber,"maxDevicesAllowed" : maxDevices_maxDevicesAllowed},"vlanId" : vlanId,"name" : name,"vlanPooling":{"id" : vlanPooling_id,"name" : vlanPooling_name},"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/userrole',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def identity_generate_guest_pass(self, passValidFor_expirationUnit, wlan_name, zone_id, guestName, maxDevices_maxDevicesAllowed, numberOfPasses, passValidFor_expirationValue, zone_name, maxDevices_maxDevicesNumber, wlan_id, passEffectSince=None, passUseDays=None, domainId=None, sessionDuration_sessionValue=None, passValue=None, sessionDuration_requireLoginAgain=None, remarks=None, sessionDuration_sessionUnit=None, autoGeneratedPassword=None):
        '''
        Mandatory Params :
        guestName (String)  : Guest name
        wlan_id : ""
        wlan_name : ""
        zone_id : ""
        zone_name : ""
        numberOfPasses (Integer)  : Number of passes
        passValidFor_expirationValue : ""
        passValidFor_expirationUnit : ""
        maxDevices_maxDevicesNumber (Integer)  : max devices number
        maxDevices_maxDevicesAllowed (Enum)  : Max devices allowed
        
        Optional Params  :
        passEffectSince (Enum)  : Pass effective since
        passUseDays (Integer)  : Expire new guest pass if not used within
        domainId (String)  : Domain Id
        passValue (String)  : Pass value
        sessionDuration_requireLoginAgain : ""
        sessionDuration_sessionValue : ""
        sessionDuration_sessionUnit : ""
        remarks (String)  : Remarks
        autoGeneratedPassword (Boolean)  : Pass generation
        
        Robot Format :
        Identity Generate Guest Pass    guestName    wlan_id    wlan_name    zone_id    zone_name    numberOfPasses    passValidFor_expirationValue    passValidFor_expirationUnit    maxDevices_maxDevicesNumber    maxDevices_maxDevicesAllowed
        '''
        
        data={"passEffectSince" : passEffectSince,"passUseDays" : passUseDays,"domainId" : domainId,"wlan":{"id" : wlan_id,"name" : wlan_name},"zone":{"id" : zone_id,"name" : zone_name},"guestName" : guestName,"maxDevices":{"maxDevicesNumber" : maxDevices_maxDevicesNumber,"maxDevicesAllowed" : maxDevices_maxDevicesAllowed},"passValue" : passValue,"passValidFor":{"expirationValue" : passValidFor_expirationValue,"expirationUnit" : passValidFor_expirationUnit},"sessionDuration":{"requireLoginAgain" : sessionDuration_requireLoginAgain,"sessionValue" : sessionDuration_sessionValue,"sessionUnit" : sessionDuration_sessionUnit},"numberOfPasses" : numberOfPasses,"remarks" : remarks,"autoGeneratedPassword" : autoGeneratedPassword}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/guestpass/generate',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def identity_get_guest_passes(self, options_wlan=None, filters_value=None, options_generatedTimeTo=None, filters_type=None, options_expirationFrom=None, start=None, options_expirationTo=None, limit=None, options_generatedTimeFrom=None, options_displayName=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        start (Integer)  : The index of the first entry to be retrieved. Default: 0
        limit (Integer)  : The maximum number of entries to be retrieved. Default: 1000
        options_wlan (String)  : filter guest pass list by WLAN Id
        options_generatedTimeFrom (Integer)  : filter guest pass list by generated time, (milliseconds in UTC time)
        options_expirationFrom (Integer)  : filter guest pass list by expiration time, (milliseconds in UTC time)
        options_generatedTimeTo (Integer)  : filter guest pass list by generated time, (milliseconds in UTC time)
        options_expirationTo (Integer)  : filter guest pass list by expiration time, (milliseconds in UTC time)
        options_displayName (String)  : filter identity user list by display name
        filters_type (Enum)  : Identifier of the service
        filters_value (String)  : Domain Id
        
        Robot Format :
        Identity Get Guest Passes    
        '''
        
        data={"start" : start,"limit" : limit,"options":{"wlan" : options_wlan,"generatedTimeFrom" : options_generatedTimeFrom,"expirationFrom" : options_expirationFrom,"generatedTimeTo" : options_generatedTimeTo,"expirationTo" : options_expirationTo,"displayName" : options_displayName},"filters":[{"type" : filters_type,"value" : filters_value}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/identity/guestpassList',jdata)
        return response
        

    def identity_modify_user_role(self, url_id, domainId=None, userTrafficProfile_id=None, description=None, vlanPooling_id=None, vlanPooling_name=None, vlanId=None, maxDevices_maxDevicesAllowed=None, userTrafficProfile_name=None, maxDevices_maxDevicesNumber=None, id=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        userTrafficProfile_id : ""
        userTrafficProfile_name : ""
        maxDevices_maxDevicesNumber (Integer)  : max devices number
        maxDevices_maxDevicesAllowed (Enum)  : Max devices allowed
        description (String)  : description
        vlanId (Integer)  : vlan id
        vlanPooling_id : ""
        vlanPooling_name : ""
        id (String)  : ID
        name (String)  : name
        
        Robot Format :
        Identity Modify User Role    url_id
        '''
        
        data={"domainId" : domainId,"userTrafficProfile":{"id" : userTrafficProfile_id,"name" : userTrafficProfile_name},"maxDevices":{"maxDevicesNumber" : maxDevices_maxDevicesNumber,"maxDevicesAllowed" : maxDevices_maxDevicesAllowed},"description" : description,"vlanId" : vlanId,"vlanPooling":{"id" : vlanPooling_id,"name" : vlanPooling_name},"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/identity/userrole/{id}'.format(id=url_id),jdata)
        

    def identity_get_authentication_server_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get Authentication Server List    
        '''
        
        response = self.session.get('/identity/users/aaaserver')
        return response
        

    def identity_get_guest_pass_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get Guest Pass List    
        '''
        
        response = self.session.get('/identity/guestpass')
        return response
        

    def identity_modify_user(self, url_id, city=None, remark=None, domainId=None, firstName=None, lastName=None, isDisabled=None, countryShortName=None, subscriberPackage_id=None, zipCode=None, countryName=None, phone=None, state=None, email=None, subscriberPackage_name=None, address=None, password=None, id=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        city (String)  : City
        remark (String)  : Remark
        domainId (String)  : Domain Id
        firstName (String)  : First name
        lastName (String)  : Last Name
        isDisabled (Enum)  : Is Disabled
        countryShortName (String)  : Country
        zipCode (String)  : Zip Code
        countryName (String)  : Country
        phone (String)  : Phone
        state (String)  : State
        id (String)  : ID
        address (String)  : Address
        password (String)  : Password
        subscriberPackage_id : ""
        subscriberPackage_name : ""
        email (String)  : Email
        
        Robot Format :
        Identity Modify User    url_id
        '''
        
        data={"city" : city,"remark" : remark,"domainId" : domainId,"firstName" : firstName,"lastName" : lastName,"isDisabled" : isDisabled,"countryShortName" : countryShortName,"zipCode" : zipCode,"countryName" : countryName,"phone" : phone,"state" : state,"id" : id,"address" : address,"password" : password,"subscriberPackage":{"id" : subscriberPackage_id,"name" : subscriberPackage_name},"email" : email}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/identity/users/{id}'.format(id=url_id),jdata)
        

    def identity_delete_guest_pass(self, url_userId):
        '''
        Mandatory Params :
        url_userId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Delete Guest Pass    url_userId
        '''
        
        response = self.session.delete('/identity/guestpass/{userId}'.format(userId=url_userId))
        

    def identity_get_subscription_package(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Identity Get Subscription Package    url_id
        '''
        
        response = self.session.get('/identity/packages/{id}'.format(id=url_id))
        return response
        

    def audit_get_alarm_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Audit Get Alarm List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/audit/list',jdata)
        return response
        

    def smsGateway_query_sms_twillo_settings(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Smsgateway Query Sms Twillo Settings    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/smsGateway',jdata)
        return response
        

    def smsGateway_get_sms_twillo_settings(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Smsgateway Get Sms Twillo Settings    
        '''
        
        response = self.session.get('/smsGateway')
        return response
        

    def smsGateway_update_sms_twillo_settings(self, authToken=None, domainId=None, _from=None, serverName=None, serverType=None, enabled=None, accountSid=None, id=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        authToken (String)  : Auth Token
        domainId (String)  : Domain Id
        from (String)  : From
        serverName (String)  : Server Name
        serverType (Enum)  : Server type
        enabled (Enum)  : Enabled SMS server or not
        accountSid (String)  : Account SID
        id (String)  : SMS Id
        
        Robot Format :
        Smsgateway Update Sms Twillo Settings    
        '''
        
        data={"authToken" : authToken,"domainId" : domainId,"_from" : _from,"serverName" : serverName,"serverType" : serverType,"enabled" : enabled,"accountSid" : accountSid,"id" : id}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/smsGateway',jdata)
        

    def vlanpoolings_update_vlan_pooling_basic(self, url_id, name=None, domainId=None, description=None, pool=None, algo=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        description (String)  : Description of the VLAN pooling profile
        domainId (String)  : identifier of the domain
        algo (Enum)  : Algorithm of the VLAN pooling profile
        pool (String)  : VLANs of the VLAN pooling profile
        name (String)  : Name of the VLAN pooling profile
        
        Robot Format :
        Vlanpoolings Update Vlan Pooling Basic    url_id
        '''
        
        data={"description" : description,"domainId" : domainId,"algo" : algo,"pool" : pool,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/vlanpoolings/{id}'.format(id=url_id),jdata)
        

    def vlanpoolings_delete_vlan_pooling(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Vlanpoolings Delete Vlan Pooling    url_id
        '''
        
        response = self.session.delete('/vlanpoolings/{id}'.format(id=url_id))
        

    def vlanpoolings_get_vlan_pooling_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Vlanpoolings Get Vlan Pooling List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/vlanpoolings/query',jdata)
        return response
        

    def vlanpoolings_create_vlan_pooling(self, name, pool, algo, domainId=None, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the VLAN pooling profile
        pool (String)  : VLANs of the VLAN pooling profile
        algo (Enum)  : Algorithm of the VLAN pooling profile
        
        Optional Params  :
        description (String)  : Description of the VLAN pooling profile
        domainId (String)  : identifier of the domain
        
        Robot Format :
        Vlanpoolings Create Vlan Pooling    name    pool    algo
        '''
        
        data={"description" : description,"domainId" : domainId,"algo" : algo,"pool" : pool,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/vlanpoolings',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def vlanpoolings_get_vlan_pooling(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Vlanpoolings Get Vlan Pooling    url_id
        '''
        
        response = self.session.get('/vlanpoolings/{id}'.format(id=url_id))
        return response
        

    def ftps_delete_ftp_list(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Ftps Delete Ftp List    
        '''
        
        response = self.session.delete('/ftps')
        

    def ftps_delete_ftp_service_by_id(self, url_ftpId):
        '''
        Mandatory Params :
        url_ftpId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Ftps Delete Ftp Service By Id    url_ftpId
        '''
        
        response = self.session.delete('/ftps/{ftpId}'.format(ftpId=url_ftpId))
        

    def ftps_test_ftp_settings_by_id(self, url_ftpId):
        '''
        Mandatory Params :
        url_ftpId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Ftps Test Ftp Settings By Id    url_ftpId
        '''
        
        response = self.session.get('/ftps/test/{ftpId}'.format(ftpId=url_ftpId))
        return response
        

    def ftps_create(self, lastModifiedOn=None, lastModifiedBy=None, domainId=None, ftpRemoteDirectory=None, creatorUUID=None, ftpHost=None, ftpPort=None, ftpUserName=None, tenantId=None, ftpName=None, ftpProtocol=None, ftpPassword=None, createDatetime=None, id=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        lastModifiedOn (Integer)  : last modified time
        ftpName (String)  : FTP name
        domainId (String)  : Domain Id
        ftpHost (String)  : IP/DN of FTP
        creatorUUID (String)  : creator id
        ftpRemoteDirectory (String)  : Destination directory used for file upload
        ftpPort (Integer)  : Port used by FTP
        tenantId (String)  : Tenant Id
        lastModifiedBy (String)  : last modified user
        ftpProtocol (Enum)  : Protocol used
        ftpPassword (String)  : Password for login
        id (String)  : FTP Id
        createDatetime (Integer)  : entry create time
        ftpUserName (String)  : Username for login
        
        Robot Format :
        Ftps Create    
        '''
        
        data={"lastModifiedOn" : lastModifiedOn,"ftpName" : ftpName,"domainId" : domainId,"ftpHost" : ftpHost,"creatorUUID" : creatorUUID,"ftpRemoteDirectory" : ftpRemoteDirectory,"ftpPort" : ftpPort,"tenantId" : tenantId,"lastModifiedBy" : lastModifiedBy,"ftpProtocol" : ftpProtocol,"ftpPassword" : ftpPassword,"id" : id,"createDatetime" : createDatetime,"ftpUserName" : ftpUserName}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/ftps',jdata)
        return response
        

    def ftps_test_ftp_settings(self, lastModifiedOn=None, lastModifiedBy=None, domainId=None, ftpRemoteDirectory=None, creatorUUID=None, ftpHost=None, ftpPort=None, ftpUserName=None, tenantId=None, ftpName=None, ftpProtocol=None, ftpPassword=None, createDatetime=None, id=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        lastModifiedOn (Integer)  : last modified time
        ftpName (String)  : FTP name
        domainId (String)  : Domain Id
        ftpHost (String)  : IP/DN of FTP
        creatorUUID (String)  : creator id
        ftpRemoteDirectory (String)  : Destination directory used for file upload
        ftpPort (Integer)  : Port used by FTP
        tenantId (String)  : Tenant Id
        lastModifiedBy (String)  : last modified user
        ftpProtocol (Enum)  : Protocol used
        ftpPassword (String)  : Password for login
        id (String)  : FTP Id
        createDatetime (Integer)  : entry create time
        ftpUserName (String)  : Username for login
        
        Robot Format :
        Ftps Test Ftp Settings    
        '''
        
        response = self.session.get('/ftps/test')
        return response
        

    def ftps_update(self, url_ftpId, lastModifiedOn=None, lastModifiedBy=None, domainId=None, ftpRemoteDirectory=None, creatorUUID=None, ftpHost=None, ftpPort=None, ftpUserName=None, tenantId=None, ftpName=None, ftpProtocol=None, ftpPassword=None, createDatetime=None, id=None):
        '''
        Mandatory Params :
        url_ftpId : ""
        
        Optional Params  :
        lastModifiedOn (Integer)  : last modified time
        ftpName (String)  : FTP name
        domainId (String)  : Domain Id
        ftpHost (String)  : IP/DN of FTP
        creatorUUID (String)  : creator id
        ftpRemoteDirectory (String)  : Destination directory used for file upload
        ftpPort (Integer)  : Port used by FTP
        tenantId (String)  : Tenant Id
        lastModifiedBy (String)  : last modified user
        ftpProtocol (Enum)  : Protocol used
        ftpPassword (String)  : Password for login
        id (String)  : FTP Id
        createDatetime (Integer)  : entry create time
        ftpUserName (String)  : Username for login
        
        Robot Format :
        Ftps Update    url_ftpId
        '''
        
        data={"lastModifiedOn" : lastModifiedOn,"ftpName" : ftpName,"domainId" : domainId,"ftpHost" : ftpHost,"creatorUUID" : creatorUUID,"ftpRemoteDirectory" : ftpRemoteDirectory,"ftpPort" : ftpPort,"tenantId" : tenantId,"lastModifiedBy" : lastModifiedBy,"ftpProtocol" : ftpProtocol,"ftpPassword" : ftpPassword,"id" : id,"createDatetime" : createDatetime,"ftpUserName" : ftpUserName}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/ftps/{ftpId}'.format(ftpId=url_ftpId),jdata)
        

    def ftps_get_ftp_by_id(self, url_ftpId):
        '''
        Mandatory Params :
        url_ftpId : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Ftps Get Ftp By Id    url_ftpId
        '''
        
        response = self.session.get('/ftps/{ftpId}'.format(ftpId=url_ftpId))
        return response
        

    def ftps_get_ftp_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Ftps Get Ftp List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/ftps/query',jdata)
        return response
        

    def globalNotification_get_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalnotification Get List    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/globalNotification',jdata)
        return response
        

    def globalNotification_get_config(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalnotification Get Config    
        '''
        
        response = self.session.get('/globalNotification/config')
        return response
        

    def globalNotification_set_config(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Globalnotification Set Config    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/globalNotification/config',jdata)
        

    def clients_disconnect_clients(self, clientList_apMac=None, clientList_mac=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        clientList_apMac (String)  : AP Mac
        clientList_mac (String)  : Client Mac
        
        Robot Format :
        Clients Disconnect Clients    
        '''
        
        data={"clientList":[{"apMac" : clientList_apMac,"mac" : clientList_mac}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/clients/bulkDisconnect',jdata)
        return response
        

    def clients_disconnect(self, apMac, mac):
        '''
        Mandatory Params :
        mac (String)  : Client Mac
        apMac (String)  : AP Mac
        
        Optional Params  :
        None
        
        Robot Format :
        Clients Disconnect    mac    apMac
        '''
        
        data={"apMac" : apMac,"mac" : mac}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/clients/disconnect',jdata)
        return response
        

    def clients_de_auth_clients(self, clientList_apMac=None, clientList_mac=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        clientList_apMac (String)  : AP Mac
        clientList_mac (String)  : Client Mac
        
        Robot Format :
        Clients De Auth Clients    
        '''
        
        data={"clientList":[{"apMac" : clientList_apMac,"mac" : clientList_mac}]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/clients/bulkDeauth',jdata)
        return response
        

    def clients_de_auth_client(self, apMac, mac):
        '''
        Mandatory Params :
        mac (String)  : Client Mac
        apMac (String)  : AP Mac
        
        Optional Params  :
        None
        
        Robot Format :
        Clients De Auth Client    mac    apMac
        '''
        
        data={"apMac" : apMac,"mac" : mac}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/clients/deauth',jdata)
        return response
        

    def clients_query_by_wlan_name(self, url_wlanname, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        url_wlanname : ""
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Clients Query By Wlan Name    url_wlanname
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/clients/byWlanName/{wlanname}'.format(wlanname=url_wlanname),jdata)
        return response
        

    def profiles_update_lbs_profile(self, url_id, domainId=None, description=None, modifiedDateTime=None, creatorUsername=None, url=None, venue=None, port=None, creatorId=None, modifierUsername=None, id=None, password=None, createDateTime=None, modifierId=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : LBS description
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        url (String)  : LBS url
        venue (String)  : Venue
        createDateTime (Integer)  : Timestamp of being created
        port (Integer)  : LBS port
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        password (String)  : Password
        id (String)  : Profile Id
        modifierId (String)  : Modifier ID
        name (String)  : LBS name
        
        Robot Format :
        Profiles Update Lbs Profile    url_id
        '''
        
        data={"domainId" : domainId,"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"url" : url,"venue" : venue,"createDateTime" : createDateTime,"port" : port,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"password" : password,"id" : id,"modifierId" : modifierId,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/lbs/{id}'.format(id=url_id),jdata)
        

    def profiles_approve_vdp(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Approve Vdp    url_id
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.put('/profiles/vdp/{id}/approve'.format(id=url_id),jdata)
        

    def profiles_get_ttgpdg_list_v5(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Ttgpdg List V5    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/ttgpdg/query',jdata)
        return response
        

    def profiles_get_user_traffic_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get User Traffic Profiles    
        '''
        
        response = self.session.get('/profiles/utp')
        return response
        

    def profiles_update_hotspot_profile(self, url_id, location_name=None, name=None, portalCustomization_language=None, smartClientSupport=None, portalCustomization_termsAndConditionsText=None, walledGardens=None, userSession_gracePeriodInMin=None, portalCustomization_title=None, portalCustomization_logo=None, portalUrl=None, redirect_url=None, portalCustomization_termsAndConditionsRequired=None, smartClientInfo=None, macAddressFormat=None, location_id=None, userSession_timeoutInMin=None, description=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        portalCustomization_logo (String)  : logo
        portalCustomization_termsAndConditionsRequired (Boolean)  : Terms and conditions is required or not
        portalCustomization_termsAndConditionsText (String)  : Terms and conditions text
        portalCustomization_language : ""
        portalCustomization_title (String)  : Title
        name (String)  : Name of the Hotspot
        walledGardens (String)  : Walled garden map set of the Hotspot
        smartClientSupport (Enum)  : Smart client support of the Hotspot
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        location_id (String)  : Portal location id
        location_name (String)  : Portal location name
        smartClientInfo (String)  : Smart client info of the Hotspot
        portalUrl (String)  : Portal URL of the Hotspot
        macAddressFormat (Integer)  : mac address format of redirection
        description (String)  : Description of the Hotspot
        
        Robot Format :
        Profiles Update Hotspot Profile    url_id
        '''
        
        data={"redirect":{"url" : redirect_url},"portalCustomization":{"logo" : portalCustomization_logo,"termsAndConditionsRequired" : portalCustomization_termsAndConditionsRequired,"termsAndConditionsText" : portalCustomization_termsAndConditionsText,"language" : portalCustomization_language,"title" : portalCustomization_title},"name" : name,"walledGardens":[ walledGardens],"smartClientSupport" : smartClientSupport,"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"location":{"id" : location_id,"name" : location_name},"smartClientInfo" : smartClientInfo,"portalUrl" : portalUrl,"macAddressFormat" : macAddressFormat,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/hotspot/{id}'.format(id=url_id),jdata)
        

    def profiles_create_l2o_gre(self, name, coreNetworkGateway_keepAliveRetry, coreNetworkGateway_tunnelMTUSize, coreNetworkGateway_primaryGateway, coreNetworkGateway_keepAlivePeriod, coreNetworkGateway_secondaryGateway, coreNetworkGateway_tunnelMTU, dhcpRelay_dhcpOption82_subopt1Format=None, domainId=None, description=None, dhcpRelay_dhcpServer2=None, dhcpRelay_dhcpOption82_dhcpOption82Enabled=None, dhcpRelay_relayBothEnabled=None, dhcpRelay_dhcpOption82_subopt151AreaName=None, dhcpRelay_dhcpServer1=None, dhcpRelay_dhcpOption82_subopt2Enabled=None, dhcpRelay_dhcpOption82_subopt150Enabled=None, dhcpRelay_dhcpOption82_subopt2Format=None, dhcpRelay_dhcpRelayEnabled=None, dhcpRelay_dhcpOption82_subopt151Enabled=None, id=None, dhcpRelay_dhcpOption82_subopt1Enabled=None, dhcpRelay_dhcpOption82_subopt151Format=None):
        '''
        Mandatory Params :
        name (String)  : Name of L2oGRE profile
        coreNetworkGateway_primaryGateway (String)  : Primary Gateway
        coreNetworkGateway_tunnelMTUSize (Integer)  : Manual setting value of Gateway path MTU
        coreNetworkGateway_keepAliveRetry (Integer)  : ICMP Keep-Alive Retry
        coreNetworkGateway_keepAlivePeriod (Integer)  : ICMP Keep-Alive Period(secs)
        coreNetworkGateway_secondaryGateway (String)  : Secondary Gateway
        coreNetworkGateway_tunnelMTU (Enum)  : Gateway path MTU
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the L2oGRE profile
        dhcpRelay_dhcpOption82_subopt151Enabled (Boolean)  : Enable subopt-151
        dhcpRelay_dhcpOption82_dhcpOption82Enabled (Boolean)  : Enable DHCP Option 82
        dhcpRelay_dhcpOption82_subopt2Enabled (Boolean)  : Enable subopt-2
        dhcpRelay_dhcpOption82_subopt1Enabled (Boolean)  : Enable subopt-1
        dhcpRelay_dhcpOption82_subopt150Enabled (Boolean)  : Subopt-150 with VLAN
        dhcpRelay_dhcpOption82_subopt151Format (Enum)  : Subopt-151 format
        dhcpRelay_dhcpOption82_subopt2Format (Enum)  : Subopt-2 format
        dhcpRelay_dhcpOption82_subopt1Format (Enum)  : Subopt-1 format
        dhcpRelay_dhcpOption82_subopt151AreaName (String)  : Subopt-151 Area Name value
        dhcpRelay_relayBothEnabled (Boolean)  : Send DHCP requests to both servers simultaneously.
        dhcpRelay_dhcpServer2 (String)  : DHCP Server 2
        dhcpRelay_dhcpServer1 (String)  : DHCP Server 1
        dhcpRelay_dhcpRelayEnabled (Boolean)  : Enable DHCP Relay
        id (String)  : Profile Id
        
        Robot Format :
        Profiles Create L2O Gre    name    coreNetworkGateway_primaryGateway    coreNetworkGateway_tunnelMTUSize    coreNetworkGateway_keepAliveRetry    coreNetworkGateway_keepAlivePeriod    coreNetworkGateway_secondaryGateway    coreNetworkGateway_tunnelMTU
        '''
        
        data={"domainId" : domainId,"description" : description,"dhcpRelay":{"dhcpOption82":{"subopt151Enabled" : dhcpRelay_dhcpOption82_subopt151Enabled,"dhcpOption82Enabled" : dhcpRelay_dhcpOption82_dhcpOption82Enabled,"subopt2Enabled" : dhcpRelay_dhcpOption82_subopt2Enabled,"subopt1Enabled" : dhcpRelay_dhcpOption82_subopt1Enabled,"subopt150Enabled" : dhcpRelay_dhcpOption82_subopt150Enabled,"subopt151Format" : dhcpRelay_dhcpOption82_subopt151Format,"subopt2Format" : dhcpRelay_dhcpOption82_subopt2Format,"subopt1Format" : dhcpRelay_dhcpOption82_subopt1Format,"subopt151AreaName" : dhcpRelay_dhcpOption82_subopt151AreaName},"relayBothEnabled" : dhcpRelay_relayBothEnabled,"dhcpServer2" : dhcpRelay_dhcpServer2,"dhcpServer1" : dhcpRelay_dhcpServer1,"dhcpRelayEnabled" : dhcpRelay_dhcpRelayEnabled},"coreNetworkGateway":{"primaryGateway" : coreNetworkGateway_primaryGateway,"tunnelMTUSize" : coreNetworkGateway_tunnelMTUSize,"keepAliveRetry" : coreNetworkGateway_keepAliveRetry,"keepAlivePeriod" : coreNetworkGateway_keepAlivePeriod,"secondaryGateway" : coreNetworkGateway_secondaryGateway,"tunnelMTU" : coreNetworkGateway_tunnelMTU},"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/l2ogre',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_ttgpdg_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Ttgpdg List    
        '''
        
        response = self.session.get('/profiles/ttgpdg')
        return response
        

    def profiles_get_vdp_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Vdp Profiles    
        '''
        
        response = self.session.get('/profiles/vdp')
        return response
        

    def profiles_get_l2o_gre_list_v5(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get L2O Gre List V5    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/l2ogre/query',jdata)
        return response
        

    def profiles_get_hs20_providers(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Hs20 Providers    
        '''
        
        response = self.session.get('/profiles/hs20/identityproviders')
        return response
        

    def profiles_delete_vdp(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Vdp    url_id
        '''
        
        response = self.session.delete('/profiles/vdp/{id}'.format(id=url_id))
        

    def profiles_delete_ghs20_providers(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Ghs20 Providers    
        '''
        
        response = self.session.delete('/profiles/hs20/identityproviders')
        

    def profiles_create_hs20_provider(self, osu_externalOSU_subscriptionDescriptions_description=None, osu_externalOSU_osuServiceUrl=None, osu_externalOSU_osuNaiRealm=None, authentications_name=None, realms_eapMethods_type=None, osu_internalOSU_osuPortal_externalUrl=None, authentications_id=None, authentications_serviceType=None, osu_internalOSU_whitelistedDomains=None, realms_encoding=None, osu_externalOSU_subscriptionDescriptions_icon=None, realms_eapMethods_authSettings_vendorType=None, osu_internalOSU_osuAuthServices_name=None, osu_internalOSU_provisioningFormat=None, osu_internalOSU_provisioningProtocals=None, osu_internalOSU_osuAuthServices_credentialType=None, osu_internalOSU_osuAuthServices_id=None, description=None, osu_internalOSU_subscriptionDescriptions_name=None, accountings_serviceType=None, modifiedDateTime=None, creatorUsername=None, accountings_name=None, osu_type=None, id=None, realms_name=None, modifierId=None, osu_internalOSU_certificate_id=None, osu_externalOSU_subscriptionDescriptions_language=None, realms_eapMethods_authSettings_info=None, osu_internalOSU_subscriptionDescriptions_icon=None, plmns_mcc=None, homeOis_oi=None, authentications_realm=None, osu_internalOSU_subscriptionDescriptions_language=None, creatorId=None, osu_internalOSU_provisioningUpdateType=None, osu_externalOSU_subscriptionDescriptions_name=None, realms_eapMethods_authSettings_vendorId=None, osu_internalOSU_osuAuthServices_realm=None, accountings_realm=None, accountings_id=None, osu_internalOSU_osuPortal_internalOSUPortal_id=None, osu_externalOSU_whitelistedDomains=None, osu_internalOSU_osuPortal_internalOSUPortal_name=None, osu_internalOSU_commonLanguageIcon=None, name=None, osu_internalOSU_osuAuthServices_expiration=None, domainId=None, osu_externalOSU_provisioningProtocals=None, createDateTime=None, osu_externalOSU_commonLanguageIcon=None, osu_internalOSU_subscriptionDescriptions_description=None, plmns_mnc=None, realms_eapMethods_authSettings_type=None, homeOis_name=None, modifierUsername=None, authentications_vlanId=None, osu_internalOSU_certificate_name=None, osu_internalOSU_osuPortal_type=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        accountings_serviceType (Enum)  : Accounting service type
        accountings_realm : ""
        accountings_realm : ""
        accountings_id (String)  : Accounting id
        accountings_name (String)  : Accounting name
        domainId (String)  : Domain Id
        realms_eapMethods_type (Enum)  : EAP method type
        realms_eapMethods_authSettings_info (Enum)  : EAP auth info
        realms_eapMethods_authSettings_vendorId (Integer)  : EAP auth vendor ID
        realms_eapMethods_authSettings_type (String)  : EAP auth type
        realms_eapMethods_authSettings_vendorType (Integer)  : EAP auth vendor type
        realms_name (String)  : Name of realm
        realms_encoding (Enum)  : Encoding
        description (String)  : Description of the Hotspot 2.0 identity provider profile
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        authentications_serviceType (Enum)  : Authentication service type
        authentications_realm (String)  : Authentication realm
        authentications_id (String)  : Authentication id
        authentications_vlanId (Integer)  : Dynamic vlan ID
        authentications_name (String)  : Authentication name
        homeOis_name (String)  : Name of the home OI
        homeOis_oi (String)  : Orgnization ID(3Hex or 5Hex)
        osu_type (Enum)  : Online singup type
        osu_internalOSU_provisioningUpdateType (Enum)  : Provisioning update at
        osu_internalOSU_certificate_id : ""
        osu_internalOSU_certificate_name : ""
        osu_internalOSU_commonLanguageIcon (String)  : The base64 encoded data of icon.
        osu_internalOSU_provisioningProtocals (Enum)  : Provisioning protocal
        osu_internalOSU_whitelistedDomains (String)  : whitelisted domains
        osu_internalOSU_provisioningFormat (Enum)  : Provisioning format
        osu_internalOSU_osuPortal_internalOSUPortal_id : ""
        osu_internalOSU_osuPortal_internalOSUPortal_name : ""
        osu_internalOSU_osuPortal_externalUrl (String)  : External online singup portal, start with https://, required when type is External
        osu_internalOSU_osuPortal_type (Enum)  : Portal type
        osu_internalOSU_subscriptionDescriptions_icon (String)  : The binary data of icon, maximum size 65536
        osu_internalOSU_subscriptionDescriptions_description (String)  : Description of the friendly name
        osu_internalOSU_subscriptionDescriptions_language (Enum)  : Language of the friendly name
        osu_internalOSU_subscriptionDescriptions_name (String)  : Name of the friendly name
        osu_internalOSU_osuAuthServices_id (String)  : Identifier of authentication service
        osu_internalOSU_osuAuthServices_realm (String)  : Authentication realm
        osu_internalOSU_osuAuthServices_expiration (Integer)  : Expiration hour. null mean never expire
        osu_internalOSU_osuAuthServices_name (String)  : Authentication service name
        osu_internalOSU_osuAuthServices_credentialType (Enum)  : Authentication credential type
        osu_externalOSU_commonLanguageIcon (String)  : The base64 encoded data of icon.
        osu_externalOSU_provisioningProtocals (Enum)  : Provisioning protocal
        osu_externalOSU_osuServiceUrl (String)  : External service URL, start with https://
        osu_externalOSU_whitelistedDomains (String)  : Whitelisted domains
        osu_externalOSU_subscriptionDescriptions_icon (String)  : The binary data of icon, maximum size 65536
        osu_externalOSU_subscriptionDescriptions_description (String)  : Description of the friendly name
        osu_externalOSU_subscriptionDescriptions_language (Enum)  : Language of the friendly name
        osu_externalOSU_subscriptionDescriptions_name (String)  : Name of the friendly name
        osu_externalOSU_osuNaiRealm (String)  : Online signup NAI realm, it should be one of realm as defined in Hotspot 2.0 identity provider
        id (String)  : Identifier of the Hotspot 2.0 identity provider profile
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        plmns_mnc (String)  : MNC
        plmns_mcc (String)  : MCC
        createDateTime (Integer)  : Timestamp of being created
        modifierId (String)  : Modifier ID
        name (String)  : Name of the Hotspot 2.0 identity provider profile
        
        Robot Format :
        Profiles Create Hs20 Provider    
        '''
        
        data={"accountings":[{"serviceType" : accountings_serviceType,"realm" : accountings_realm,"realm" : accountings_realm,"id" : accountings_id,"name" : accountings_name}],"domainId" : domainId,"realms":[{"eapMethods":[{"type" : realms_eapMethods_type,"authSettings":[{"info" : realms_eapMethods_authSettings_info,"vendorId" : realms_eapMethods_authSettings_vendorId,"type" : realms_eapMethods_authSettings_type,"vendorType" : realms_eapMethods_authSettings_vendorType}]}],"name" : realms_name,"encoding" : realms_encoding}],"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"authentications":[{"serviceType" : authentications_serviceType,"realm" : authentications_realm,"id" : authentications_id,"vlanId" : authentications_vlanId,"name" : authentications_name}],"homeOis":[{"name" : homeOis_name,"oi" : homeOis_oi}],"osu":{"type" : osu_type,"internalOSU":{"provisioningUpdateType" : osu_internalOSU_provisioningUpdateType,"certificate":{"id" : osu_internalOSU_certificate_id,"name" : osu_internalOSU_certificate_name},"commonLanguageIcon" : osu_internalOSU_commonLanguageIcon,"provisioningProtocals":[ osu_internalOSU_provisioningProtocals],"whitelistedDomains":[ osu_internalOSU_whitelistedDomains],"provisioningFormat" : osu_internalOSU_provisioningFormat,"osuPortal":{"internalOSUPortal":{"id" : osu_internalOSU_osuPortal_internalOSUPortal_id,"name" : osu_internalOSU_osuPortal_internalOSUPortal_name},"externalUrl" : osu_internalOSU_osuPortal_externalUrl,"type" : osu_internalOSU_osuPortal_type},"subscriptionDescriptions":[{"icon" : osu_internalOSU_subscriptionDescriptions_icon,"description" : osu_internalOSU_subscriptionDescriptions_description,"language" : osu_internalOSU_subscriptionDescriptions_language,"name" : osu_internalOSU_subscriptionDescriptions_name}],"osuAuthServices":[{"id" : osu_internalOSU_osuAuthServices_id,"realm" : osu_internalOSU_osuAuthServices_realm,"expiration" : osu_internalOSU_osuAuthServices_expiration,"name" : osu_internalOSU_osuAuthServices_name,"credentialType" : osu_internalOSU_osuAuthServices_credentialType}]},"externalOSU":{"commonLanguageIcon" : osu_externalOSU_commonLanguageIcon,"provisioningProtocals":[ osu_externalOSU_provisioningProtocals],"osuServiceUrl" : osu_externalOSU_osuServiceUrl,"whitelistedDomains":[ osu_externalOSU_whitelistedDomains],"subscriptionDescriptions":[{"icon" : osu_externalOSU_subscriptionDescriptions_icon,"description" : osu_externalOSU_subscriptionDescriptions_description,"language" : osu_externalOSU_subscriptionDescriptions_language,"name" : osu_externalOSU_subscriptionDescriptions_name}],"osuNaiRealm" : osu_externalOSU_osuNaiRealm}},"id" : id,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"plmns":[{"mnc" : plmns_mnc,"mcc" : plmns_mcc}],"createDateTime" : createDateTime,"modifierId" : modifierId,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/hs20/identityproviders',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_l2o_gre(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get L2O Gre    url_id
        '''
        
        response = self.session.get('/profiles/l2ogre/{id}'.format(id=url_id))
        return response
        

    def profiles_delete_dns_server_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Dns Server Profile    url_id
        '''
        
        response = self.session.delete('/profiles/dnsserver/{id}'.format(id=url_id))
        

    def profiles_delete_ttgpdg(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Ttgpdg    url_id
        '''
        
        response = self.session.delete('/profiles/ttgpdg/{id}'.format(id=url_id))
        

    def profiles_query_hs20_providers(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Query Hs20 Providers    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/hs20/identityproviders/query',jdata)
        return response
        

    def profiles_get_online_signup_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Online Signup Profile    url_id
        '''
        
        response = self.session.get('/profiles/osu/{id}'.format(id=url_id))
        return response
        

    def profiles_get_bridge(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Bridge    url_id
        '''
        
        response = self.session.get('/profiles/bridge/{id}'.format(id=url_id))
        return response
        

    def profiles_delete_ghs20_operator(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Ghs20 Operator    url_id
        '''
        
        response = self.session.delete('/profiles/hs20/operators/{id}'.format(id=url_id))
        

    def profiles_create_accounting_profile(self, name, mvnoId=None, domainId=None, realmMappings_name=None, description=None, realmMappings_serviceType=None, realmMappings_realm=None, realmMappings_id=None):
        '''
        Mandatory Params :
        name (String)  : Name of the accounting profile
        
        Optional Params  :
        realmMappings_serviceType (Enum)  : Accounting service type, NA is NA-Request Rejected
        realmMappings_realm (String)  : Realm
        realmMappings_id (String)  : Accounting service UUID
        realmMappings_name (String)  : Accounting service name
        description (String)  : Description of the accounting profile
        domainId (String)  : Domain UUID
        mvnoId (String)  : Tenant UUID
        
        Robot Format :
        Profiles Create Accounting Profile    name
        '''
        
        data={"realmMappings":[{"serviceType" : realmMappings_serviceType,"realm" : realmMappings_realm,"id" : realmMappings_id,"name" : realmMappings_name}],"description" : description,"domainId" : domainId,"name" : name,"mvnoId" : mvnoId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/acct',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_authentication_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Authentication Profiles    
        '''
        
        response = self.session.get('/profiles/auth')
        return response
        

    def profiles_get_accounting_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Accounting Profiles    
        '''
        
        response = self.session.get('/profiles/acct')
        return response
        

    def profiles_get_soft_gre_tunnel_list_v5(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get Soft Gre Tunnel List V5    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/tunnel/softgre/query',jdata)
        return response
        

    def profiles_get_soft_gre_tunnel_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Soft Gre Tunnel List    
        '''
        
        response = self.session.get('/profiles/tunnel/softgre')
        return response
        

    def profiles_create_user_traffic_profile(self, defaultAction, name, ipAclRules_sourceMaxPort=None, ipAclRules_downlinkRateLimitingMbps=None, ipAclRules_direction=None, ipAclRules_action=None, ipAclRules_sourceIp=None, downlinkRateLimiting_downlinkRateLimitingBps=None, ipAclRules_enableDestinationIpSubnet=None, ipAclRules_enableSourcePortRange=None, ipAclRules_destinationIp=None, ipAclRules_description=None, ipAclRules_downlinkRateLimitingEnabled=None, ipAclRules_protocol=None, uplinkRateLimiting_uplinkRateLimitingEnabled=None, ipAclRules_destinationMinPort=None, ipAclRules_priority=None, ipAclRules_destinationIpMask=None, ipAclRules_destinationMaxPort=None, appPolicyId=None, description=None, ipAclRules_uplinkRateLimitingEnabled=None, uplinkRateLimiting_uplinkRateLimitingBps=None, downlinkRateLimiting_downlinkRateLimitingEnabled=None, ipAclRules_sourceMinPort=None, ipAclRules_enableSourceIpSubnet=None, mvnoId=None, domainId=None, ipAclRules_uplinkRateLimitingMbps=None, ipAclRules_enableDestinationPortRange=None, ipAclRules_sourceIpMask=None):
        '''
        Mandatory Params :
        name (String)  : Name of the user traffic profile
        defaultAction (Enum)  : Default action
        
        Optional Params  :
        mvnoId (String)  : Tenant UUID
        appPolicyId (String)  : Application Policy UUID
        downlinkRateLimiting_downlinkRateLimitingEnabled (Boolean)  : Downlink rate limiting enabled or disabled
        downlinkRateLimiting_downlinkRateLimitingBps (String)  : Downlink rate limiting, range 0.1 ~ 200 mpbs
        ipAclRules_uplinkRateLimitingMbps (Integer)  : Uplink rate limiting
        ipAclRules_downlinkRateLimitingMbps (Integer)  : Downlink rate limiting
        ipAclRules_protocol (Enum)  : The protocol of traffic access control.
        ipAclRules_description (String)  : Description of the traffic access control rule
        ipAclRules_destinationIp (String)  : Subnet network address or ip address of destination IP.
        ipAclRules_sourceIpMask (String)  : Subnet mask of source IP
        ipAclRules_uplinkRateLimitingEnabled (Boolean)  : Uplink rate limiting enabled
        ipAclRules_enableSourceIpSubnet (Boolean)  : Source IP subnet enabled or disabled
        ipAclRules_destinationIpMask (String)  : Subnet mask of destination IP
        ipAclRules_enableDestinationIpSubnet (Boolean)  : Destination IP subnet enabled or disabled
        ipAclRules_priority (Integer)  : Priority
        ipAclRules_destinationMaxPort (Integer)  : The maxinum port of destination port range.
        ipAclRules_downlinkRateLimitingEnabled (Boolean)  : Downlink rate limiting enabled
        ipAclRules_enableSourcePortRange (Boolean)  : Source port range enabled or disabled
        ipAclRules_sourceMinPort (Integer)  : The minunum port of source port range.
        ipAclRules_direction (Enum)  : The direction of traffic access control.
        ipAclRules_sourceMaxPort (Integer)  : The maxinum port of source port range.
        ipAclRules_enableDestinationPortRange (Boolean)  : Destincation port range enabled or disabled
        ipAclRules_sourceIp (String)  : Subnet network address or ip address of source IP.
        ipAclRules_action (Enum)  : The access of traffic access control.
        ipAclRules_destinationMinPort (Integer)  : The mininum port of destination port range.
        domainId (String)  : Domain UUID
        uplinkRateLimiting_uplinkRateLimitingEnabled (Boolean)  : Uplink rate limiting enabled or disabled
        uplinkRateLimiting_uplinkRateLimitingBps (String)  : Uplink rate limiting, range 0.1 ~ 200 mpbs
        description (String)  : Description of the user traffic profile
        
        Robot Format :
        Profiles Create User Traffic Profile    name    defaultAction
        '''
        
        data={"mvnoId" : mvnoId,"appPolicyId" : appPolicyId,"downlinkRateLimiting":{"downlinkRateLimitingEnabled" : downlinkRateLimiting_downlinkRateLimitingEnabled,"downlinkRateLimitingBps" : downlinkRateLimiting_downlinkRateLimitingBps},"ipAclRules":[{"uplinkRateLimitingMbps" : ipAclRules_uplinkRateLimitingMbps,"downlinkRateLimitingMbps" : ipAclRules_downlinkRateLimitingMbps,"protocol" : ipAclRules_protocol,"description" : ipAclRules_description,"destinationIp" : ipAclRules_destinationIp,"sourceIpMask" : ipAclRules_sourceIpMask,"uplinkRateLimitingEnabled" : ipAclRules_uplinkRateLimitingEnabled,"enableSourceIpSubnet" : ipAclRules_enableSourceIpSubnet,"destinationIpMask" : ipAclRules_destinationIpMask,"enableDestinationIpSubnet" : ipAclRules_enableDestinationIpSubnet,"priority" : ipAclRules_priority,"destinationMaxPort" : ipAclRules_destinationMaxPort,"downlinkRateLimitingEnabled" : ipAclRules_downlinkRateLimitingEnabled,"enableSourcePortRange" : ipAclRules_enableSourcePortRange,"sourceMinPort" : ipAclRules_sourceMinPort,"direction" : ipAclRules_direction,"sourceMaxPort" : ipAclRules_sourceMaxPort,"enableDestinationPortRange" : ipAclRules_enableDestinationPortRange,"sourceIp" : ipAclRules_sourceIp,"action" : ipAclRules_action,"destinationMinPort" : ipAclRules_destinationMinPort}],"name" : name,"defaultAction" : defaultAction,"domainId" : domainId,"uplinkRateLimiting":{"uplinkRateLimitingEnabled" : uplinkRateLimiting_uplinkRateLimitingEnabled,"uplinkRateLimitingBps" : uplinkRateLimiting_uplinkRateLimitingBps},"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/utp',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_delete_ghs20_operators(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Ghs20 Operators    
        '''
        
        response = self.session.delete('/profiles/hs20/operators')
        

    def profiles_get_user_traffic_profiles_by_query_critaria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get User Traffic Profiles By Query Critaria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/utp/query',jdata)
        return response
        

    def profiles_delete_online_signup_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Online Signup Profile    url_id
        '''
        
        response = self.session.delete('/profiles/osu/{id}'.format(id=url_id))
        

    def profiles_get_soft_gre_tunnel(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Soft Gre Tunnel    url_id
        '''
        
        response = self.session.get('/profiles/tunnel/softgre/{id}'.format(id=url_id))
        return response
        

    def profiles_update_ttgpdg(self, url_id, dhcpRelay_dhcpServer1=None, dhcpRelay_dhcpServer2=None, defaultNoRealmAPN=None, apnRealms_defaultAPN=None, dhcpRelay_dhcpOption82_subopt151Enabled=None, commonSetting_apnOIInUse=None, dhcpRelay_dhcpOption82_subopt151AreaName=None, apnRealms_realm=None, dhcpRelay_dhcpOption82_subopt2Enabled=None, dhcpRelay_dhcpOption82_subopt150Enabled=None, apnForwardingRealms_apnType=None, dhcpRelay_dhcpOption82_subopt151Format=None, commonSetting_acctRetryTimeout=None, description=None, dhcpRelay_dhcpRelayEnabled=None, dhcpRelay_relayBothEnabled=None, commonSetting_acctRetry=None, commonSetting_pdgUeIdleTimeout=None, apnForwardingRealms_routeType=None, domainId=None, name=None, dhcpRelay_dhcpOption82_dhcpOption82Enabled=None, defaultNoMatchingAPN=None, apnForwardingRealms_apn=None, dhcpRelay_dhcpOption82_subopt1Format=None, dhcpRelay_dhcpOption82_subopt2Format=None, commonSetting_apnFormat2GGSN=None, dhcpRelay_dhcpOption82_subopt1Enabled=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        name (String)  : Name of TTG PDG profile
        defaultNoMatchingAPN (String)  : Default APN of the No Matching Realm Found
        apnForwardingRealms_apnType (Enum)  : type of the forwarding policy APN.
        apnForwardingRealms_apn (String)  : the forwarding policy APN, if apnType is NIOI, APN Example : internet-v4.mnc111.mcc222.gprs
        apnForwardingRealms_routeType (Enum)  : routeType of the forwarding policy APN.
        defaultNoRealmAPN (String)  : Default APN of the No Realm Specified
        dhcpRelay_dhcpOption82_subopt151Enabled (Boolean)  : Enable subopt-151
        dhcpRelay_dhcpOption82_dhcpOption82Enabled (Boolean)  : Enable DHCP Option 82
        dhcpRelay_dhcpOption82_subopt2Enabled (Boolean)  : Enable subopt-2
        dhcpRelay_dhcpOption82_subopt1Enabled (Boolean)  : Enable subopt-1
        dhcpRelay_dhcpOption82_subopt150Enabled (Boolean)  : Subopt-150 with VLAN
        dhcpRelay_dhcpOption82_subopt151Format (Enum)  : Subopt-151 format
        dhcpRelay_dhcpOption82_subopt2Format (Enum)  : Subopt-2 format
        dhcpRelay_dhcpOption82_subopt1Format (Enum)  : Subopt-1 format
        dhcpRelay_dhcpOption82_subopt151AreaName (String)  : Subopt-151 Area Name value
        dhcpRelay_relayBothEnabled (Boolean)  : Send DHCP requests to both servers simultaneously.
        dhcpRelay_dhcpServer2 (String)  : DHCP Server 2
        dhcpRelay_dhcpServer1 (String)  : DHCP Server 1
        dhcpRelay_dhcpRelayEnabled (Boolean)  : Enable DHCP Relay
        commonSetting_apnOIInUse (Boolean)  : APN-OI of TTG PDG common setting
        commonSetting_pdgUeIdleTimeout (Integer)  : PDG UE session idle timeout(secs) of TTG PDG common setting
        commonSetting_acctRetry (Integer)  : Accounting retry of TTG PDG common setting
        commonSetting_acctRetryTimeout (Integer)  : Accounting retry timeout(secs) of TTG PDG common setting
        commonSetting_apnFormat2GGSN (Enum)  : APN format to GGSN of TTG PDG common setting
        apnRealms_defaultAPN (String)  : name of the apnForwardingPolicys.
        apnRealms_realm (String)  : name of the apnRealm.
        description (String)  : Description of the TTG PDG profile
        
        Robot Format :
        Profiles Update Ttgpdg    url_id
        '''
        
        data={"domainId" : domainId,"name" : name,"defaultNoMatchingAPN" : defaultNoMatchingAPN,"apnForwardingRealms":[{"apnType" : apnForwardingRealms_apnType,"apn" : apnForwardingRealms_apn,"routeType" : apnForwardingRealms_routeType}],"defaultNoRealmAPN" : defaultNoRealmAPN,"dhcpRelay":{"dhcpOption82":{"subopt151Enabled" : dhcpRelay_dhcpOption82_subopt151Enabled,"dhcpOption82Enabled" : dhcpRelay_dhcpOption82_dhcpOption82Enabled,"subopt2Enabled" : dhcpRelay_dhcpOption82_subopt2Enabled,"subopt1Enabled" : dhcpRelay_dhcpOption82_subopt1Enabled,"subopt150Enabled" : dhcpRelay_dhcpOption82_subopt150Enabled,"subopt151Format" : dhcpRelay_dhcpOption82_subopt151Format,"subopt2Format" : dhcpRelay_dhcpOption82_subopt2Format,"subopt1Format" : dhcpRelay_dhcpOption82_subopt1Format,"subopt151AreaName" : dhcpRelay_dhcpOption82_subopt151AreaName},"relayBothEnabled" : dhcpRelay_relayBothEnabled,"dhcpServer2" : dhcpRelay_dhcpServer2,"dhcpServer1" : dhcpRelay_dhcpServer1,"dhcpRelayEnabled" : dhcpRelay_dhcpRelayEnabled},"commonSetting":{"apnOIInUse" : commonSetting_apnOIInUse,"pdgUeIdleTimeout" : commonSetting_pdgUeIdleTimeout,"acctRetry" : commonSetting_acctRetry,"acctRetryTimeout" : commonSetting_acctRetryTimeout,"apnFormat2GGSN" : commonSetting_apnFormat2GGSN},"apnRealms":[{"defaultAPN" : apnRealms_defaultAPN,"realm" : apnRealms_realm}],"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/ttgpdg/{id}'.format(id=url_id),jdata)
        

    def profiles_delete_hotspot(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Hotspot    url_id
        '''
        
        response = self.session.delete('/profiles/hotspot/{id}'.format(id=url_id))
        

    def profiles_clone_user_traffic_profile(self, url_id, newName=None, newId=None, oldName=None, oldId=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        newName (String)  : Id for new profile
        newId (String)  : name for new profile
        oldName (String)  : original name
        oldId (String)  : original name
        
        Robot Format :
        Profiles Clone User Traffic Profile    url_id
        '''
        
        data={"newName" : newName,"newId" : newId,"oldName" : oldName,"oldId" : oldId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/utp/clone/{id}'.format(id=url_id),jdata)
        return response
        

    def profiles_patch_l3_roaming_basic_config_l3_roaming(self, dataPlanes_name=None, dataPlanes_key=None, criteriaType=None, dataPlanes_firmwareVersion=None, dataPlanes_value=None, dataPlanes_activated=None, featureEnabled=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        dataPlanes_firmwareVersion (String)  : DP firmware version
        dataPlanes_activated (Integer)  : Show if this DP is included in the L3 roaming feature or not, 0 means excluded and 1 means included
        dataPlanes_value (String)  : A list of L3 roaming configuration for this DP
        dataPlanes_key (String)  : Data plane key
        dataPlanes_name (String)  : DP name
        criteriaType (Enum)  : The L3 roaming configuration type.
        featureEnabled (Integer)  : Show if L3 roaming feature is enabled or not
        
        Robot Format :
        Profiles Patch L3 Roaming Basic Config L3 Roaming    
        '''
        
        data={"dataPlanes":[{"firmwareVersion" : dataPlanes_firmwareVersion,"activated" : dataPlanes_activated,"value" : dataPlanes_value,"key" : dataPlanes_key,"name" : dataPlanes_name}],"criteriaType" : criteriaType,"featureEnabled" : featureEnabled}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/tunnel/l3Roaming',jdata)
        

    def profiles_get_bridge_list_v5(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Bridge List V5    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/bridge/query',jdata)
        return response
        

    def profiles_clone_dns_server_profile(self, url_id, newName=None, newId=None, oldName=None, oldId=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        newName (String)  : Id for new profile
        newId (String)  : name for new profile
        oldName (String)  : original name
        oldId (String)  : original name
        
        Robot Format :
        Profiles Clone Dns Server Profile    url_id
        '''
        
        data={"newName" : newName,"newId" : newId,"oldName" : oldName,"oldId" : oldId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/dnsserver/clone/{id}'.format(id=url_id),jdata)
        return response
        

    def profiles_get_authentication_profiles_by_query_criteria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get Authentication Profiles By Query Criteria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/auth/query',jdata)
        return response
        

    def profiles_create_authentication_profile(self, aaaSuppportEnabled, gppSuppportEnabled, name, mvnoId=None, domainId=None, realmMappings_name=None, realmMappings_dynamicVlanId=None, ttgCommonSetting_sessionTimeout=None, realmMappings_serviceType=None, ttgCommonSetting_sessionIdleTimeout=None, realmMappings_hostedAaaEnabled=None, realmMappings_realm=None, ttgCommonSetting_mobileCountryCode=None, ttgCommonSetting_mobileNetworkCode=None, realmMappings_id=None, h20SuppportEnabled=None, ttgCommonSetting_interimAcctInterval=None, realmMappings_authorizationMethod=None, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the authentication profile
        gppSuppportEnabled (Boolean)  : 3GPP support enabled or disabled
        aaaSuppportEnabled (Boolean)  : Hosted AAA support enabled or disabled
        
        Optional Params  :
        mvnoId (String)  : Tenant UUID
        domainId (String)  : Domain UUID
        h20SuppportEnabled (Boolean)  : Hotspot 2.0 support enabled or disabled
        ttgCommonSetting_mobileNetworkCode (String)  : Mobile network code
        ttgCommonSetting_sessionIdleTimeout (Integer)  : Session idle timeout (unit: seconds)
        ttgCommonSetting_sessionTimeout (Integer)  : Session timeout (unit: seconds)
        ttgCommonSetting_interimAcctInterval (Integer)  : Interim accounting interval (value should be 0 or 600~65536, unit: seconds)
        ttgCommonSetting_mobileCountryCode (String)  : Mobile country code
        realmMappings_serviceType (Enum)  : Authentication service type, NA is NA-Request Rejected
        realmMappings_realm (String)  : Realm
        realmMappings_name (String)  : Authentication service name
        realmMappings_authorizationMethod (Enum)  : Authorization method
        realmMappings_hostedAaaEnabled : ""
        realmMappings_dynamicVlanId (Integer)  : Dynamic VLAN ID
        realmMappings_id (String)  : Authentication service UUID
        description (String)  : Description of the authentication profile
        
        Robot Format :
        Profiles Create Authentication Profile    name    gppSuppportEnabled    aaaSuppportEnabled
        '''
        
        data={"mvnoId" : mvnoId,"domainId" : domainId,"name" : name,"h20SuppportEnabled" : h20SuppportEnabled,"gppSuppportEnabled" : gppSuppportEnabled,"ttgCommonSetting":{"mobileNetworkCode" : ttgCommonSetting_mobileNetworkCode,"sessionIdleTimeout" : ttgCommonSetting_sessionIdleTimeout,"sessionTimeout" : ttgCommonSetting_sessionTimeout,"interimAcctInterval" : ttgCommonSetting_interimAcctInterval,"mobileCountryCode" : ttgCommonSetting_mobileCountryCode},"realmMappings":[{"serviceType" : realmMappings_serviceType,"realm" : realmMappings_realm,"name" : realmMappings_name,"authorizationMethod" : realmMappings_authorizationMethod,"hostedAaaEnabled" : realmMappings_hostedAaaEnabled,"dynamicVlanId" : realmMappings_dynamicVlanId,"id" : realmMappings_id}],"aaaSuppportEnabled" : aaaSuppportEnabled,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/auth',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_delete_l2o_gr_es(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete L2O Gr Es    
        '''
        
        response = self.session.delete('/profiles/l2ogre')
        

    def profiles_create_zone_affinity_profile(self, name, zoneAffinityList):
        '''
        Mandatory Params :
        name (String)  : Zone affinity profile name
        zoneAffinityList : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Create Zone Affinity Profile    name    zoneAffinityList
        '''
        
        data={"name" : name,"zoneAffinityList":[ zoneAffinityList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/zoneAffinity',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_disable_user_traffic_profile_attributes_downlink_rate_limiting(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Disable User Traffic Profile Attributes Downlink Rate Limiting    url_id
        '''
        
        response = self.session.delete('/profiles/utp/{id}/downlinkRateLimiting'.format(id=url_id))
        

    def profiles_delete_bridges(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Bridges    
        '''
        
        response = self.session.delete('/profiles/bridge')
        

    def profiles_delete_mixed_mode_apn_realms(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Mixed Mode Apn Realms    url_id
        '''
        
        response = self.session.delete('/profiles/mixedmode/{id}/apnRealms'.format(id=url_id))
        

    def profiles_update_online_signup_profile(self, url_id, domainId=None, description=None, portalCustomization_language=None, creatorUsername=None, portalCustomization_termsAndConditionsText=None, modifierUsername=None, portalCustomization_title=None, portalCustomization_logo=None, creatorId=None, portalCustomization_termsAndConditionsRequired=None, id=None, name=None, createDateTime=None, modifierId=None, modifiedDateTime=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        portalCustomization_logo (String)  : logo
        portalCustomization_termsAndConditionsRequired (Boolean)  : Terms and conditions is required or not
        portalCustomization_termsAndConditionsText (String)  : Terms and conditions text
        portalCustomization_language : ""
        portalCustomization_title (String)  : Title
        domainId (String)  : Domain Id
        description (String)  : Description of the online singup profile
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        createDateTime (Integer)  : Timestamp of being created
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        id (String)  : Identifier of the online singup profile
        modifierId (String)  : Modifier ID
        name (String)  : Name of the online singup profile
        
        Robot Format :
        Profiles Update Online Signup Profile    url_id
        '''
        
        data={"portalCustomization":{"logo" : portalCustomization_logo,"termsAndConditionsRequired" : portalCustomization_termsAndConditionsRequired,"termsAndConditionsText" : portalCustomization_termsAndConditionsText,"language" : portalCustomization_language,"title" : portalCustomization_title},"domainId" : domainId,"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"createDateTime" : createDateTime,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"id" : id,"modifierId" : modifierId,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/osu/{id}'.format(id=url_id),jdata)
        

    def profiles_get_ruckus_gre_tunnel(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Ruckus Gre Tunnel    url_id
        '''
        
        response = self.session.get('/profiles/tunnel/ruckusgre/{id}'.format(id=url_id))
        return response
        

    def profiles_get_zone_affinity_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Zone Affinity Profile    url_id
        '''
        
        response = self.session.get('/profiles/zoneAffinity/{id}'.format(id=url_id))
        return response
        

    def profiles_create_lbs_profile(self, domainId=None, description=None, modifiedDateTime=None, creatorUsername=None, url=None, venue=None, port=None, creatorId=None, modifierUsername=None, id=None, password=None, createDateTime=None, modifierId=None, name=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : LBS description
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        url (String)  : LBS url
        venue (String)  : Venue
        createDateTime (Integer)  : Timestamp of being created
        port (Integer)  : LBS port
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        password (String)  : Password
        id (String)  : Profile Id
        modifierId (String)  : Modifier ID
        name (String)  : LBS name
        
        Robot Format :
        Profiles Create Lbs Profile    
        '''
        
        data={"domainId" : domainId,"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"url" : url,"venue" : venue,"createDateTime" : createDateTime,"port" : port,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"password" : password,"id" : id,"modifierId" : modifierId,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/lbs',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_modify_mixed_mode(self, url_id, apnForwardingPolicys_forwardingServiceProfile_id=None, domainId=None, description=None, apnForwardingPolicys_apnType=None, defaultNoMatchingAPN=None, id=None, apnRealms_realm=None, defaultNoRealmAPN=None, apnRealms_defaultAPN=None, apnForwardingPolicys_apn=None, apnForwardingPolicys_forwardRouteType=None, apnForwardingPolicys_forwardingServiceProfile_name=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the Mixed Mode profile
        defaultNoMatchingAPN (String)  : Default APN of the No Matching Realm Found
        defaultNoRealmAPN (String)  : Default APN of the No Realm Specified
        apnRealms_defaultAPN (String)  : name of the apnForwardingPolicys.
        apnRealms_realm (String)  : name of the apnRealm.
        apnForwardingPolicys_apnType (Enum)  : type of the forwarding policy APN.
        apnForwardingPolicys_forwardingServiceProfile_id : ""
        apnForwardingPolicys_forwardingServiceProfile_name : ""
        apnForwardingPolicys_forwardRouteType (Enum)  : routeType of the forwarding policy APN.
        apnForwardingPolicys_apn (String)  : the forwarding policy APN, if apnType is NIOI, APN Example : internet-v4.mnc111.mcc222.gprs
        id (String)  : Profile Id
        name (String)  : Name of Mixed Mode profile
        
        Robot Format :
        Profiles Modify Mixed Mode    url_id
        '''
        
        data={"domainId" : domainId,"description" : description,"defaultNoMatchingAPN" : defaultNoMatchingAPN,"defaultNoRealmAPN" : defaultNoRealmAPN,"apnRealms":[{"defaultAPN" : apnRealms_defaultAPN,"realm" : apnRealms_realm}],"apnForwardingPolicys":[{"apnType" : apnForwardingPolicys_apnType,"forwardingServiceProfile":{"id" : apnForwardingPolicys_forwardingServiceProfile_id,"name" : apnForwardingPolicys_forwardingServiceProfile_name},"forwardRouteType" : apnForwardingPolicys_forwardRouteType,"apn" : apnForwardingPolicys_apn}],"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/mixedmode/{id}'.format(id=url_id),jdata)
        

    def profiles_get_ruckus_gre_list_v5(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get Ruckus Gre List V5    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/tunnel/ruckusgre/query',jdata)
        return response
        

    def profiles_delete_ruckus_gre_tunnels(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Ruckus Gre Tunnels    
        '''
        
        response = self.session.delete('/profiles/tunnel/ruckusgre')
        

    def profiles_get_user_traffic_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get User Traffic Profile    url_id
        '''
        
        response = self.session.get('/profiles/utp/{id}'.format(id=url_id))
        return response
        

    def profiles_create_hotspot_profile_smart_client_only(self, smartClientInfo, macAddressFormat, name, location_name=None, description=None, walledGardens=None, userSession_gracePeriodInMin=None, redirect_url=None, location_id=None, userSession_timeoutInMin=None):
        '''
        Mandatory Params :
        name (String)  : Name of the Hotspot
        smartClientInfo (String)  : Smart client info of the Hotspot
        macAddressFormat (Integer)  : mac address format of redirection
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        walledGardens (String)  : Walled garden map set of the Hotspot
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        location_id (String)  : Portal location id
        location_name (String)  : Portal location name
        description (String)  : Description of the Hotspot
        
        Robot Format :
        Profiles Create Hotspot Profile Smart Client Only    name    smartClientInfo    macAddressFormat
        '''
        
        data={"redirect":{"url" : redirect_url},"name" : name,"walledGardens":[ walledGardens],"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"location":{"id" : location_id,"name" : location_name},"smartClientInfo" : smartClientInfo,"macAddressFormat" : macAddressFormat,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/hotspot/smartClientOnly',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_delete_ipsec_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Ipsec Profile    url_id
        '''
        
        response = self.session.delete('/profiles/tunnel/ipsec/{id}'.format(id=url_id))
        

    def profiles_get_lbs_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Lbs Profiles    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/lbs/query',jdata)
        return response
        

    def profiles_update_user_traffic_profile(self, url_id, ipAclRules_sourceMaxPort=None, ipAclRules_downlinkRateLimitingMbps=None, ipAclRules_direction=None, ipAclRules_action=None, ipAclRules_sourceIp=None, downlinkRateLimiting_downlinkRateLimitingBps=None, ipAclRules_enableDestinationIpSubnet=None, id=None, ipAclRules_enableSourcePortRange=None, ipAclRules_destinationIp=None, ipAclRules_description=None, ipAclRules_downlinkRateLimitingEnabled=None, ipAclRules_protocol=None, uplinkRateLimiting_uplinkRateLimitingEnabled=None, defaultAction=None, ipAclRules_destinationMinPort=None, ipAclRules_priority=None, ipAclRules_destinationIpMask=None, ipAclRules_destinationMaxPort=None, appPolicyId=None, description=None, ipAclRules_uplinkRateLimitingEnabled=None, uplinkRateLimiting_uplinkRateLimitingBps=None, downlinkRateLimiting_downlinkRateLimitingEnabled=None, ipAclRules_sourceMinPort=None, ipAclRules_enableSourceIpSubnet=None, mvnoId=None, domainId=None, ipAclRules_uplinkRateLimitingMbps=None, name=None, ipAclRules_enableDestinationPortRange=None, ipAclRules_sourceIpMask=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        mvnoId (String)  : Tenant UUID
        appPolicyId (String)  : Application Policy UUID
        downlinkRateLimiting_downlinkRateLimitingEnabled (Boolean)  : Downlink rate limiting enabled or disabled
        downlinkRateLimiting_downlinkRateLimitingBps (String)  : Downlink rate limiting, range 0.1 ~ 200 mpbs
        ipAclRules_uplinkRateLimitingMbps (Integer)  : Uplink rate limiting
        ipAclRules_downlinkRateLimitingMbps (Integer)  : Downlink rate limiting
        ipAclRules_protocol (Enum)  : The protocol of traffic access control.
        ipAclRules_description (String)  : Description of the traffic access control rule
        ipAclRules_destinationIp (String)  : Subnet network address or ip address of destination IP.
        ipAclRules_sourceIpMask (String)  : Subnet mask of source IP
        ipAclRules_uplinkRateLimitingEnabled (Boolean)  : Uplink rate limiting enabled
        ipAclRules_enableSourceIpSubnet (Boolean)  : Source IP subnet enabled or disabled
        ipAclRules_destinationIpMask (String)  : Subnet mask of destination IP
        ipAclRules_enableDestinationIpSubnet (Boolean)  : Destination IP subnet enabled or disabled
        ipAclRules_priority (Integer)  : Priority
        ipAclRules_destinationMaxPort (Integer)  : The maxinum port of destination port range.
        ipAclRules_downlinkRateLimitingEnabled (Boolean)  : Downlink rate limiting enabled
        ipAclRules_enableSourcePortRange (Boolean)  : Source port range enabled or disabled
        ipAclRules_sourceMinPort (Integer)  : The minunum port of source port range.
        ipAclRules_direction (Enum)  : The direction of traffic access control.
        ipAclRules_sourceMaxPort (Integer)  : The maxinum port of source port range.
        ipAclRules_enableDestinationPortRange (Boolean)  : Destincation port range enabled or disabled
        ipAclRules_sourceIp (String)  : Subnet network address or ip address of source IP.
        ipAclRules_action (Enum)  : The access of traffic access control.
        ipAclRules_destinationMinPort (Integer)  : The mininum port of destination port range.
        description (String)  : Description of the user traffic profile
        defaultAction (Enum)  : Default action
        domainId (String)  : Domain UUID
        uplinkRateLimiting_uplinkRateLimitingEnabled (Boolean)  : Uplink rate limiting enabled or disabled
        uplinkRateLimiting_uplinkRateLimitingBps (String)  : Uplink rate limiting, range 0.1 ~ 200 mpbs
        id (String)  : Identifier of the user traffic profile
        name (String)  : Name of the user traffic profile
        
        Robot Format :
        Profiles Update User Traffic Profile    url_id
        '''
        
        data={"mvnoId" : mvnoId,"appPolicyId" : appPolicyId,"downlinkRateLimiting":{"downlinkRateLimitingEnabled" : downlinkRateLimiting_downlinkRateLimitingEnabled,"downlinkRateLimitingBps" : downlinkRateLimiting_downlinkRateLimitingBps},"ipAclRules":[{"uplinkRateLimitingMbps" : ipAclRules_uplinkRateLimitingMbps,"downlinkRateLimitingMbps" : ipAclRules_downlinkRateLimitingMbps,"protocol" : ipAclRules_protocol,"description" : ipAclRules_description,"destinationIp" : ipAclRules_destinationIp,"sourceIpMask" : ipAclRules_sourceIpMask,"uplinkRateLimitingEnabled" : ipAclRules_uplinkRateLimitingEnabled,"enableSourceIpSubnet" : ipAclRules_enableSourceIpSubnet,"destinationIpMask" : ipAclRules_destinationIpMask,"enableDestinationIpSubnet" : ipAclRules_enableDestinationIpSubnet,"priority" : ipAclRules_priority,"destinationMaxPort" : ipAclRules_destinationMaxPort,"downlinkRateLimitingEnabled" : ipAclRules_downlinkRateLimitingEnabled,"enableSourcePortRange" : ipAclRules_enableSourcePortRange,"sourceMinPort" : ipAclRules_sourceMinPort,"direction" : ipAclRules_direction,"sourceMaxPort" : ipAclRules_sourceMaxPort,"enableDestinationPortRange" : ipAclRules_enableDestinationPortRange,"sourceIp" : ipAclRules_sourceIp,"action" : ipAclRules_action,"destinationMinPort" : ipAclRules_destinationMinPort}],"description" : description,"defaultAction" : defaultAction,"domainId" : domainId,"uplinkRateLimiting":{"uplinkRateLimitingEnabled" : uplinkRateLimiting_uplinkRateLimitingEnabled,"uplinkRateLimitingBps" : uplinkRateLimiting_uplinkRateLimitingBps},"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/utp/{id}'.format(id=url_id),jdata)
        

    def profiles_disable_ttgpdg_attribute_dhcp_relay(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Disable Ttgpdg Attribute Dhcp Relay    url_id
        '''
        
        response = self.session.delete('/profiles/ttgpdg/{id}/dhcpRelay'.format(id=url_id))
        

    def profiles_get_online_signup_profiles_v5(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Online Signup Profiles V5    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/osu/query',jdata)
        return response
        

    def profiles_clone_authentication_profile(self, url_id, newName=None, newId=None, oldName=None, oldId=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        newName (String)  : Id for new profile
        newId (String)  : name for new profile
        oldName (String)  : original name
        oldId (String)  : original name
        
        Robot Format :
        Profiles Clone Authentication Profile    url_id
        '''
        
        data={"newName" : newName,"newId" : newId,"oldName" : oldName,"oldId" : oldId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/auth/clone/{id}'.format(id=url_id),jdata)
        return response
        

    def profiles_diable_hs20_provider_attribute_osu(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Diable Hs20 Provider Attribute Osu    url_id
        '''
        
        response = self.session.delete('/profiles/hs20/identityproviders/{id}/osu'.format(id=url_id))
        

    def profiles_get_ttgpdg(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Ttgpdg    url_id
        '''
        
        response = self.session.get('/profiles/ttgpdg/{id}'.format(id=url_id))
        return response
        

    def profiles_update_dns_server_profile(self, url_id, mvnoId=None, domainId=None, name=None, secondaryIp=None, tertiaryIp=None, primaryIp=None, id=None, description=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        mvnoId (String)  : Tenant UUID
        domainId (String)  : Domain UUID
        name (String)  : Name of the dns server service
        secondaryIp (String)  : Secondary ip of DNS server service
        tertiaryIp (String)  : Tertiary ip of DNS server service
        primaryIp (String)  : Primary ip of DNS server service
        id (String)  : Profile Id
        description (String)  : Description of the dns server service
        
        Robot Format :
        Profiles Update Dns Server Profile    url_id
        '''
        
        data={"mvnoId" : mvnoId,"domainId" : domainId,"name" : name,"secondaryIp" : secondaryIp,"tertiaryIp" : tertiaryIp,"primaryIp" : primaryIp,"id" : id,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/dnsserver/{id}'.format(id=url_id),jdata)
        

    def profiles_clone_accounting_profile(self, url_id, newName=None, newId=None, oldName=None, oldId=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        newName (String)  : Id for new profile
        newId (String)  : name for new profile
        oldName (String)  : original name
        oldId (String)  : original name
        
        Robot Format :
        Profiles Clone Accounting Profile    url_id
        '''
        
        data={"newName" : newName,"newId" : newId,"oldName" : oldName,"oldId" : oldId}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/acct/clone/{id}'.format(id=url_id),jdata)
        return response
        

    def profiles_modify_l2o_gre(self, url_id, dhcpRelay_dhcpServer1=None, dhcpRelay_dhcpServer2=None, coreNetworkGateway_keepAlivePeriod=None, id=None, coreNetworkGateway_tunnelMTUSize=None, dhcpRelay_dhcpOption82_subopt151AreaName=None, coreNetworkGateway_keepAliveRetry=None, dhcpRelay_dhcpOption82_subopt2Enabled=None, dhcpRelay_dhcpOption82_subopt150Enabled=None, coreNetworkGateway_secondaryGateway=None, coreNetworkGateway_tunnelMTU=None, dhcpRelay_dhcpOption82_subopt151Format=None, description=None, dhcpRelay_dhcpRelayEnabled=None, dhcpRelay_relayBothEnabled=None, coreNetworkGateway_primaryGateway=None, dhcpRelay_dhcpOption82_subopt151Enabled=None, domainId=None, name=None, dhcpRelay_dhcpOption82_dhcpOption82Enabled=None, dhcpRelay_dhcpOption82_subopt1Format=None, dhcpRelay_dhcpOption82_subopt2Format=None, dhcpRelay_dhcpOption82_subopt1Enabled=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the L2oGRE profile
        dhcpRelay_dhcpOption82_subopt151Enabled (Boolean)  : Enable subopt-151
        dhcpRelay_dhcpOption82_dhcpOption82Enabled (Boolean)  : Enable DHCP Option 82
        dhcpRelay_dhcpOption82_subopt2Enabled (Boolean)  : Enable subopt-2
        dhcpRelay_dhcpOption82_subopt1Enabled (Boolean)  : Enable subopt-1
        dhcpRelay_dhcpOption82_subopt150Enabled (Boolean)  : Subopt-150 with VLAN
        dhcpRelay_dhcpOption82_subopt151Format (Enum)  : Subopt-151 format
        dhcpRelay_dhcpOption82_subopt2Format (Enum)  : Subopt-2 format
        dhcpRelay_dhcpOption82_subopt1Format (Enum)  : Subopt-1 format
        dhcpRelay_dhcpOption82_subopt151AreaName (String)  : Subopt-151 Area Name value
        dhcpRelay_relayBothEnabled (Boolean)  : Send DHCP requests to both servers simultaneously.
        dhcpRelay_dhcpServer2 (String)  : DHCP Server 2
        dhcpRelay_dhcpServer1 (String)  : DHCP Server 1
        dhcpRelay_dhcpRelayEnabled (Boolean)  : Enable DHCP Relay
        coreNetworkGateway_primaryGateway (String)  : Primary Gateway
        coreNetworkGateway_tunnelMTUSize (Integer)  : Manual setting value of Gateway path MTU
        coreNetworkGateway_keepAliveRetry (Integer)  : ICMP Keep-Alive Retry
        coreNetworkGateway_keepAlivePeriod (Integer)  : ICMP Keep-Alive Period(secs)
        coreNetworkGateway_secondaryGateway (String)  : Secondary Gateway
        coreNetworkGateway_tunnelMTU (Enum)  : Gateway path MTU
        id (String)  : Profile Id
        name (String)  : Name of L2oGRE profile
        
        Robot Format :
        Profiles Modify L2O Gre    url_id
        '''
        
        data={"domainId" : domainId,"description" : description,"dhcpRelay":{"dhcpOption82":{"subopt151Enabled" : dhcpRelay_dhcpOption82_subopt151Enabled,"dhcpOption82Enabled" : dhcpRelay_dhcpOption82_dhcpOption82Enabled,"subopt2Enabled" : dhcpRelay_dhcpOption82_subopt2Enabled,"subopt1Enabled" : dhcpRelay_dhcpOption82_subopt1Enabled,"subopt150Enabled" : dhcpRelay_dhcpOption82_subopt150Enabled,"subopt151Format" : dhcpRelay_dhcpOption82_subopt151Format,"subopt2Format" : dhcpRelay_dhcpOption82_subopt2Format,"subopt1Format" : dhcpRelay_dhcpOption82_subopt1Format,"subopt151AreaName" : dhcpRelay_dhcpOption82_subopt151AreaName},"relayBothEnabled" : dhcpRelay_relayBothEnabled,"dhcpServer2" : dhcpRelay_dhcpServer2,"dhcpServer1" : dhcpRelay_dhcpServer1,"dhcpRelayEnabled" : dhcpRelay_dhcpRelayEnabled},"coreNetworkGateway":{"primaryGateway" : coreNetworkGateway_primaryGateway,"tunnelMTUSize" : coreNetworkGateway_tunnelMTUSize,"keepAliveRetry" : coreNetworkGateway_keepAliveRetry,"keepAlivePeriod" : coreNetworkGateway_keepAlivePeriod,"secondaryGateway" : coreNetworkGateway_secondaryGateway,"tunnelMTU" : coreNetworkGateway_tunnelMTU},"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/l2ogre/{id}'.format(id=url_id),jdata)
        

    def profiles_create_ttgpdg(self, commonSetting_acctRetryTimeout, defaultNoRealmAPN, name, commonSetting_acctRetry, commonSetting_apnOIInUse, defaultNoMatchingAPN, apnForwardingRealms_routeType, apnForwardingRealms_apn, apnForwardingRealms_apnType, commonSetting_pdgUeIdleTimeout, commonSetting_apnFormat2GGSN, dhcpRelay_dhcpOption82_subopt1Format=None, domainId=None, description=None, dhcpRelay_dhcpServer2=None, dhcpRelay_dhcpOption82_dhcpOption82Enabled=None, dhcpRelay_relayBothEnabled=None, dhcpRelay_dhcpOption82_subopt151AreaName=None, dhcpRelay_dhcpServer1=None, apnRealms_realm=None, dhcpRelay_dhcpOption82_subopt2Enabled=None, apnRealms_defaultAPN=None, dhcpRelay_dhcpOption82_subopt150Enabled=None, dhcpRelay_dhcpOption82_subopt2Format=None, dhcpRelay_dhcpRelayEnabled=None, dhcpRelay_dhcpOption82_subopt151Enabled=None, id=None, dhcpRelay_dhcpOption82_subopt1Enabled=None, dhcpRelay_dhcpOption82_subopt151Format=None):
        '''
        Mandatory Params :
        name (String)  : Name of TTG PDG profile
        commonSetting_apnOIInUse (Boolean)  : APN-OI of TTG PDG common setting
        commonSetting_pdgUeIdleTimeout (Integer)  : PDG UE session idle timeout(secs) of TTG PDG common setting
        commonSetting_acctRetry (Integer)  : Accounting retry of TTG PDG common setting
        commonSetting_acctRetryTimeout (Integer)  : Accounting retry timeout(secs) of TTG PDG common setting
        commonSetting_apnFormat2GGSN (Enum)  : APN format to GGSN of TTG PDG common setting
        apnForwardingRealms_apnType (Enum)  : type of the forwarding policy APN.
        apnForwardingRealms_apn (String)  : the forwarding policy APN, if apnType is NIOI, APN Example : internet-v4.mnc111.mcc222.gprs
        apnForwardingRealms_routeType (Enum)  : routeType of the forwarding policy APN.
        defaultNoMatchingAPN (String)  : Default APN of the No Matching Realm Found
        defaultNoRealmAPN (String)  : Default APN of the No Realm Specified
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the TTG PDG profile
        dhcpRelay_dhcpOption82_subopt151Enabled (Boolean)  : Enable subopt-151
        dhcpRelay_dhcpOption82_dhcpOption82Enabled (Boolean)  : Enable DHCP Option 82
        dhcpRelay_dhcpOption82_subopt2Enabled (Boolean)  : Enable subopt-2
        dhcpRelay_dhcpOption82_subopt1Enabled (Boolean)  : Enable subopt-1
        dhcpRelay_dhcpOption82_subopt150Enabled (Boolean)  : Subopt-150 with VLAN
        dhcpRelay_dhcpOption82_subopt151Format (Enum)  : Subopt-151 format
        dhcpRelay_dhcpOption82_subopt2Format (Enum)  : Subopt-2 format
        dhcpRelay_dhcpOption82_subopt1Format (Enum)  : Subopt-1 format
        dhcpRelay_dhcpOption82_subopt151AreaName (String)  : Subopt-151 Area Name value
        dhcpRelay_relayBothEnabled (Boolean)  : Send DHCP requests to both servers simultaneously.
        dhcpRelay_dhcpServer2 (String)  : DHCP Server 2
        dhcpRelay_dhcpServer1 (String)  : DHCP Server 1
        dhcpRelay_dhcpRelayEnabled (Boolean)  : Enable DHCP Relay
        apnRealms_defaultAPN (String)  : name of the apnForwardingPolicys.
        apnRealms_realm (String)  : name of the apnRealm.
        id (String)  : Profile Id
        
        Robot Format :
        Profiles Create Ttgpdg    name    commonSetting_apnOIInUse    commonSetting_pdgUeIdleTimeout    commonSetting_acctRetry    commonSetting_acctRetryTimeout    commonSetting_apnFormat2GGSN    apnForwardingRealms_apnType    apnForwardingRealms_apn    apnForwardingRealms_routeType    defaultNoMatchingAPN    defaultNoRealmAPN
        '''
        
        data={"domainId" : domainId,"description" : description,"defaultNoMatchingAPN" : defaultNoMatchingAPN,"apnForwardingRealms":[{"apnType" : apnForwardingRealms_apnType,"apn" : apnForwardingRealms_apn,"routeType" : apnForwardingRealms_routeType}],"defaultNoRealmAPN" : defaultNoRealmAPN,"dhcpRelay":{"dhcpOption82":{"subopt151Enabled" : dhcpRelay_dhcpOption82_subopt151Enabled,"dhcpOption82Enabled" : dhcpRelay_dhcpOption82_dhcpOption82Enabled,"subopt2Enabled" : dhcpRelay_dhcpOption82_subopt2Enabled,"subopt1Enabled" : dhcpRelay_dhcpOption82_subopt1Enabled,"subopt150Enabled" : dhcpRelay_dhcpOption82_subopt150Enabled,"subopt151Format" : dhcpRelay_dhcpOption82_subopt151Format,"subopt2Format" : dhcpRelay_dhcpOption82_subopt2Format,"subopt1Format" : dhcpRelay_dhcpOption82_subopt1Format,"subopt151AreaName" : dhcpRelay_dhcpOption82_subopt151AreaName},"relayBothEnabled" : dhcpRelay_relayBothEnabled,"dhcpServer2" : dhcpRelay_dhcpServer2,"dhcpServer1" : dhcpRelay_dhcpServer1,"dhcpRelayEnabled" : dhcpRelay_dhcpRelayEnabled},"commonSetting":{"apnOIInUse" : commonSetting_apnOIInUse,"pdgUeIdleTimeout" : commonSetting_pdgUeIdleTimeout,"acctRetry" : commonSetting_acctRetry,"acctRetryTimeout" : commonSetting_acctRetryTimeout,"apnFormat2GGSN" : commonSetting_apnFormat2GGSN},"apnRealms":[{"defaultAPN" : apnRealms_defaultAPN,"realm" : apnRealms_realm}],"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/ttgpdg',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_mixed_mode(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Mixed Mode    url_id
        '''
        
        response = self.session.get('/profiles/mixedmode/{id}'.format(id=url_id))
        return response
        

    def profiles_get_hs20_operators_v5(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get Hs20 Operators V5    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/hs20/operators/query',jdata)
        return response
        

    def profiles_delete_l2o_gre(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete L2O Gre    url_id
        '''
        
        response = self.session.delete('/profiles/l2ogre/{id}'.format(id=url_id))
        

    def profiles_create_ruckus_gre_tunnel(self, name, tunnelMtuAutoEnabled, domainId=None, description=None, enableTunnelEncryption=None, tunnelMode=None, tunnelMtuSize=None, id=None):
        '''
        Mandatory Params :
        name (String)  : name of the RuckusGRE profile
        tunnelMtuAutoEnabled (Enum)  : WAN Interface MTU of the RuckusGRE profile
        
        Optional Params  :
        domainId (String)  : Domain id of the RuckusGRE profile
        description (String)  : description of the RuckusGRE profile
        enableTunnelEncryption (Boolean)  : Tunnel Encryption of the RuckusGRE profile
        tunnelMode (Enum)  : Ruckus Tunnel Mode of RuckusGRE profile
        tunnelMtuSize (Integer)  : Tunnel MTU size of RuckusGRE profile
        id (String)  : Profile Id
        
        Robot Format :
        Profiles Create Ruckus Gre Tunnel    name    tunnelMtuAutoEnabled
        '''
        
        data={"domainId" : domainId,"description" : description,"enableTunnelEncryption" : enableTunnelEncryption,"tunnelMode" : tunnelMode,"tunnelMtuSize" : tunnelMtuSize,"tunnelMtuAutoEnabled" : tunnelMtuAutoEnabled,"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/tunnel/ruckusgre',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_patch_l3_roaming_basic_config(self, dataPlanes_name=None, dataPlanes_key=None, criteriaType=None, dataPlanes_firmwareVersion=None, dataPlanes_value=None, dataPlanes_activated=None, featureEnabled=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        dataPlanes_firmwareVersion (String)  : DP firmware version
        dataPlanes_activated (Integer)  : Show if this DP is included in the L3 roaming feature or not, 0 means excluded and 1 means included
        dataPlanes_value (String)  : A list of L3 roaming configuration for this DP
        dataPlanes_key (String)  : Data plane key
        dataPlanes_name (String)  : DP name
        criteriaType (Enum)  : The L3 roaming configuration type.
        featureEnabled (Integer)  : Show if L3 roaming feature is enabled or not
        
        Robot Format :
        Profiles Patch L3 Roaming Basic Config    
        '''
        
        data={"dataPlanes":[{"firmwareVersion" : dataPlanes_firmwareVersion,"activated" : dataPlanes_activated,"value" : dataPlanes_value,"key" : dataPlanes_key,"name" : dataPlanes_name}],"criteriaType" : criteriaType,"featureEnabled" : featureEnabled}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/tunnel/l3Roaming',jdata)
        

    def profiles_create_soft_gre_tunnel(self, tunnelMtuAutoEnabled, keepAliveRetry, name, primaryGateway, keepAlivePeriod, domainId=None, description=None, ipMode=None, secondaryGateway=None, tunnelMtuSize=None, id=None):
        '''
        Mandatory Params :
        name (String)  : name of the SoftGRE profile
        primaryGateway (String)  : Primary gateway address of the SoftGRE profile
        tunnelMtuAutoEnabled (Enum)  : WAN Interface MTU of the SoftGRE profile
        keepAlivePeriod (Integer)  : ICMP Keep-Alive Period(secs)
        keepAliveRetry (Integer)  : ICMP Keep-Alive Retry
        
        Optional Params  :
        domainId (String)  : Domain id of the SoftGRE profile
        description (String)  : description of the SoftGRE profile
        ipMode (Enum)  : Gateway IP Mode of SoftGRE profile
        secondaryGateway (String)  : Secondary gateway address of the SoftGRE profile
        tunnelMtuSize (Integer)  : Tunnel MTU size of SoftGRE profile. IPV4:850-1500, IPV6:1384-1500. Default 1500.
        id (String)  : Profile Id
        
        Robot Format :
        Profiles Create Soft Gre Tunnel    name    primaryGateway    tunnelMtuAutoEnabled    keepAlivePeriod    keepAliveRetry
        '''
        
        data={"domainId" : domainId,"description" : description,"ipMode" : ipMode,"keepAliveRetry" : keepAliveRetry,"secondaryGateway" : secondaryGateway,"primaryGateway" : primaryGateway,"tunnelMtuAutoEnabled" : tunnelMtuAutoEnabled,"keepAlivePeriod" : keepAlivePeriod,"tunnelMtuSize" : tunnelMtuSize,"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/tunnel/softgre',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_ruckus_gre_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Ruckus Gre List    
        '''
        
        response = self.session.get('/profiles/tunnel/ruckusgre')
        return response
        

    def profiles_create_mixed_mode(self, apnForwardingPolicys_forwardingServiceProfile_id, name, apnForwardingPolicys_apnType, defaultNoMatchingAPN, defaultNoRealmAPN, apnForwardingPolicys_apn, apnForwardingPolicys_forwardRouteType, apnForwardingPolicys_forwardingServiceProfile_name, apnRealms_realm=None, domainId=None, apnRealms_defaultAPN=None, description=None, id=None):
        '''
        Mandatory Params :
        name (String)  : Name of Mixed Mode profile
        apnForwardingPolicys_apnType (Enum)  : type of the forwarding policy APN.
        apnForwardingPolicys_forwardingServiceProfile_id : ""
        apnForwardingPolicys_forwardingServiceProfile_name : ""
        apnForwardingPolicys_forwardRouteType (Enum)  : routeType of the forwarding policy APN.
        apnForwardingPolicys_apn (String)  : the forwarding policy APN, if apnType is NIOI, APN Example : internet-v4.mnc111.mcc222.gprs
        defaultNoMatchingAPN (String)  : Default APN of the No Matching Realm Found
        defaultNoRealmAPN (String)  : Default APN of the No Realm Specified
        
        Optional Params  :
        domainId (String)  : Domain Id
        description (String)  : Description of the Mixed Mode profile
        apnRealms_defaultAPN (String)  : name of the apnForwardingPolicys.
        apnRealms_realm (String)  : name of the apnRealm.
        id (String)  : Profile Id
        
        Robot Format :
        Profiles Create Mixed Mode    name    apnForwardingPolicys_apnType    apnForwardingPolicys_forwardingServiceProfile_id    apnForwardingPolicys_forwardingServiceProfile_name    apnForwardingPolicys_forwardRouteType    apnForwardingPolicys_apn    defaultNoMatchingAPN    defaultNoRealmAPN
        '''
        
        data={"domainId" : domainId,"description" : description,"defaultNoMatchingAPN" : defaultNoMatchingAPN,"defaultNoRealmAPN" : defaultNoRealmAPN,"apnRealms":[{"defaultAPN" : apnRealms_defaultAPN,"realm" : apnRealms_realm}],"apnForwardingPolicys":[{"apnType" : apnForwardingPolicys_apnType,"forwardingServiceProfile":{"id" : apnForwardingPolicys_forwardingServiceProfile_id,"name" : apnForwardingPolicys_forwardingServiceProfile_name},"forwardRouteType" : apnForwardingPolicys_forwardRouteType,"apn" : apnForwardingPolicys_apn}],"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/mixedmode',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_hotspot_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Hotspot Profiles    
        '''
        
        response = self.session.get('/profiles/hotspot')
        return response
        

    def profiles_modify_bridge(self, url_id, dhcpRelay_dhcpOption82_subopt1Format=None, domainId=None, dhcpRelay_dhcpServer1=None, dhcpRelay_dhcpServer2=None, dhcpRelay_dhcpOption82_dhcpOption82Enabled=None, dhcpRelay_relayBothEnabled=None, description=None, dhcpRelay_dhcpOption82_subopt151AreaName=None, name=None, dhcpRelay_dhcpOption82_subopt2Enabled=None, dhcpRelay_dhcpOption82_subopt150Enabled=None, dhcpRelay_dhcpOption82_subopt2Format=None, dhcpRelay_dhcpRelayEnabled=None, dhcpRelay_dhcpOption82_subopt151Enabled=None, id=None, dhcpRelay_dhcpOption82_subopt1Enabled=None, dhcpRelay_dhcpOption82_subopt151Format=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        id (String)  : Profile Id
        domainId (String)  : Domain Id
        dhcpRelay_dhcpOption82_subopt151Enabled (Boolean)  : Enable subopt-151
        dhcpRelay_dhcpOption82_dhcpOption82Enabled (Boolean)  : Enable DHCP Option 82
        dhcpRelay_dhcpOption82_subopt2Enabled (Boolean)  : Enable subopt-2
        dhcpRelay_dhcpOption82_subopt1Enabled (Boolean)  : Enable subopt-1
        dhcpRelay_dhcpOption82_subopt150Enabled (Boolean)  : Subopt-150 with VLAN
        dhcpRelay_dhcpOption82_subopt151Format (Enum)  : Subopt-151 format
        dhcpRelay_dhcpOption82_subopt2Format (Enum)  : Subopt-2 format
        dhcpRelay_dhcpOption82_subopt1Format (Enum)  : Subopt-1 format
        dhcpRelay_dhcpOption82_subopt151AreaName (String)  : Subopt-151 Area Name value
        dhcpRelay_relayBothEnabled (Boolean)  : Send DHCP requests to both servers simultaneously.
        dhcpRelay_dhcpServer2 (String)  : DHCP Server 2
        dhcpRelay_dhcpServer1 (String)  : DHCP Server 1
        dhcpRelay_dhcpRelayEnabled (Boolean)  : Enable DHCP Relay
        name (String)  : Name of Bridge profile
        description (String)  : Description of the Bridge profile
        
        Robot Format :
        Profiles Modify Bridge    url_id
        '''
        
        data={"id" : id,"domainId" : domainId,"dhcpRelay":{"dhcpOption82":{"subopt151Enabled" : dhcpRelay_dhcpOption82_subopt151Enabled,"dhcpOption82Enabled" : dhcpRelay_dhcpOption82_dhcpOption82Enabled,"subopt2Enabled" : dhcpRelay_dhcpOption82_subopt2Enabled,"subopt1Enabled" : dhcpRelay_dhcpOption82_subopt1Enabled,"subopt150Enabled" : dhcpRelay_dhcpOption82_subopt150Enabled,"subopt151Format" : dhcpRelay_dhcpOption82_subopt151Format,"subopt2Format" : dhcpRelay_dhcpOption82_subopt2Format,"subopt1Format" : dhcpRelay_dhcpOption82_subopt1Format,"subopt151AreaName" : dhcpRelay_dhcpOption82_subopt151AreaName},"relayBothEnabled" : dhcpRelay_relayBothEnabled,"dhcpServer2" : dhcpRelay_dhcpServer2,"dhcpServer1" : dhcpRelay_dhcpServer1,"dhcpRelayEnabled" : dhcpRelay_dhcpRelayEnabled},"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/bridge/{id}'.format(id=url_id),jdata)
        

    def profiles_delete_lbs_profiles(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Lbs Profiles    
        '''
        
        response = self.session.delete('/profiles/lbs')
        

    def profiles_create_hs20_operator(self, friendlyNames_name, friendlyNames_language, name, domainNames, domainId=None, description=None, modifiedDateTime=None, creatorUsername=None, certificate_id=None, modifierUsername=None, createDateTime=None, creatorId=None, certificate_name=None, id=None, modifierId=None):
        '''
        Mandatory Params :
        name (String)  : Name of the Hotspot 2.0 Wifi operator profile
        domainNames (String)  : Domain names
        friendlyNames_name (String)  : Name of the friendly name
        friendlyNames_language (Enum)  : Language of the friendly name
        
        Optional Params  :
        domainId (String)  : Domain Id
        certificate_id : ""
        certificate_name : ""
        creatorUsername (String)  : Creator Name
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        id (String)  : Identifier of the profile
        createDateTime (Integer)  : Timestamp of being created
        modifierId (String)  : Modifier ID
        description (String)  : Description of the Hotspot 2.0 Wifi operator profile
        
        Robot Format :
        Profiles Create Hs20 Operator    name    domainNames    friendlyNames_name    friendlyNames_language
        '''
        
        data={"friendlyNames":[{"name" : friendlyNames_name,"language" : friendlyNames_language}],"domainId" : domainId,"name" : name,"certificate":{"id" : certificate_id,"name" : certificate_name},"creatorUsername" : creatorUsername,"modifiedDateTime" : modifiedDateTime,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"id" : id,"domainNames":[ domainNames],"createDateTime" : createDateTime,"modifierId" : modifierId,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/hs20/operators',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_bridge_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Bridge List    
        '''
        
        response = self.session.get('/profiles/bridge')
        return response
        

    def profiles_update_ipsec_profile(self, url_id, preSharedKey=None, ipMode=None, cmProtocolOption_cmpServerPath=None, cmProtocolOption_cmpServerAddr=None, advancedOption_dhcpOpt43Subcode=None, espRekeyTime=None, id=None, advancedOption_failoverPrimaryCheckInterval=None, authType=None, espSecurityAssociation_espProposals_encAlg=None, advancedOption_replayWindow=None, advancedOption_keepAliveIntval=None, espSecurityAssociation_espProposals_authAlg=None, advancedOption_failoverMode=None, advancedOption_failoverRetryPeriod=None, espRekeyTimeUnit=None, cmProtocolOption_cmpDhcpOpt43SubcodeRecipient=None, advancedOption_ipcompEnable=None, description=None, ikeRekeyTimeUnit=None, advancedOption_dpdDelay=None, ikeSecurityAssociation_ikeProposals_encAlg=None, advancedOption_failoverRetryInterval=None, serverAddr=None, cmProtocolOption_cmpRecipient=None, espSecurityAssociation_espProposalType=None, espSecurityAssociation_espProposals_dhGroup=None, cmProtocolOption_cmpDhcpOpt43Subcode=None, domainId=None, name=None, ikeSecurityAssociation_ikeProposals_dhGroup=None, ikeSecurityAssociation_ikeProposals_authAlg=None, advancedOption_retryLimit=None, ikeSecurityAssociation_ikeProposals_prfAlg=None, advancedOption_enforceNatt=None, ikeRekeyTime=None, ikeSecurityAssociation_ikeProposalType=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        preSharedKey (String)  : authentication preShared Key of the ipsec profile
        authType (Enum)  : authentication type of the ipsec profile
        advancedOption_retryLimit (Integer)  : retryLimit of the ipsec profile 
        advancedOption_failoverMode (Enum)  :  mode of the failover
        advancedOption_keepAliveIntval (Integer)  : keepAliveIntval of the ipsec profile 
        advancedOption_failoverRetryInterval (Integer)  :  Retry Interval of the failover
        advancedOption_dpdDelay (Integer)  : dpdDelay of the ipsec profile 
        advancedOption_dhcpOpt43Subcode (Integer)  : dhcpOpt43Subcode of the ipsec profile 
        advancedOption_failoverRetryPeriod (Integer)  : Retry Period of the failover 
        advancedOption_replayWindow (Integer)  : replayWindow of the ipsec profile 
        advancedOption_enforceNatt (Enum)  : enforceNatt Enable of the ipsec profile
        advancedOption_ipcompEnable (Enum)  : ipcomp Enable of the ipsec profile
        advancedOption_failoverPrimaryCheckInterval (Integer)  :  Primary Check Interval of the failover
        description (String)  : description of the ipsec profile
        ikeRekeyTimeUnit (Enum)  : ikeRekey time unit of the ipsec profile 
        cmProtocolOption_cmpRecipient (String)  : Certificate Management Protocol Recipient
        cmProtocolOption_cmpDhcpOpt43Subcode (Integer)  : Certificate Management Protocol dhcpOpt43Subcode
        cmProtocolOption_cmpServerAddr (String)  : Certificate Management Protocol Server addr
        cmProtocolOption_cmpServerPath (String)  : Certificate Management Protocol Server Path
        cmProtocolOption_cmpDhcpOpt43SubcodeRecipient (Integer)  : Certificate Management Protocol dhcpOpt43SubcodeRecipient
        ipMode (Enum)  : ipMode of the ipsec profile 
        id (String)  : identifier of the ipsec profile
        domainId (String)  : Domain id of the IPSec profile
        serverAddr (String)  : server Addr of the ipsec profile
        ikeRekeyTime (Integer)  : ikeRekey Time of the ipsec profile 
        espSecurityAssociation_espProposalType (Enum)  : espProposal Type of the ipsec profile
        espSecurityAssociation_espProposals_dhGroup (Enum)  : dhGroup of espProposal Specific
        espSecurityAssociation_espProposals_authAlg (Enum)  : authAlg of espProposal Specific
        espSecurityAssociation_espProposals_encAlg (Enum)  : encAlg of espProposal Specific
        espRekeyTime (Integer)  : espRekey Time of the ipsec profile 
        espRekeyTimeUnit (Enum)  : espRekey time unit of the ipsec profile 
        ikeSecurityAssociation_ikeProposalType (Enum)  : ikeProposal Type of the ipsec profile
        ikeSecurityAssociation_ikeProposals_prfAlg (Enum)  : prfAlg of ikeProposal Specific
        ikeSecurityAssociation_ikeProposals_dhGroup (Enum)  : dhGroup of ikeProposal Specific
        ikeSecurityAssociation_ikeProposals_authAlg (Enum)  : authAlg of ikeProposal Specific
        ikeSecurityAssociation_ikeProposals_encAlg (Enum)  : encAlg of ikeProposal Specific
        name (String)  : name of the ipsec profile
        
        Robot Format :
        Profiles Update Ipsec Profile    url_id
        '''
        
        data={"preSharedKey" : preSharedKey,"authType" : authType,"advancedOption":{"retryLimit" : advancedOption_retryLimit,"failoverMode" : advancedOption_failoverMode,"keepAliveIntval" : advancedOption_keepAliveIntval,"failoverRetryInterval" : advancedOption_failoverRetryInterval,"dpdDelay" : advancedOption_dpdDelay,"dhcpOpt43Subcode" : advancedOption_dhcpOpt43Subcode,"failoverRetryPeriod" : advancedOption_failoverRetryPeriod,"replayWindow" : advancedOption_replayWindow,"enforceNatt" : advancedOption_enforceNatt,"ipcompEnable" : advancedOption_ipcompEnable,"failoverPrimaryCheckInterval" : advancedOption_failoverPrimaryCheckInterval},"description" : description,"ikeRekeyTimeUnit" : ikeRekeyTimeUnit,"cmProtocolOption":{"cmpRecipient" : cmProtocolOption_cmpRecipient,"cmpDhcpOpt43Subcode" : cmProtocolOption_cmpDhcpOpt43Subcode,"cmpServerAddr" : cmProtocolOption_cmpServerAddr,"cmpServerPath" : cmProtocolOption_cmpServerPath,"cmpDhcpOpt43SubcodeRecipient" : cmProtocolOption_cmpDhcpOpt43SubcodeRecipient},"ipMode" : ipMode,"id" : id,"domainId" : domainId,"serverAddr" : serverAddr,"ikeRekeyTime" : ikeRekeyTime,"espSecurityAssociation":{"espProposalType" : espSecurityAssociation_espProposalType,"espProposals":[{"dhGroup" : espSecurityAssociation_espProposals_dhGroup,"authAlg" : espSecurityAssociation_espProposals_authAlg,"encAlg" : espSecurityAssociation_espProposals_encAlg}]},"espRekeyTime" : espRekeyTime,"espRekeyTimeUnit" : espRekeyTimeUnit,"ikeSecurityAssociation":{"ikeProposalType" : ikeSecurityAssociation_ikeProposalType,"ikeProposals":[{"prfAlg" : ikeSecurityAssociation_ikeProposals_prfAlg,"dhGroup" : ikeSecurityAssociation_ikeProposals_dhGroup,"authAlg" : ikeSecurityAssociation_ikeProposals_authAlg,"encAlg" : ikeSecurityAssociation_ikeProposals_encAlg}]},"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/tunnel/ipsec/{id}'.format(id=url_id),jdata)
        

    def profiles_get_dns_server_profile_by_query_critaria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get Dns Server Profile By Query Critaria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/dnsserver/query',jdata)
        return response
        

    def profiles_get_dns_server_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Dns Server Profile    url_id
        '''
        
        response = self.session.get('/profiles/dnsserver/{id}'.format(id=url_id))
        return response
        

    def profiles_delete_ttgpd_gs(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Ttgpd Gs    
        '''
        
        response = self.session.delete('/profiles/ttgpdg')
        

    def profiles_create_bridge(self, name, dhcpRelay_dhcpOption82_subopt1Format=None, domainId=None, dhcpRelay_dhcpServer1=None, dhcpRelay_dhcpServer2=None, dhcpRelay_dhcpOption82_dhcpOption82Enabled=None, dhcpRelay_relayBothEnabled=None, description=None, dhcpRelay_dhcpOption82_subopt151AreaName=None, dhcpRelay_dhcpOption82_subopt2Enabled=None, dhcpRelay_dhcpOption82_subopt150Enabled=None, dhcpRelay_dhcpOption82_subopt2Format=None, dhcpRelay_dhcpRelayEnabled=None, dhcpRelay_dhcpOption82_subopt151Enabled=None, id=None, dhcpRelay_dhcpOption82_subopt1Enabled=None, dhcpRelay_dhcpOption82_subopt151Format=None):
        '''
        Mandatory Params :
        name (String)  : Name of Bridge profile
        
        Optional Params  :
        id (String)  : Profile Id
        domainId (String)  : Domain Id
        dhcpRelay_dhcpOption82_subopt151Enabled (Boolean)  : Enable subopt-151
        dhcpRelay_dhcpOption82_dhcpOption82Enabled (Boolean)  : Enable DHCP Option 82
        dhcpRelay_dhcpOption82_subopt2Enabled (Boolean)  : Enable subopt-2
        dhcpRelay_dhcpOption82_subopt1Enabled (Boolean)  : Enable subopt-1
        dhcpRelay_dhcpOption82_subopt150Enabled (Boolean)  : Subopt-150 with VLAN
        dhcpRelay_dhcpOption82_subopt151Format (Enum)  : Subopt-151 format
        dhcpRelay_dhcpOption82_subopt2Format (Enum)  : Subopt-2 format
        dhcpRelay_dhcpOption82_subopt1Format (Enum)  : Subopt-1 format
        dhcpRelay_dhcpOption82_subopt151AreaName (String)  : Subopt-151 Area Name value
        dhcpRelay_relayBothEnabled (Boolean)  : Send DHCP requests to both servers simultaneously.
        dhcpRelay_dhcpServer2 (String)  : DHCP Server 2
        dhcpRelay_dhcpServer1 (String)  : DHCP Server 1
        dhcpRelay_dhcpRelayEnabled (Boolean)  : Enable DHCP Relay
        description (String)  : Description of the Bridge profile
        
        Robot Format :
        Profiles Create Bridge    name
        '''
        
        data={"id" : id,"domainId" : domainId,"dhcpRelay":{"dhcpOption82":{"subopt151Enabled" : dhcpRelay_dhcpOption82_subopt151Enabled,"dhcpOption82Enabled" : dhcpRelay_dhcpOption82_dhcpOption82Enabled,"subopt2Enabled" : dhcpRelay_dhcpOption82_subopt2Enabled,"subopt1Enabled" : dhcpRelay_dhcpOption82_subopt1Enabled,"subopt150Enabled" : dhcpRelay_dhcpOption82_subopt150Enabled,"subopt151Format" : dhcpRelay_dhcpOption82_subopt151Format,"subopt2Format" : dhcpRelay_dhcpOption82_subopt2Format,"subopt1Format" : dhcpRelay_dhcpOption82_subopt1Format,"subopt151AreaName" : dhcpRelay_dhcpOption82_subopt151AreaName},"relayBothEnabled" : dhcpRelay_relayBothEnabled,"dhcpServer2" : dhcpRelay_dhcpServer2,"dhcpServer1" : dhcpRelay_dhcpServer1,"dhcpRelayEnabled" : dhcpRelay_dhcpRelayEnabled},"name" : name,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/bridge',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_create_online_signup_profile(self, domainId=None, description=None, portalCustomization_language=None, creatorUsername=None, portalCustomization_termsAndConditionsText=None, modifierUsername=None, portalCustomization_title=None, portalCustomization_logo=None, creatorId=None, portalCustomization_termsAndConditionsRequired=None, id=None, name=None, createDateTime=None, modifierId=None, modifiedDateTime=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        portalCustomization_logo (String)  : logo
        portalCustomization_termsAndConditionsRequired (Boolean)  : Terms and conditions is required or not
        portalCustomization_termsAndConditionsText (String)  : Terms and conditions text
        portalCustomization_language : ""
        portalCustomization_title (String)  : Title
        domainId (String)  : Domain Id
        description (String)  : Description of the online singup profile
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        createDateTime (Integer)  : Timestamp of being created
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        id (String)  : Identifier of the online singup profile
        modifierId (String)  : Modifier ID
        name (String)  : Name of the online singup profile
        
        Robot Format :
        Profiles Create Online Signup Profile    
        '''
        
        data={"portalCustomization":{"logo" : portalCustomization_logo,"termsAndConditionsRequired" : portalCustomization_termsAndConditionsRequired,"termsAndConditionsText" : portalCustomization_termsAndConditionsText,"language" : portalCustomization_language,"title" : portalCustomization_title},"domainId" : domainId,"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"createDateTime" : createDateTime,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"id" : id,"modifierId" : modifierId,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/osu',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_delete_accounting_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Accounting Profile    url_id
        '''
        
        response = self.session.delete('/profiles/acct/{id}'.format(id=url_id))
        

    def profiles_get_l3_roaming_config(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get L3 Roaming Config    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/tunnel/l3Roaming/query',jdata)
        return response
        

    def profiles_update_hs20_provider(self, url_id, osu_externalOSU_subscriptionDescriptions_description=None, osu_externalOSU_osuServiceUrl=None, osu_externalOSU_osuNaiRealm=None, authentications_name=None, realms_eapMethods_type=None, osu_internalOSU_osuPortal_externalUrl=None, authentications_id=None, authentications_serviceType=None, osu_internalOSU_whitelistedDomains=None, realms_encoding=None, osu_externalOSU_subscriptionDescriptions_icon=None, realms_eapMethods_authSettings_vendorType=None, osu_internalOSU_osuAuthServices_name=None, osu_internalOSU_provisioningFormat=None, osu_internalOSU_provisioningProtocals=None, osu_internalOSU_osuAuthServices_credentialType=None, osu_internalOSU_osuAuthServices_id=None, description=None, osu_internalOSU_subscriptionDescriptions_name=None, accountings_serviceType=None, modifiedDateTime=None, creatorUsername=None, accountings_name=None, osu_type=None, id=None, realms_name=None, modifierId=None, osu_internalOSU_certificate_id=None, osu_externalOSU_subscriptionDescriptions_language=None, realms_eapMethods_authSettings_info=None, osu_internalOSU_subscriptionDescriptions_icon=None, plmns_mcc=None, homeOis_oi=None, authentications_realm=None, osu_internalOSU_subscriptionDescriptions_language=None, creatorId=None, osu_internalOSU_provisioningUpdateType=None, osu_externalOSU_subscriptionDescriptions_name=None, realms_eapMethods_authSettings_vendorId=None, osu_internalOSU_osuAuthServices_realm=None, accountings_realm=None, accountings_id=None, osu_internalOSU_osuPortal_internalOSUPortal_id=None, osu_externalOSU_whitelistedDomains=None, osu_internalOSU_osuPortal_internalOSUPortal_name=None, osu_internalOSU_commonLanguageIcon=None, name=None, osu_internalOSU_osuAuthServices_expiration=None, domainId=None, osu_externalOSU_provisioningProtocals=None, createDateTime=None, osu_externalOSU_commonLanguageIcon=None, osu_internalOSU_subscriptionDescriptions_description=None, plmns_mnc=None, realms_eapMethods_authSettings_type=None, homeOis_name=None, modifierUsername=None, authentications_vlanId=None, osu_internalOSU_certificate_name=None, osu_internalOSU_osuPortal_type=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        accountings_serviceType (Enum)  : Accounting service type
        accountings_realm : ""
        accountings_realm : ""
        accountings_id (String)  : Accounting id
        accountings_name (String)  : Accounting name
        domainId (String)  : Domain Id
        realms_eapMethods_type (Enum)  : EAP method type
        realms_eapMethods_authSettings_info (Enum)  : EAP auth info
        realms_eapMethods_authSettings_vendorId (Integer)  : EAP auth vendor ID
        realms_eapMethods_authSettings_type (String)  : EAP auth type
        realms_eapMethods_authSettings_vendorType (Integer)  : EAP auth vendor type
        realms_name (String)  : Name of realm
        realms_encoding (Enum)  : Encoding
        description (String)  : Description of the Hotspot 2.0 identity provider profile
        modifiedDateTime (Integer)  : Timestamp of being modified
        creatorUsername (String)  : Creator Name
        authentications_serviceType (Enum)  : Authentication service type
        authentications_realm (String)  : Authentication realm
        authentications_id (String)  : Authentication id
        authentications_vlanId (Integer)  : Dynamic vlan ID
        authentications_name (String)  : Authentication name
        homeOis_name (String)  : Name of the home OI
        homeOis_oi (String)  : Orgnization ID(3Hex or 5Hex)
        osu_type (Enum)  : Online singup type
        osu_internalOSU_provisioningUpdateType (Enum)  : Provisioning update at
        osu_internalOSU_certificate_id : ""
        osu_internalOSU_certificate_name : ""
        osu_internalOSU_commonLanguageIcon (String)  : The base64 encoded data of icon.
        osu_internalOSU_provisioningProtocals (Enum)  : Provisioning protocal
        osu_internalOSU_whitelistedDomains (String)  : whitelisted domains
        osu_internalOSU_provisioningFormat (Enum)  : Provisioning format
        osu_internalOSU_osuPortal_internalOSUPortal_id : ""
        osu_internalOSU_osuPortal_internalOSUPortal_name : ""
        osu_internalOSU_osuPortal_externalUrl (String)  : External online singup portal, start with https://, required when type is External
        osu_internalOSU_osuPortal_type (Enum)  : Portal type
        osu_internalOSU_subscriptionDescriptions_icon (String)  : The binary data of icon, maximum size 65536
        osu_internalOSU_subscriptionDescriptions_description (String)  : Description of the friendly name
        osu_internalOSU_subscriptionDescriptions_language (Enum)  : Language of the friendly name
        osu_internalOSU_subscriptionDescriptions_name (String)  : Name of the friendly name
        osu_internalOSU_osuAuthServices_id (String)  : Identifier of authentication service
        osu_internalOSU_osuAuthServices_realm (String)  : Authentication realm
        osu_internalOSU_osuAuthServices_expiration (Integer)  : Expiration hour. null mean never expire
        osu_internalOSU_osuAuthServices_name (String)  : Authentication service name
        osu_internalOSU_osuAuthServices_credentialType (Enum)  : Authentication credential type
        osu_externalOSU_commonLanguageIcon (String)  : The base64 encoded data of icon.
        osu_externalOSU_provisioningProtocals (Enum)  : Provisioning protocal
        osu_externalOSU_osuServiceUrl (String)  : External service URL, start with https://
        osu_externalOSU_whitelistedDomains (String)  : Whitelisted domains
        osu_externalOSU_subscriptionDescriptions_icon (String)  : The binary data of icon, maximum size 65536
        osu_externalOSU_subscriptionDescriptions_description (String)  : Description of the friendly name
        osu_externalOSU_subscriptionDescriptions_language (Enum)  : Language of the friendly name
        osu_externalOSU_subscriptionDescriptions_name (String)  : Name of the friendly name
        osu_externalOSU_osuNaiRealm (String)  : Online signup NAI realm, it should be one of realm as defined in Hotspot 2.0 identity provider
        id (String)  : Identifier of the Hotspot 2.0 identity provider profile
        creatorId (String)  : Creator ID
        modifierUsername (String)  : Modifier Name
        plmns_mnc (String)  : MNC
        plmns_mcc (String)  : MCC
        createDateTime (Integer)  : Timestamp of being created
        modifierId (String)  : Modifier ID
        name (String)  : Name of the Hotspot 2.0 identity provider profile
        
        Robot Format :
        Profiles Update Hs20 Provider    url_id
        '''
        
        data={"accountings":[{"serviceType" : accountings_serviceType,"realm" : accountings_realm,"realm" : accountings_realm,"id" : accountings_id,"name" : accountings_name}],"domainId" : domainId,"realms":[{"eapMethods":[{"type" : realms_eapMethods_type,"authSettings":[{"info" : realms_eapMethods_authSettings_info,"vendorId" : realms_eapMethods_authSettings_vendorId,"type" : realms_eapMethods_authSettings_type,"vendorType" : realms_eapMethods_authSettings_vendorType}]}],"name" : realms_name,"encoding" : realms_encoding}],"description" : description,"modifiedDateTime" : modifiedDateTime,"creatorUsername" : creatorUsername,"authentications":[{"serviceType" : authentications_serviceType,"realm" : authentications_realm,"id" : authentications_id,"vlanId" : authentications_vlanId,"name" : authentications_name}],"homeOis":[{"name" : homeOis_name,"oi" : homeOis_oi}],"osu":{"type" : osu_type,"internalOSU":{"provisioningUpdateType" : osu_internalOSU_provisioningUpdateType,"certificate":{"id" : osu_internalOSU_certificate_id,"name" : osu_internalOSU_certificate_name},"commonLanguageIcon" : osu_internalOSU_commonLanguageIcon,"provisioningProtocals":[ osu_internalOSU_provisioningProtocals],"whitelistedDomains":[ osu_internalOSU_whitelistedDomains],"provisioningFormat" : osu_internalOSU_provisioningFormat,"osuPortal":{"internalOSUPortal":{"id" : osu_internalOSU_osuPortal_internalOSUPortal_id,"name" : osu_internalOSU_osuPortal_internalOSUPortal_name},"externalUrl" : osu_internalOSU_osuPortal_externalUrl,"type" : osu_internalOSU_osuPortal_type},"subscriptionDescriptions":[{"icon" : osu_internalOSU_subscriptionDescriptions_icon,"description" : osu_internalOSU_subscriptionDescriptions_description,"language" : osu_internalOSU_subscriptionDescriptions_language,"name" : osu_internalOSU_subscriptionDescriptions_name}],"osuAuthServices":[{"id" : osu_internalOSU_osuAuthServices_id,"realm" : osu_internalOSU_osuAuthServices_realm,"expiration" : osu_internalOSU_osuAuthServices_expiration,"name" : osu_internalOSU_osuAuthServices_name,"credentialType" : osu_internalOSU_osuAuthServices_credentialType}]},"externalOSU":{"commonLanguageIcon" : osu_externalOSU_commonLanguageIcon,"provisioningProtocals":[ osu_externalOSU_provisioningProtocals],"osuServiceUrl" : osu_externalOSU_osuServiceUrl,"whitelistedDomains":[ osu_externalOSU_whitelistedDomains],"subscriptionDescriptions":[{"icon" : osu_externalOSU_subscriptionDescriptions_icon,"description" : osu_externalOSU_subscriptionDescriptions_description,"language" : osu_externalOSU_subscriptionDescriptions_language,"name" : osu_externalOSU_subscriptionDescriptions_name}],"osuNaiRealm" : osu_externalOSU_osuNaiRealm}},"id" : id,"creatorId" : creatorId,"modifierUsername" : modifierUsername,"plmns":[{"mnc" : plmns_mnc,"mcc" : plmns_mcc}],"createDateTime" : createDateTime,"modifierId" : modifierId,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/hs20/identityproviders/{id}'.format(id=url_id),jdata)
        

    def profiles_modify_ruckus_gre_tunnel(self, url_id, domainId=None, description=None, enableTunnelEncryption=None, tunnelMode=None, tunnelMtuSize=None, tunnelMtuAutoEnabled=None, id=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain id of the RuckusGRE profile
        description (String)  : description of the RuckusGRE profile
        enableTunnelEncryption (Boolean)  : Tunnel Encryption of the RuckusGRE profile
        tunnelMode (Enum)  : Ruckus Tunnel Mode of RuckusGRE profile
        tunnelMtuSize (Integer)  : Tunnel MTU size of RuckusGRE profile
        tunnelMtuAutoEnabled (Enum)  : WAN Interface MTU of the RuckusGRE profile
        id (String)  : Profile Id
        name (String)  : name of the RuckusGRE profile
        
        Robot Format :
        Profiles Modify Ruckus Gre Tunnel    url_id
        '''
        
        data={"domainId" : domainId,"description" : description,"enableTunnelEncryption" : enableTunnelEncryption,"tunnelMode" : tunnelMode,"tunnelMtuSize" : tunnelMtuSize,"tunnelMtuAutoEnabled" : tunnelMtuAutoEnabled,"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/tunnel/ruckusgre/{id}'.format(id=url_id),jdata)
        

    def profiles_delete_soft_gre_tunnel(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Soft Gre Tunnel    url_id
        '''
        
        response = self.session.delete('/profiles/tunnel/softgre/{id}'.format(id=url_id))
        

    def profiles_delete_zone_affinity_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Zone Affinity Profile    url_id
        '''
        
        response = self.session.delete('/profiles/zoneAffinity/{id}'.format(id=url_id))
        

    def profiles_get_hs20_operators(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Hs20 Operators    
        '''
        
        response = self.session.get('/profiles/hs20/operators')
        return response
        

    def profiles_delete_dns_server_profile_list(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Dns Server Profile List    
        '''
        
        response = self.session.delete('/profiles/dnsserver')
        

    def profiles_get_authentication_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Authentication Profile    url_id
        '''
        
        response = self.session.get('/profiles/auth/{id}'.format(id=url_id))
        return response
        

    def profiles_update_hs20_operator(self, url_id, domainId=None, description=None, certificate_id=None, friendlyNames_language=None, name=None, friendlyNames_name=None, certificate_name=None, id=None, domainNames=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        friendlyNames_name (String)  : Name of the friendly name
        friendlyNames_language (Enum)  : Language of the friendly name
        domainId (String)  : Domain Id
        description (String)  : Description of the Hotspot 2.0 Wifi operator profile
        certificate_id : ""
        certificate_name : ""
        domainNames (String)  : Domain names
        id (String)  : Identifier of the profile
        name (String)  : Name of the Hotspot 2.0 Wifi operator profile
        
        Robot Format :
        Profiles Update Hs20 Operator    url_id
        '''
        
        data={"friendlyNames":[{"name" : friendlyNames_name,"language" : friendlyNames_language}],"domainId" : domainId,"description" : description,"certificate":{"id" : certificate_id,"name" : certificate_name},"domainNames":[ domainNames],"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/hs20/operators/{id}'.format(id=url_id),jdata)
        

    def profiles_get_auth_services_by_type(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Auth Services By Type    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/auth/authServiceList/query',jdata)
        return response
        

    def profiles_create_dns_server_profile(self, primaryIp, name, tertiaryIp=None, mvnoId=None, secondaryIp=None, domainId=None, description=None):
        '''
        Mandatory Params :
        name (String)  : Name of the dns server service
        primaryIp (String)  : Primary ip of DNS server service
        
        Optional Params  :
        mvnoId (String)  : Tenant UUID
        domainId (String)  : Domain UUID
        secondaryIp (String)  : Secondary ip of DNS server service
        tertiaryIp (String)  : Tertiary ip of DNS server service
        description (String)  : Description of the dns server service
        
        Robot Format :
        Profiles Create Dns Server Profile    name    primaryIp
        '''
        
        data={"mvnoId" : mvnoId,"domainId" : domainId,"name" : name,"secondaryIp" : secondaryIp,"tertiaryIp" : tertiaryIp,"primaryIp" : primaryIp,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/dnsserver',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_hs20_operator(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Hs20 Operator    url_id
        '''
        
        response = self.session.get('/profiles/hs20/operators/{id}'.format(id=url_id))
        return response
        

    def profiles_delete_ghs20_provider(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Ghs20 Provider    url_id
        '''
        
        response = self.session.delete('/profiles/hs20/identityproviders/{id}'.format(id=url_id))
        

    def profiles_create_hotspot_profile_internal(self, smartClientSupport, macAddressFormat, name, location_name=None, description=None, walledGardens=None, userSession_gracePeriodInMin=None, redirect_url=None, location_id=None, userSession_timeoutInMin=None):
        '''
        Mandatory Params :
        name (String)  : Name of the Hotspot
        smartClientSupport (Enum)  : Smart client support of the Hotspot
        macAddressFormat (Integer)  : mac address format of redirection
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        walledGardens (String)  : Walled garden map set of the Hotspot
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        location_id (String)  : Portal location id
        location_name (String)  : Portal location name
        description (String)  : Description of the Hotspot
        
        Robot Format :
        Profiles Create Hotspot Profile Internal    name    smartClientSupport    macAddressFormat
        '''
        
        data={"redirect":{"url" : redirect_url},"name" : name,"walledGardens":[ walledGardens],"smartClientSupport" : smartClientSupport,"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"location":{"id" : location_id,"name" : location_name},"macAddressFormat" : macAddressFormat,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/hotspot/internal',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_ipsec_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Ipsec Profiles    
        '''
        
        response = self.session.get('/profiles/tunnel/ipsec')
        return response
        

    def profiles_delete_mixed_modes(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Mixed Modes    
        '''
        
        response = self.session.delete('/profiles/mixedmode')
        

    def profiles_disable_user_traffic_profile_attributes_uplink_rate_limiting(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Disable User Traffic Profile Attributes Uplink Rate Limiting    url_id
        '''
        
        response = self.session.delete('/profiles/utp/{id}/uplinkRateLimiting'.format(id=url_id))
        

    def profiles_delete_bridge(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Bridge    url_id
        '''
        
        response = self.session.delete('/profiles/bridge/{id}'.format(id=url_id))
        

    def profiles_modify_soft_gre_tunnel(self, url_id, domainId=None, description=None, keepAliveRetry=None, secondaryGateway=None, primaryGateway=None, tunnelMtuAutoEnabled=None, keepAlivePeriod=None, tunnelMtuSize=None, id=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        domainId (String)  : Domain id of the SoftGRE profile
        description (String)  : description of the SoftGRE profile
        primaryGateway (String)  : Primary gateway address of the SoftGRE profile
        keepAlivePeriod (Integer)  : ICMP Keep-Alive Period(secs)
        secondaryGateway (String)  : Secondary gateway address of the SoftGRE profile
        keepAliveRetry (Integer)  : ICMP Keep-Alive Retry
        tunnelMtuAutoEnabled (Enum)  : WAN Interface MTU of the SoftGRE profile
        tunnelMtuSize (Integer)  : Tunnel MTU size of SoftGRE profile. IPV4:850-1500, IPV6:1384-1500. Default 1500.
        id (String)  : Profile Id
        name (String)  : name of the SoftGRE profile
        
        Robot Format :
        Profiles Modify Soft Gre Tunnel    url_id
        '''
        
        data={"domainId" : domainId,"description" : description,"primaryGateway" : primaryGateway,"keepAlivePeriod" : keepAlivePeriod,"secondaryGateway" : secondaryGateway,"keepAliveRetry" : keepAliveRetry,"tunnelMtuAutoEnabled" : tunnelMtuAutoEnabled,"tunnelMtuSize" : tunnelMtuSize,"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/tunnel/softgre/{id}'.format(id=url_id),jdata)
        

    def profiles_create_hotspot_profile_external(self, smartClientSupport, macAddressFormat, portalUrl, name, location_name=None, description=None, walledGardens=None, userSession_gracePeriodInMin=None, redirect_url=None, location_id=None, userSession_timeoutInMin=None):
        '''
        Mandatory Params :
        name (String)  : Name of the Hotspot
        smartClientSupport (Enum)  : Smart client support of the Hotspot
        portalUrl (String)  : Portal URL of the Hotspot
        macAddressFormat (Integer)  : mac address format of redirection
        
        Optional Params  :
        redirect_url (String)  : Portal redirect URL
        walledGardens (String)  : Walled garden map set of the Hotspot
        location_id (String)  : Portal location id
        location_name (String)  : Portal location name
        userSession_timeoutInMin (Integer)  : Time out value in minutes
        userSession_gracePeriodInMin (Integer)  : Grace period in minutes
        description (String)  : Description of the Hotspot
        
        Robot Format :
        Profiles Create Hotspot Profile External    name    smartClientSupport    portalUrl    macAddressFormat
        '''
        
        data={"redirect":{"url" : redirect_url},"name" : name,"walledGardens":[ walledGardens],"smartClientSupport" : smartClientSupport,"portalUrl" : portalUrl,"location":{"id" : location_id,"name" : location_name},"userSession":{"timeoutInMin" : userSession_timeoutInMin,"gracePeriodInMin" : userSession_gracePeriodInMin},"macAddressFormat" : macAddressFormat,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/hotspot/external',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_accounting_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Accounting Profile    url_id
        '''
        
        response = self.session.get('/profiles/acct/{id}'.format(id=url_id))
        return response
        

    def profiles_get_accounting_profiles_by_query_critaria(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get Accounting Profiles By Query Critaria    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/acct/query',jdata)
        return response
        

    def profiles_get_lbs_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Lbs Profile    url_id
        '''
        
        response = self.session.get('/profiles/lbs/{id}'.format(id=url_id))
        return response
        

    def profiles_delete_ipsec_profiles(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Ipsec Profiles    
        '''
        
        response = self.session.delete('/profiles/tunnel/ipsec')
        

    def profiles_update_authentication_profile(self, url_id, mvnoId=None, domainId=None, realmMappings_name=None, name=None, realmMappings_serviceType=None, description=None, ttgCommonSetting_sessionIdleTimeout=None, h20SuppportEnabled=None, realmMappings_hostedAaaEnabled=None, realmMappings_realm=None, ttgCommonSetting_mobileCountryCode=None, ttgCommonSetting_sessionTimeout=None, gppSuppportEnabled=None, realmMappings_id=None, ttgCommonSetting_mobileNetworkCode=None, aaaSuppportEnabled=None, ttgCommonSetting_interimAcctInterval=None, realmMappings_authorizationMethod=None, id=None, realmMappings_dynamicVlanId=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        mvnoId (String)  : Tenant UUID
        domainId (String)  : Domain UUID
        name (String)  : Name of the authentication profile
        ttgCommonSetting_mobileNetworkCode (String)  : Mobile network code
        ttgCommonSetting_sessionIdleTimeout (Integer)  : Session idle timeout (unit: seconds)
        ttgCommonSetting_sessionTimeout (Integer)  : Session timeout (unit: seconds)
        ttgCommonSetting_interimAcctInterval (Integer)  : Interim accounting interval (value should be 0 or 600~65536, unit: seconds)
        ttgCommonSetting_mobileCountryCode (String)  : Mobile country code
        gppSuppportEnabled (Boolean)  : 3GPP support enabled or disabled
        h20SuppportEnabled (Boolean)  : Hotspot 2.0 support enabled or disabled
        realmMappings_serviceType (Enum)  : Authentication service type, NA is NA-Request Rejected
        realmMappings_realm (String)  : Realm
        realmMappings_name (String)  : Authentication service name
        realmMappings_authorizationMethod (Enum)  : Authorization method
        realmMappings_hostedAaaEnabled : ""
        realmMappings_dynamicVlanId (Integer)  : Dynamic VLAN ID
        realmMappings_id (String)  : Authentication service UUID
        aaaSuppportEnabled (Boolean)  : Hosted AAA support enabled or disabled
        id (String)  : ID of Accounting Profile
        description (String)  : Description of the authentication profile
        
        Robot Format :
        Profiles Update Authentication Profile    url_id
        '''
        
        data={"mvnoId" : mvnoId,"domainId" : domainId,"name" : name,"ttgCommonSetting":{"mobileNetworkCode" : ttgCommonSetting_mobileNetworkCode,"sessionIdleTimeout" : ttgCommonSetting_sessionIdleTimeout,"sessionTimeout" : ttgCommonSetting_sessionTimeout,"interimAcctInterval" : ttgCommonSetting_interimAcctInterval,"mobileCountryCode" : ttgCommonSetting_mobileCountryCode},"gppSuppportEnabled" : gppSuppportEnabled,"h20SuppportEnabled" : h20SuppportEnabled,"realmMappings":[{"serviceType" : realmMappings_serviceType,"realm" : realmMappings_realm,"name" : realmMappings_name,"authorizationMethod" : realmMappings_authorizationMethod,"hostedAaaEnabled" : realmMappings_hostedAaaEnabled,"dynamicVlanId" : realmMappings_dynamicVlanId,"id" : realmMappings_id}],"aaaSuppportEnabled" : aaaSuppportEnabled,"id" : id,"description" : description}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/auth/{id}'.format(id=url_id),jdata)
        

    def profiles_update_accounting_profile(self, url_id, mvnoId=None, domainId=None, realmMappings_name=None, description=None, realmMappings_serviceType=None, realmMappings_realm=None, realmMappings_id=None, id=None, name=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        mvnoId (String)  : Tenant UUID
        domainId (String)  : Domain UUID
        description (String)  : Description of the accounting profile
        realmMappings_serviceType (Enum)  : Accounting service type, NA is NA-Request Rejected
        realmMappings_realm (String)  : Realm
        realmMappings_id (String)  : Accounting service UUID
        realmMappings_name (String)  : Accounting service name
        id (String)  : ID of Accounting Profile
        name (String)  : Name of the accounting profile
        
        Robot Format :
        Profiles Update Accounting Profile    url_id
        '''
        
        data={"mvnoId" : mvnoId,"domainId" : domainId,"description" : description,"realmMappings":[{"serviceType" : realmMappings_serviceType,"realm" : realmMappings_realm,"id" : realmMappings_id,"name" : realmMappings_name}],"id" : id,"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/acct/{id}'.format(id=url_id),jdata)
        

    def profiles_delete_ruckus_gre_tunnel(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Ruckus Gre Tunnel    url_id
        '''
        
        response = self.session.delete('/profiles/tunnel/ruckusgre/{id}'.format(id=url_id))
        

    def profiles_get_authorization_methods_by_type(self, url_type):
        '''
        Mandatory Params :
        url_type : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Authorization Methods By Type    url_type
        '''
        
        response = self.session.get('/profiles/auth/authorizationList?type={type}'.format(type=url_type))
        return response
        

    def profiles_delete_accounting_profile_list(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Accounting Profile List    
        '''
        
        response = self.session.delete('/profiles/acct')
        

    def profiles_get_l2o_gre_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get L2O Gre List    
        '''
        
        response = self.session.get('/profiles/l2ogre')
        return response
        

    def profiles_diable_hs20_provider_attribute_accountings(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Diable Hs20 Provider Attribute Accountings    url_id
        '''
        
        response = self.session.delete('/profiles/hs20/identityproviders/{id}/accountings'.format(id=url_id))
        

    def profiles_get_vdp_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Vdp Profile    url_id
        '''
        
        response = self.session.get('/profiles/vdp/{id}'.format(id=url_id))
        return response
        

    def profiles_get_mixed_mode_list_v5(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Mixed Mode List V5    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/mixedmode/query',jdata)
        return response
        

    def profiles_get_forwarding_profile_list(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get Forwarding Profile List    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/forwardingProfile/query',jdata)
        return response
        

    def profiles_get_ipsec_profiles_v5(self, options_auth_testableOnly=None, options_authProfile_hotspot20SupportEnable=None, filters_operator=None, options_auth_includeNa=None, extraFilters_value=None, options_authProfile_gppSupportEnable=None, options_acctProfile_hotspot20SupportEnable=None, start=None, extraFilters_operator=None, fullTextSearch_value=None, options_acct_includeNa=None, options_forwarding_type=None, options_auth_includeAdGlobal=None, options_auth_realmType=None, filters_type=None, options_acct_testableOnly=None, extraTimeRange_end=None, options_auth_type=None, options_acct_type=None, extraFilters_type=None, options_authProfile_aaaSupportEnable=None, filters_value=None, extraTimeRange_interval=None, sortInfo=None, options_auth_includeLocalDb=None, limit=None, extraTimeRange_start=None, fullTextSearch_type=None, page=None, options_auth_includeGuest=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        fullTextSearch_type (Enum)  : Search logic operator
        fullTextSearch_value (String)  : Text or number to search
        sortInfo (Enum)  : About sorting
        extraFilters_operator (Enum)  : operator
        extraFilters_type (Enum)  : Filters for specific attribute
        extraFilters_value (String)  : Group ID
        start (Integer)  : Data get Start from which number
        extraTimeRange_start (String)  : start time for collecting data
        extraTimeRange_interval (String)  : time interval in second
        extraTimeRange_end (String)  : end time for collecting data
        limit (Integer)  : Data offset
        filters_operator (Enum)  : operator
        filters_type (Enum)  : Group type
        filters_value (String)  : Group ID
        options_auth_type (String)  : authentication service types to get, use comma to separate, Ex: RADIUS,AD
        options_auth_includeLocalDb (Boolean)  : include LocalDB auth service while returning result
        options_auth_includeNa (Boolean)  : include Not Available auth service option while returning result
        options_acctProfile_hotspot20SupportEnable : ""
        options_authProfile_hotspot20SupportEnable : ""
        options_acct_includeNa (Boolean)  : include Not Available acct service option while returning result
        options_acct_testableOnly (Boolean)  : only get testable service type
        options_auth_includeGuest (Boolean)  : include Guest auth service while returning result
        options_authProfile_aaaSupportEnable : ""
        options_auth_testableOnly (Boolean)  : only get testable service type
        options_auth_includeAdGlobal (Boolean)  : If AD is in list, include only AD with Global Catalog configured
        options_acct_type (String)  : accounting service types to get, use comma to separate, Ex: RADIUS,CGF
        options_auth_realmType (Enum)  : To get specific authentication service information for configuring realm based authentication profile
        options_authProfile_gppSupportEnable : ""
        options_forwarding_type (String)  : forwarding service types to get, use comma to separate, Ex: L2oGRE,TTGPDG,Bridge,Advanced
        page (Integer)  : Page number to get
        
        Robot Format :
        Profiles Get Ipsec Profiles V5    
        '''
        
        data={"fullTextSearch":{"type" : fullTextSearch_type,"value" : fullTextSearch_value},"sortInfo" : sortInfo,"extraFilters":[{"operator" : extraFilters_operator,"type" : extraFilters_type,"value" : extraFilters_value}],"start" : start,"extraTimeRange":{"start" : extraTimeRange_start,"interval" : extraTimeRange_interval,"end" : extraTimeRange_end},"limit" : limit,"filters":[{"operator" : filters_operator,"type" : filters_type,"value" : filters_value}],"options":{"auth_type" : options_auth_type,"auth_includeLocalDb" : options_auth_includeLocalDb,"auth_includeNa" : options_auth_includeNa,"acctProfile_hotspot20SupportEnable" : options_acctProfile_hotspot20SupportEnable,"authProfile_hotspot20SupportEnable" : options_authProfile_hotspot20SupportEnable,"acct_includeNa" : options_acct_includeNa,"acct_testableOnly" : options_acct_testableOnly,"auth_includeGuest" : options_auth_includeGuest,"authProfile_aaaSupportEnable" : options_authProfile_aaaSupportEnable,"auth_testableOnly" : options_auth_testableOnly,"auth_includeAdGlobal" : options_auth_includeAdGlobal,"acct_type" : options_acct_type,"auth_realmType" : options_auth_realmType,"authProfile_gppSupportEnable" : options_authProfile_gppSupportEnable,"forwarding_type" : options_forwarding_type},"page" : page}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/tunnel/ipsec/query',jdata)
        return response
        

    def profiles_get_mixed_mode_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Mixed Mode List    
        '''
        
        response = self.session.get('/profiles/mixedmode')
        return response
        

    def profiles_modify_zone_affinity_profile(self, url_id, name=None, zoneAffinityList=None):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        name (String)  : Zone affinity profile name
        zoneAffinityList : ""
        
        Robot Format :
        Profiles Modify Zone Affinity Profile    url_id
        '''
        
        data={"name" : name,"zoneAffinityList":[ zoneAffinityList]}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/profiles/zoneAffinity/{id}'.format(id=url_id),jdata)
        

    def profiles_disable_hs20_operator_attribute(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Disable Hs20 Operator Attribute    url_id
        '''
        
        response = self.session.delete('/profiles/hs20/operators/{id}/certificate'.format(id=url_id))
        

    def profiles_delete_user_traffic_profile_list(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete User Traffic Profile List    
        '''
        
        response = self.session.delete('/profiles/utp')
        

    def profiles_get_hotspot_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Hotspot Profile    url_id
        '''
        
        response = self.session.get('/profiles/hotspot/{id}'.format(id=url_id))
        return response
        

    def profiles_delete_authentication_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Authentication Profile    url_id
        '''
        
        response = self.session.delete('/profiles/auth/{id}'.format(id=url_id))
        

    def profiles_delete_user_traffic_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete User Traffic Profile    url_id
        '''
        
        response = self.session.delete('/profiles/utp/{id}'.format(id=url_id))
        

    def profiles_get_dns_server_profile_list(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Dns Server Profile List    
        '''
        
        response = self.session.get('/profiles/dnsserver')
        return response
        

    def profiles_delete_lbs_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Lbs Profile    url_id
        '''
        
        response = self.session.delete('/profiles/lbs/{id}'.format(id=url_id))
        

    def profiles_get_online_signup_profiles(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Online Signup Profiles    
        '''
        
        response = self.session.get('/profiles/osu')
        return response
        

    def profiles_delete_authentication_profile_list(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Authentication Profile List    
        '''
        
        response = self.session.delete('/profiles/auth')
        

    def profiles_create_ipsec_profile(self, name, ikeRekeyTimeUnit, ipMode, serverAddr, ikeRekeyTime, espRekeyTime, espRekeyTimeUnit, preSharedKey=None, cmProtocolOption_cmpServerPath=None, cmProtocolOption_cmpServerAddr=None, advancedOption_dhcpOpt43Subcode=None, id=None, advancedOption_failoverPrimaryCheckInterval=None, authType=None, advancedOption_replayWindow=None, advancedOption_keepAliveIntval=None, espSecurityAssociation_espProposals_authAlg=None, advancedOption_failoverMode=None, advancedOption_failoverRetryPeriod=None, cmProtocolOption_cmpDhcpOpt43SubcodeRecipient=None, advancedOption_ipcompEnable=None, description=None, espSecurityAssociation_espProposals_encAlg=None, advancedOption_dpdDelay=None, advancedOption_failoverRetryInterval=None, cmProtocolOption_cmpRecipient=None, espSecurityAssociation_espProposalType=None, espSecurityAssociation_espProposals_dhGroup=None, cmProtocolOption_cmpDhcpOpt43Subcode=None, domainId=None, ikeSecurityAssociation_ikeProposals_dhGroup=None, ikeSecurityAssociation_ikeProposals_authAlg=None, advancedOption_retryLimit=None, ikeSecurityAssociation_ikeProposals_prfAlg=None, advancedOption_enforceNatt=None, ikeSecurityAssociation_ikeProposals_encAlg=None, ikeSecurityAssociation_ikeProposalType=None):
        '''
        Mandatory Params :
        name (String)  : name of the ipsec profile
        serverAddr (String)  : server Addr of the ipsec profile
        ikeRekeyTimeUnit (Enum)  : ikeRekey time unit of the ipsec profile 
        ikeRekeyTime (Integer)  : ikeRekey Time of the ipsec profile 
        espRekeyTime (Integer)  : espRekey Time of the ipsec profile 
        espRekeyTimeUnit (Enum)  : espRekey time unit of the ipsec profile 
        ipMode (Enum)  : ipMode of the ipsec profile 
        
        Optional Params  :
        preSharedKey (String)  : authentication preShared Key of the ipsec profile
        authType (Enum)  : authentication type of the ipsec profile
        advancedOption_retryLimit (Integer)  : retryLimit of the ipsec profile 
        advancedOption_failoverMode (Enum)  :  mode of the failover
        advancedOption_keepAliveIntval (Integer)  : keepAliveIntval of the ipsec profile 
        advancedOption_failoverRetryInterval (Integer)  :  Retry Interval of the failover
        advancedOption_dpdDelay (Integer)  : dpdDelay of the ipsec profile 
        advancedOption_dhcpOpt43Subcode (Integer)  : dhcpOpt43Subcode of the ipsec profile 
        advancedOption_failoverRetryPeriod (Integer)  : Retry Period of the failover 
        advancedOption_replayWindow (Integer)  : replayWindow of the ipsec profile 
        advancedOption_enforceNatt (Enum)  : enforceNatt Enable of the ipsec profile
        advancedOption_ipcompEnable (Enum)  : ipcomp Enable of the ipsec profile
        advancedOption_failoverPrimaryCheckInterval (Integer)  :  Primary Check Interval of the failover
        description (String)  : description of the ipsec profile
        cmProtocolOption_cmpRecipient (String)  : Certificate Management Protocol Recipient
        cmProtocolOption_cmpDhcpOpt43Subcode (Integer)  : Certificate Management Protocol dhcpOpt43Subcode
        cmProtocolOption_cmpServerAddr (String)  : Certificate Management Protocol Server addr
        cmProtocolOption_cmpServerPath (String)  : Certificate Management Protocol Server Path
        cmProtocolOption_cmpDhcpOpt43SubcodeRecipient (Integer)  : Certificate Management Protocol dhcpOpt43SubcodeRecipient
        id (String)  : identifier of the ipsec profile
        domainId (String)  : Domain id of the IPSec profile
        espSecurityAssociation_espProposalType (Enum)  : espProposal Type of the ipsec profile
        espSecurityAssociation_espProposals_dhGroup (Enum)  : dhGroup of espProposal Specific
        espSecurityAssociation_espProposals_authAlg (Enum)  : authAlg of espProposal Specific
        espSecurityAssociation_espProposals_encAlg (Enum)  : encAlg of espProposal Specific
        ikeSecurityAssociation_ikeProposalType (Enum)  : ikeProposal Type of the ipsec profile
        ikeSecurityAssociation_ikeProposals_prfAlg (Enum)  : prfAlg of ikeProposal Specific
        ikeSecurityAssociation_ikeProposals_dhGroup (Enum)  : dhGroup of ikeProposal Specific
        ikeSecurityAssociation_ikeProposals_authAlg (Enum)  : authAlg of ikeProposal Specific
        ikeSecurityAssociation_ikeProposals_encAlg (Enum)  : encAlg of ikeProposal Specific
        
        Robot Format :
        Profiles Create Ipsec Profile    name    serverAddr    ikeRekeyTimeUnit    ikeRekeyTime    espRekeyTime    espRekeyTimeUnit    ipMode
        '''
        
        data={"preSharedKey" : preSharedKey,"authType" : authType,"advancedOption":{"retryLimit" : advancedOption_retryLimit,"failoverMode" : advancedOption_failoverMode,"keepAliveIntval" : advancedOption_keepAliveIntval,"failoverRetryInterval" : advancedOption_failoverRetryInterval,"dpdDelay" : advancedOption_dpdDelay,"dhcpOpt43Subcode" : advancedOption_dhcpOpt43Subcode,"failoverRetryPeriod" : advancedOption_failoverRetryPeriod,"replayWindow" : advancedOption_replayWindow,"enforceNatt" : advancedOption_enforceNatt,"ipcompEnable" : advancedOption_ipcompEnable,"failoverPrimaryCheckInterval" : advancedOption_failoverPrimaryCheckInterval},"description" : description,"ikeRekeyTimeUnit" : ikeRekeyTimeUnit,"cmProtocolOption":{"cmpRecipient" : cmProtocolOption_cmpRecipient,"cmpDhcpOpt43Subcode" : cmProtocolOption_cmpDhcpOpt43Subcode,"cmpServerAddr" : cmProtocolOption_cmpServerAddr,"cmpServerPath" : cmProtocolOption_cmpServerPath,"cmpDhcpOpt43SubcodeRecipient" : cmProtocolOption_cmpDhcpOpt43SubcodeRecipient},"ipMode" : ipMode,"id" : id,"domainId" : domainId,"serverAddr" : serverAddr,"ikeRekeyTime" : ikeRekeyTime,"espSecurityAssociation":{"espProposalType" : espSecurityAssociation_espProposalType,"espProposals":[{"dhGroup" : espSecurityAssociation_espProposals_dhGroup,"authAlg" : espSecurityAssociation_espProposals_authAlg,"encAlg" : espSecurityAssociation_espProposals_encAlg}]},"espRekeyTime" : espRekeyTime,"espRekeyTimeUnit" : espRekeyTimeUnit,"ikeSecurityAssociation":{"ikeProposalType" : ikeSecurityAssociation_ikeProposalType,"ikeProposals":[{"prfAlg" : ikeSecurityAssociation_ikeProposals_prfAlg,"dhGroup" : ikeSecurityAssociation_ikeProposals_dhGroup,"authAlg" : ikeSecurityAssociation_ikeProposals_authAlg,"encAlg" : ikeSecurityAssociation_ikeProposals_encAlg}]},"name" : name}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/profiles/tunnel/ipsec',jdata)
        res_id = self.get_id_from_response(response)
        if res_id and self.SAVE_RESPONSE:
            self.insert_response_id(name,res_id)
        return response
        

    def profiles_get_ipsec_profile(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Ipsec Profile    url_id
        '''
        
        response = self.session.get('/profiles/tunnel/ipsec/{id}'.format(id=url_id))
        return response
        

    def profiles_get_hs20_provider(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get Hs20 Provider    url_id
        '''
        
        response = self.session.get('/profiles/hs20/identityproviders/{id}'.format(id=url_id))
        return response
        

    def profiles_delete_soft_gre_tunnels(self, idList=None):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        idList : ""
        
        Robot Format :
        Profiles Delete Soft Gre Tunnels    
        '''
        
        response = self.session.delete('/profiles/tunnel/softgre')
        

    def profiles_disable_ttgpdg_attribute_apn_realms(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Disable Ttgpdg Attribute Apn Realms    url_id
        '''
        
        response = self.session.delete('/profiles/ttgpdg/{id}/apnRealms'.format(id=url_id))
        

    def profiles_get_all_zone_affinity_profile(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Get All Zone Affinity Profile    
        '''
        
        response = self.session.get('/profiles/zoneAffinity')
        return response
        

    def profiles_delete_mixed_mode(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Profiles Delete Mixed Mode    url_id
        '''
        
        response = self.session.delete('/profiles/mixedmode/{id}'.format(id=url_id))
        

    def filter_get_tree_by_global_filter(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Filter Get Tree By Global Filter    url_id
        '''
        
        response = self.session.get('/filter/global/{id}/tree'.format(id=url_id))
        return response
        

    def filter_delete_global_filter(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Filter Delete Global Filter    url_id
        '''
        
        response = self.session.delete('/filter/global/{id}'.format(id=url_id))
        

    def filter_create_global_filter(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Filter Create Global Filter    
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.post('/filter/global',jdata)
        return response
        

    def filter_get_global_filter(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Filter Get Global Filter    url_id
        '''
        
        response = self.session.get('/filter/global/{id}'.format(id=url_id))
        return response
        

    def filter_get_tree_by_local_filter(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Filter Get Tree By Local Filter    url_id
        '''
        
        response = self.session.get('/filter/global/{id}/localfilter'.format(id=url_id))
        return response
        

    def filter_get_global_filters(self):
        '''
        Mandatory Params :
        None
        
        Optional Params  :
        None
        
        Robot Format :
        Filter Get Global Filters    
        '''
        
        response = self.session.get('/filter/global')
        return response
        

    def filter_update_global_filter(self, url_id):
        '''
        Mandatory Params :
        url_id : ""
        
        Optional Params  :
        None
        
        Robot Format :
        Filter Update Global Filter    url_id
        '''
        
        data={}
        jdata=self.gen_json_data(data=data)
        response = self.session.patch('/filter/{id}'.format(id=url_id),jdata)
        
